{
    "docs": [
        {
            "location": "/", 
            "text": "nRF52840-MDK \nAn Open-Source, Micro Development Kit for IoT Applications using the nRF52840 SoC\n\n\nDescription\n\n\nThe nRF52840-MDK is a versatile, easy-to-use IoT hardware platform for \nBluetooth 5\n, \nBluetooth Mesh\n, \nThread\n, \nIEEE 802.15.4\n, \nANT\n and 2.4GHz proprietary applications using the nRF52840 SoC.\n\n\nThe development kit comes with a fully integrated debugger (also known as \nDAPLink\n) that provides USB drag-and-drop programming, USB Virtual COM port and CMSIS-DAP interface.\n\n\nThe kit contains a Microchip USB 2.0 Hi-Speed hub controller with two downstream ports: one for DAPLink interface and one for nRF52840 USB device controller. The kit also features ultra-low power 64-Mb QSPI FLASH memory, programmable user button, RGB LED, up to 24 GPIOs, antenna selection for custom applications.\n\n\nIt supports the standard Nordic Software Development Tool-chain using GCC, Keil and IAR. It can also be used to play with many popular frameworks, such as nRF5 SDK, nRF5 SDK for Mesh, OpenThread, ZigBee 3.0, Mbed OS 5, Zephyr, Mynewt, Web Bluetooth, iBeacon, Eddystone, and more.\n\n\n\n\nHardware Features\n\n\n\n\nNordic nRF52840 System-on-Chip\n\n\nARM\u00ae Cortex\u00ae-M4F processor optimized for ultra-low power operation\n\n\nCombining \nBluetooth 5\n, \nBluetooth Mesh\n, \nThread\n, \nIEEE 802.15.4\n, \nANT\n and \n2.4GHz proprietary\n\n\nOn-chip NFC-A tag\n\n\nOn-chip USB 2.0 (Full speed) controller\n\n\nARM TrustZone\u00ae Cryptocell 310 security subsystem\n\n\n1 MB FLASH and 256 kB RAM\n\n\n\n\n\n\nProgram/Debug options with DAPLink\n\n\nMSC - drag-n-drop programming flash memory\n\n\nCDC - virtual com port for log, trace and terminal emulation\n\n\nHID - CMSIS-DAP compliant debug channel\n\n\nWEBUSB HID - CMSIS-DAP compliant debug channel\n\n\n\n\n\n\nMicrochip 2-Port USB 2.0 Hi-Speed Hub Controller\n\n\nExternal ultra-low power 64-Mb QSPI FLASH memory\n\n\nUp to 24 GPIOs available via headers\n\n\nIF Boot/Reset Button\n\n\nUser programmable Button and RGB LED\n\n\nOn-board 2.4G chip antenna \n\n\nU.FL connector selectable for external antenna\n\n\n3.3V regulator with 1A peak current output\n\n\nVBUS \n VIN Power-Path Management\n\n\nReversible USB 3.1 Type-C Connector\n\n\nBreadboard-friendly with dual 18-Pin headers\n\n\nMeasures 1.97\" x 0.9\" x 0.51\" (50mm x 23mm x 13mm) with headers soldered in\n\n\n\n\nPinout Diagram\n\n\n\n\nSoftware Resource\n\n\nThe nRF52840-MDK can be used to play with : \nnRF5 SDK\n, \nnRF5 SDK for Mesh\n, \nOpenThread\n, \nMbed OS 5\n, \nZephyr\n, \nMynewt\n, \nWeb Bluetooth\n, \nEddystone\n, and more.\n\n\n\n\n\n\n\n\nFramework\n\n\nBrief Description\n\n\n\n\n\n\n\n\n\n\nnRF5 SDK\n\n\nOffical Software Development Kit for nRF51 and nRF52 Series\n\n\n\n\n\n\nnRF5 SDK for Mesh\n\n\nSoftware Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series\n\n\n\n\n\n\nOpenThread\n\n\nAn open-source implementation of Thread\u00ae released by Nest\n\n\n\n\n\n\nArm Mbed OS\n\n\nAn open-source platform operating system designed for the internet of things\n\n\n\n\n\n\nZephyr\n\n\nA Small, Scalable Open Source RTOS for Internet of Things Embedded Devices\n\n\n\n\n\n\nMynewt\n\n\nAn OS to build, deploy and securely manage billions of devices\n\n\n\n\n\n\nArm Mbed DAPLink\n\n\nAn open-source software project that enables programming and debugging application running on Arm Cortex CPUs\n\n\n\n\n\n\nWeb Bluetooth\n\n\nBluetooth support for the Web\n\n\n\n\n\n\niBeacon\n\n\nA Bluetooth low energy advertising message format designed by Apple\n\n\n\n\n\n\nEddystone\n\n\nA protocol specification that defines a Bluetooth low energy message format for proximity beacon messages\n\n\n\n\n\n\n\n\nHardware Resource\n\n\n\n\n\n\n\n\nReleases\n\n\nDesign Files\n\n\n\n\n\n\n\n\n\n\nV1.0\n\n\nnRF52840-MDK V1.0 Pinout Diagram\nnRF52840-MDK V1.0 Schematic\nnRF52840-MDK V1.0 Board File\nnRF52840-MDK V1.0 3D STEP\n\n\n\n\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free to click here:\n\n\n Create an Issue", 
            "title": "Introduction"
        }, 
        {
            "location": "/#nrf52840-mdk-an-open-source-micro-development-kit-for-iot-applications-using-the-nrf52840-soc", 
            "text": "", 
            "title": "nRF52840-MDK An Open-Source, Micro Development Kit for IoT Applications using the nRF52840 SoC"
        }, 
        {
            "location": "/#description", 
            "text": "The nRF52840-MDK is a versatile, easy-to-use IoT hardware platform for  Bluetooth 5 ,  Bluetooth Mesh ,  Thread ,  IEEE 802.15.4 ,  ANT  and 2.4GHz proprietary applications using the nRF52840 SoC.  The development kit comes with a fully integrated debugger (also known as  DAPLink ) that provides USB drag-and-drop programming, USB Virtual COM port and CMSIS-DAP interface.  The kit contains a Microchip USB 2.0 Hi-Speed hub controller with two downstream ports: one for DAPLink interface and one for nRF52840 USB device controller. The kit also features ultra-low power 64-Mb QSPI FLASH memory, programmable user button, RGB LED, up to 24 GPIOs, antenna selection for custom applications.  It supports the standard Nordic Software Development Tool-chain using GCC, Keil and IAR. It can also be used to play with many popular frameworks, such as nRF5 SDK, nRF5 SDK for Mesh, OpenThread, ZigBee 3.0, Mbed OS 5, Zephyr, Mynewt, Web Bluetooth, iBeacon, Eddystone, and more.", 
            "title": "Description"
        }, 
        {
            "location": "/#hardware-features", 
            "text": "Nordic nRF52840 System-on-Chip  ARM\u00ae Cortex\u00ae-M4F processor optimized for ultra-low power operation  Combining  Bluetooth 5 ,  Bluetooth Mesh ,  Thread ,  IEEE 802.15.4 ,  ANT  and  2.4GHz proprietary  On-chip NFC-A tag  On-chip USB 2.0 (Full speed) controller  ARM TrustZone\u00ae Cryptocell 310 security subsystem  1 MB FLASH and 256 kB RAM    Program/Debug options with DAPLink  MSC - drag-n-drop programming flash memory  CDC - virtual com port for log, trace and terminal emulation  HID - CMSIS-DAP compliant debug channel  WEBUSB HID - CMSIS-DAP compliant debug channel    Microchip 2-Port USB 2.0 Hi-Speed Hub Controller  External ultra-low power 64-Mb QSPI FLASH memory  Up to 24 GPIOs available via headers  IF Boot/Reset Button  User programmable Button and RGB LED  On-board 2.4G chip antenna   U.FL connector selectable for external antenna  3.3V regulator with 1A peak current output  VBUS   VIN Power-Path Management  Reversible USB 3.1 Type-C Connector  Breadboard-friendly with dual 18-Pin headers  Measures 1.97\" x 0.9\" x 0.51\" (50mm x 23mm x 13mm) with headers soldered in", 
            "title": "Hardware Features"
        }, 
        {
            "location": "/#pinout-diagram", 
            "text": "", 
            "title": "Pinout Diagram"
        }, 
        {
            "location": "/#software-resource", 
            "text": "The nRF52840-MDK can be used to play with :  nRF5 SDK ,  nRF5 SDK for Mesh ,  OpenThread ,  Mbed OS 5 ,  Zephyr ,  Mynewt ,  Web Bluetooth ,  Eddystone , and more.     Framework  Brief Description      nRF5 SDK  Offical Software Development Kit for nRF51 and nRF52 Series    nRF5 SDK for Mesh  Software Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series    OpenThread  An open-source implementation of Thread\u00ae released by Nest    Arm Mbed OS  An open-source platform operating system designed for the internet of things    Zephyr  A Small, Scalable Open Source RTOS for Internet of Things Embedded Devices    Mynewt  An OS to build, deploy and securely manage billions of devices    Arm Mbed DAPLink  An open-source software project that enables programming and debugging application running on Arm Cortex CPUs    Web Bluetooth  Bluetooth support for the Web    iBeacon  A Bluetooth low energy advertising message format designed by Apple    Eddystone  A protocol specification that defines a Bluetooth low energy message format for proximity beacon messages", 
            "title": "Software Resource"
        }, 
        {
            "location": "/#hardware-resource", 
            "text": "Releases  Design Files      V1.0  nRF52840-MDK V1.0 Pinout Diagram nRF52840-MDK V1.0 Schematic nRF52840-MDK V1.0 Board File nRF52840-MDK V1.0 3D STEP", 
            "title": "Hardware Resource"
        }, 
        {
            "location": "/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free to click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting started with the nRF52840-MDK Board\n\n\n\n\nCongratulations on getting the nRF52840-MDK!\n\n\nOn this page we'll show you how to connect and power up your nRF52840-MDK, and what to expect when you do so. This will take about 20 minutes.\n\n\n\n\nWhat's Included\n\n\nOnce you receive your nRF52840-MDK development kit, you will find the following parts:\n\n\n\n\nThe nRF52840-MDK Board\n\n\nThe USB 3.1 Type-C to USB 2.0 Type-A Male Cable\n\n\n\n\n\n\nConnecting the board\n\n\n\n\nNote\n\n\nYou need a reasonably current Mac/Linux/Windows PC and a iPhone or Android phone to perform the following.\n\n\n\n\nYou can connect the board by performing the following steps:\n\n\n\n\n\n\nConnect the nRF52840-MDK to one of your PC's USB host ports. This provides power to the board. Observe that two GREEN LEDs are on. One indicates that USB power is good, and another indicates that the application is advertising.\n\n\n\n\n\n\nOpen a file explorer. Confirm that the board has appeared as a removable drive named \nDAPLINK\n. This allows you to program the nRF52840 chip. You'll do this under \"\nhow to program your nRF52840-MDK\n\" below.\n\n\n\n\n\n\n\n\nUsing terminal applications\n\n\nTerminal applications (for example \nPuTTY\n or \nscreen\n) run on your host PC. They provide a window where your board can print messages.\n\n\nYou can connect your board to your computer over USB. This should work out of the box on Linux and macOS, but for Windows earlier than Windows 10, you will probably need to install a serial port driver:\n\n\n\n\n\n\nDownload the \nArm Mbed Windows serial port driver\n.\n\n\n\n\n\n\nPlug in your board over USB. It mounts as a drive.\n\n\n\n\n\n\nClose all Explorer windows showing the drive.\n\n\n\n\n\n\nRun the installer. This may take some time or display a few \"unsigned driver\" warnings.\n\n\n\n\n\n\n\n\nSerial configuration\n\n\nThe default setup for the USB serial port is 115200 baud, 8 bits, 1 stop bit, no parity (115200-8-N-1)\n\n\n\n\nOn Windows\n\n\nThere are many terminal applications for Windows, \nPuTTY\n is recommended.\n\n\nStart PuTTY and open the used COM port with the following configuration. If there is nothing printed, just press RESET button on the board.\n\n\n\n\n\n\nOn macOS\n\n\nscreen\n should work on macOS. In Terminal, run:\n\n\n$ screen /dev/cu.usbmodem1412 \n115200\n\n\n\n\n\nIf there is nothing printed, just press RESET button on the board.\n\n\n\n\nTip\n\n\nYou can type \nscreen /dev/cu.usb\n first, and then press \ntab\n. The device name will autocomplete.\n\n\nTo end a screen session, type \nCtrl\n + \nA\n, and then \nK\n. At the bottom of the Terminal window, you should see a \n[y/n]\n prompt. Type \ny\n.\n\n\n\n\n\n\nOn Linux\n\n\nscreen\n should work on Linux. If for some reason it doesn't, you can try one of the following:\n\n\n\n\n\n\nCoolTerm\n\n\n\n\n\n\nMinicom\n\n\n\n\n\n\nHere we will use \nscreen\n on Ubuntu 16.04 for example. If there is nothing printed, just press RESET button on the board.\n\n\n$ sudo apt-get install screen\n\n\n\n\n$ sudo screen /dev/ttyACM0 \n115200\n\n\n\n\n\n\n\nUsing nRF Connect\n\n\nYou can also test the application with the \nnRF Connect\n mobile app by performing the following steps:\n\n\n\n\n\n\nGet the \nnRF Connect\n app from App Store or Google Play.\n\n\n\n\n\n\nConnect to the device from \nnRF Connect\n (the device is advertising as \nnRF52840-MDK\n).\n\n\n\n\n\n\nObserve that BLUE LED is on and GREEN LED is off. This indicates that the connections is established.\n\n\n\n\n\n\nObserve that the \nLED Button Service\n is shown in the connected device and then you can enable services for the Button Characteristic by clicking the \nPlay\n button.\n\n\n\n\n\n\nNotifications are received on the Button Characteristic (0x1524) when pressing or releasing the USER Button.\n\n\n\n\n\n\nWrite \n01\n to the \nNordic Blinky LED\n Characteristic (0x1525) and observe that RED LED is turned on.\n\n\n\n\n\n\nWrite \n00\n to the \nNordic Blinky LED\n Characteristic (0x1525) and observe that RED LED is turned off.\n\n\n\n\n\n\n\n\nHow to program your nRF52840-MDK\n\n\nYou have the following two options to program your board: \n\n\n\n\n\n\nDrag-n-drop Programming\n\n\n\n\n\n\nUsing pyOCD\n.\n\n\n\n\n\n\nYou can take the \nHeart rate monitor\n demo as an example. \n\n\nGet the firmware\n\n\n\n\nNote\n\n\nMake sure you have installed the \nnRF Toolbox\n mobile app before you start. Just search \nnRF Toolbox\n in the App Store or Google Play.\n\n\n\n\nDrag-n-drop Programming\n\n\nDrag and drop the hex file into the \nDAPLINK\n removable drive mentioned above. The file contains firmware which will be automatically programmed onto the nRF52840 SoC. When programming is completed, the removable drive will be re-detected by the computer. The application will run after pressing the RESET button.\n\n\n\n\n\n\nNote\n\n\nYou should merge the application and SoftDevice before drag-n-drop programming an example with SoftDevice. \nmergehex\n can be used to merge the hex files. You can find it in the \nnRF5x Command Line Tools\n.\n\n\n\n\nUsing pyOCD\n\n\npyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported.\n\n\nThe latest stable version of pyOCD may be installed via \npip\n as follows:\n\n\n$ pip install --pre -U pyocd\n\n\n\n\nAlternatively, to install the latest development version (master branch), you can do the following:\n\n\n$ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip\n\n\n\n\n\n\nNote\n\n\nYou may run into permissions issues running these commands. You have a few options here:\n\n\n\n\nRun with \nsudo -H\n to install pyOCD and dependencies globally\n\n\nSpecify the \n--user\n option to install local to your user\n\n\nRun the command in a \nvirtualenv\n local to a specific project working set.\n\n\n\n\n\n\nYou can verify that your board is detected by pyOCD by running:\n\n\n$ pyocd-flashtool -l\n\n\n\n\nand then flash the board by running:\n\n\n$ pyocd-flashtool -d debug -t nrf52 -se nrf52840_mdk_ble_app_hrs_s140.hex\n\n\n\n\n\n\nVerify new firmware\n\n\nAfter programming the demo firmware, you can interact with the \nnRF Toolbox\n mobile app to check if it works correctly. \n\n\nOpen the App and tap \nHRM\n icon, and then connect your board which is advertising as \nNordic_HRM\n. The nRF Toolbox app displays the curve.\n\n\n\n\nClone the repository\n\n\nClone the \nmakerdiary/nrf52840-mdk\n repository or download it as a zip package and put its contents to your working directory.\n\n\n$ git clone https://github.com/makerdiary/nrf52840-mdk.git\n\n\n\n\nThis repository provides documents and example applications that you can run on your nRF52840-MDK to ensure that everything is set up correctly.\n\n\nEnjoy the demos and your nRF52840-MDK!\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free to click here:\n\n\n Create an Issue", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started-with-the-nrf52840-mdk-board", 
            "text": "Congratulations on getting the nRF52840-MDK!  On this page we'll show you how to connect and power up your nRF52840-MDK, and what to expect when you do so. This will take about 20 minutes.", 
            "title": "Getting started with the nRF52840-MDK Board"
        }, 
        {
            "location": "/getting-started/#whats-included", 
            "text": "Once you receive your nRF52840-MDK development kit, you will find the following parts:   The nRF52840-MDK Board  The USB 3.1 Type-C to USB 2.0 Type-A Male Cable", 
            "title": "What's Included"
        }, 
        {
            "location": "/getting-started/#connecting-the-board", 
            "text": "Note  You need a reasonably current Mac/Linux/Windows PC and a iPhone or Android phone to perform the following.   You can connect the board by performing the following steps:    Connect the nRF52840-MDK to one of your PC's USB host ports. This provides power to the board. Observe that two GREEN LEDs are on. One indicates that USB power is good, and another indicates that the application is advertising.    Open a file explorer. Confirm that the board has appeared as a removable drive named  DAPLINK . This allows you to program the nRF52840 chip. You'll do this under \" how to program your nRF52840-MDK \" below.", 
            "title": "Connecting the board"
        }, 
        {
            "location": "/getting-started/#using-terminal-applications", 
            "text": "Terminal applications (for example  PuTTY  or  screen ) run on your host PC. They provide a window where your board can print messages.  You can connect your board to your computer over USB. This should work out of the box on Linux and macOS, but for Windows earlier than Windows 10, you will probably need to install a serial port driver:    Download the  Arm Mbed Windows serial port driver .    Plug in your board over USB. It mounts as a drive.    Close all Explorer windows showing the drive.    Run the installer. This may take some time or display a few \"unsigned driver\" warnings.     Serial configuration  The default setup for the USB serial port is 115200 baud, 8 bits, 1 stop bit, no parity (115200-8-N-1)", 
            "title": "Using terminal applications"
        }, 
        {
            "location": "/getting-started/#on-windows", 
            "text": "There are many terminal applications for Windows,  PuTTY  is recommended.  Start PuTTY and open the used COM port with the following configuration. If there is nothing printed, just press RESET button on the board.", 
            "title": "On Windows"
        }, 
        {
            "location": "/getting-started/#on-macos", 
            "text": "screen  should work on macOS. In Terminal, run:  $ screen /dev/cu.usbmodem1412  115200   If there is nothing printed, just press RESET button on the board.   Tip  You can type  screen /dev/cu.usb  first, and then press  tab . The device name will autocomplete.  To end a screen session, type  Ctrl  +  A , and then  K . At the bottom of the Terminal window, you should see a  [y/n]  prompt. Type  y .", 
            "title": "On macOS"
        }, 
        {
            "location": "/getting-started/#on-linux", 
            "text": "screen  should work on Linux. If for some reason it doesn't, you can try one of the following:    CoolTerm    Minicom    Here we will use  screen  on Ubuntu 16.04 for example. If there is nothing printed, just press RESET button on the board.  $ sudo apt-get install screen  $ sudo screen /dev/ttyACM0  115200", 
            "title": "On Linux"
        }, 
        {
            "location": "/getting-started/#using-nrf-connect", 
            "text": "You can also test the application with the  nRF Connect  mobile app by performing the following steps:    Get the  nRF Connect  app from App Store or Google Play.    Connect to the device from  nRF Connect  (the device is advertising as  nRF52840-MDK ).    Observe that BLUE LED is on and GREEN LED is off. This indicates that the connections is established.    Observe that the  LED Button Service  is shown in the connected device and then you can enable services for the Button Characteristic by clicking the  Play  button.    Notifications are received on the Button Characteristic (0x1524) when pressing or releasing the USER Button.    Write  01  to the  Nordic Blinky LED  Characteristic (0x1525) and observe that RED LED is turned on.    Write  00  to the  Nordic Blinky LED  Characteristic (0x1525) and observe that RED LED is turned off.", 
            "title": "Using nRF Connect"
        }, 
        {
            "location": "/getting-started/#how-to-program-your-nrf52840-mdk", 
            "text": "You have the following two options to program your board:     Drag-n-drop Programming    Using pyOCD .    You can take the  Heart rate monitor  demo as an example.   Get the firmware   Note  Make sure you have installed the  nRF Toolbox  mobile app before you start. Just search  nRF Toolbox  in the App Store or Google Play.", 
            "title": "How to program your nRF52840-MDK"
        }, 
        {
            "location": "/getting-started/#drag-n-drop-programming", 
            "text": "Drag and drop the hex file into the  DAPLINK  removable drive mentioned above. The file contains firmware which will be automatically programmed onto the nRF52840 SoC. When programming is completed, the removable drive will be re-detected by the computer. The application will run after pressing the RESET button.    Note  You should merge the application and SoftDevice before drag-n-drop programming an example with SoftDevice.  mergehex  can be used to merge the hex files. You can find it in the  nRF5x Command Line Tools .", 
            "title": "Drag-n-drop Programming"
        }, 
        {
            "location": "/getting-started/#using-pyocd", 
            "text": "pyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported.  The latest stable version of pyOCD may be installed via  pip  as follows:  $ pip install --pre -U pyocd  Alternatively, to install the latest development version (master branch), you can do the following:  $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip   Note  You may run into permissions issues running these commands. You have a few options here:   Run with  sudo -H  to install pyOCD and dependencies globally  Specify the  --user  option to install local to your user  Run the command in a  virtualenv  local to a specific project working set.    You can verify that your board is detected by pyOCD by running:  $ pyocd-flashtool -l  and then flash the board by running:  $ pyocd-flashtool -d debug -t nrf52 -se nrf52840_mdk_ble_app_hrs_s140.hex", 
            "title": "Using pyOCD"
        }, 
        {
            "location": "/getting-started/#verify-new-firmware", 
            "text": "After programming the demo firmware, you can interact with the  nRF Toolbox  mobile app to check if it works correctly.   Open the App and tap  HRM  icon, and then connect your board which is advertising as  Nordic_HRM . The nRF Toolbox app displays the curve.", 
            "title": "Verify new firmware"
        }, 
        {
            "location": "/getting-started/#clone-the-repository", 
            "text": "Clone the  makerdiary/nrf52840-mdk  repository or download it as a zip package and put its contents to your working directory.  $ git clone https://github.com/makerdiary/nrf52840-mdk.git  This repository provides documents and example applications that you can run on your nRF52840-MDK to ensure that everything is set up correctly.  Enjoy the demos and your nRF52840-MDK!", 
            "title": "Clone the repository"
        }, 
        {
            "location": "/getting-started/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free to click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/nrf5-sdk/", 
            "text": "nRF5 SDK \nOffical Software Development Kit for nRF51 and nRF52 Series\n\n\n\n\nIntroduction\n\n\nThe nRF5 SDK provides a rich developing environment for nRF5 Series devices by including a broad selection of drivers, libraries, examples for peripherals, SoftDevices, and proprietary radio protocols.\n\n\nThe SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice.\n\n\nWe provide example applications that you can run on your nRF52840-MDK to ensure that everything is set up correctly. After these tests, you can use the examples as starting point to develop your own applications.\n\n\nBefore we begin, we need to install some software components to build our example applications. Here we recommend GNU Arm Embedded Toolchains as they are free and open-source.\n\n\nInstalling GNU Arm Embedded Toolchain\n\n\nThe GNU Embedded Toolchain for Arm is a ready-to-use, open source suite of tools for C, C++ and Assembly programming targeting Arm Cortex-M and Cortex-R family of processors. It includes the GNU Compiler (GCC) and is available free of charge directly from Arm for embedded software development on Windows, Linux and macOS operating systems.\n\n\nThese toolchains are based on \nFree Software Foundation\n's (FSF) GNU Open source tools and newlib.\n\n\nThe pre-built GNU Arm Embedded Toolchain can be downloaded using the following link: \n\n\nDownload\n\n\n\n\nNote\n\n\nFor some reason, the latest version \n7-2017-q4-major\n doesn't work with nRF5 SDK well. You can use \nVersion 6-2017-q2-update\n instead.\n\n\n\n\nDownload and install the \n6-2017-q2-update\n version. Then make sure to add the path to your toolchain to your OS PATH environment variable:\n\n\n# in ~/.bash_profile, add the following script\n\n\nexport\n \nPATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update/bin:\n${\nPATH\n}\n\n\n\n\n\nAdding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal:\n\n\n$ arm-none-eabi-gcc --version\n\n\n\n\n\nInstalling GNU make\n\n\nNow with the toolchain installed we can build object files from source code, but to build projects based on makefiles, which can be seen as a recipes for the builds, we need to have \nGNU make\n installed on the system.\n\n\nOn Windows the easiest way to install the dependencies is to use the \nMSYS2\n. You can do so by performing the following steps:\n\n\nDownload\n\n\n\n\n\n\nDownload and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows.\n\n\n\n\n\n\nUpdate the package database and core system packages with:\n\n\n$ pacman -Syu\n\n\n\n\n\n\n\n\nIf needed, close MSYS2, run it again from Start menu. Update the rest with:\n\n\n$ pacman -Su\n\n\n\n\n\n\n\n\nInstall dependencies:\n\n\n$ pacman -S git make python2\n\n\n\n\n\n\n\n\nLinux and macOS already have the necessary shell commands, but GNU make may not be a part of the standard distro. Call \nmake -v\n from the terminal to check whether it is installed or not. GNU make would need to be installed if it's not recognized as a command.\n\n\nGNU make is bundled with Xcode tools if working on macOS.\n\n\nOn Linux it may be different ways to obtain GNU make depending on your distro, if not installed already. On Ubuntu you can get by entering this command:\n\n\n$ sudo apt-get install build-essential checkinstall\n\n\n\n\n\n\nInstalling the nRF5 SDK\n\n\nDownload the SDK file \nnRF5_SDK_v15.0.0_a53641a.zip\n from \ndeveloper.nordicsemi.com\n.\n\n\nThe latest version is \n15.0.0\n, it can be downloaded directly here:\n\n\nDownload\n\n\nExtract the zip file to the \nnrf52840-mdk\n repository. This should give you the following folder structure:\n\n\n./nrf52840-mdk/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 firmware\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 nrf_sdks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a\n\u2514\u2500\u2500 tools\n\n\n\n\nTo build an example application you first need to set the toolchain path in \nmakefile.windows\n or \nmakefile.posix\n depending on platform you are using. That is, the \n.posix\n should be edited if your are working on either Linux or macOS. These files are located in:\n\n\nSDK\n/components/toolchain/gcc\n\n\n\n\nOpen the file in a text editor (\nSublime\n is recommended), and make sure that the \nGNU_INSTALL_ROOT\n variable is pointing to your GNU Arm Embedded Toolchain install directory.\n\n\nGNU_INSTALL_ROOT :\n=\n \n$(\nHOME\n)\n/gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/\nGNU_VERSION :\n=\n \n6\n.3.1\nGNU_PREFIX :\n=\n arm-none-eabi\n\n\n\n\nCompiling and running blinky example\n\n\nNow you can try to build one of the examples. Will use the \nblinky\n example here to keep it simple.\n\n\nOpen terminal and change directory to:\n\n\n$ \ncd\n ./nrf52840-mdk/examples/nrf5-sdk/blinky/armgcc/\n\n\n\n\nConnect the nRF52840-MDK to one of your PC's USB host ports. Compile and program the example:\n\n\n$ make flash\n\n\n\n\n\n\nNote\n\n\nMake sure you have installed the \npyOCD\n tool on your PC before you start. Just follow the '\nUsing pyOCD\n' section.\n\n\n\n\nObserve that the LEDs are blinking:\n\n\n\n\nRunning examples that use a SoftDevice\n\n\nBefore you can run more advanced examples that use \nBluetooth\n or \nANT\n, you must program the SoftDevice on the board.\n\n\nThe SoftDevice binary is located in folder \ncomponents/softdevice/\nSoftDevice\n/hex\n in the SDK, where \nSoftDevice\n is the name of the SoftDevice. You can also download SoftDevices from \nnordicsemi.com\n.\n\n\nThe easiest way to program the SoftDevice is using the GCC makefile of an example:\n\n\n\n\n\n\nOpen a command prompt in the folder that contains the makefile of an example. The example must require a SoftDevice. For example, the \nble_app_blinky\n example.\n\n\n# change to the armgcc directory of \nble_app_blinky\n example\n\n$ \ncd\n ~/nrf52840-mdk/examples/nrf5-sdk/ble_app_blinky/armgcc\n\n\n\n\n\n\n\n\nRun the following command:\n\n\n# this will compile \n program the application(without SoftDevice)\n\n$ make flash\n\n\n\n\n# this will program SoftDevice alone\n\n$ make flash_softdevice\n\n\n\n\nOr \n\n\n# this will program the application with SoftDevice\n\n$ make\n$ make flash_all\n\n\n\n\n\n\n\n\n\n\nMore examples\n\n\nOver time, more example applications will be added to the repository. You can star or watch the \nnrf52840-mdk\n repository to stay up to date.\n\n\nReference\n\n\n\n\n\n\nNordic nRF5 SDK\n\n\n\n\n\n\nNordic Semiconductor Infocenter\n\n\n\n\n\n\nmakerdiary/nrf52840-mdk\n\n\n\n\n\n\nGNU Arm Embedded Toolchain\n\n\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "nRF5 SDK"
        }, 
        {
            "location": "/nrf5-sdk/#nrf5-sdk-offical-software-development-kit-for-nrf51-and-nrf52-series", 
            "text": "", 
            "title": "nRF5 SDK Offical Software Development Kit for nRF51 and nRF52 Series"
        }, 
        {
            "location": "/nrf5-sdk/#introduction", 
            "text": "The nRF5 SDK provides a rich developing environment for nRF5 Series devices by including a broad selection of drivers, libraries, examples for peripherals, SoftDevices, and proprietary radio protocols.  The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice.  We provide example applications that you can run on your nRF52840-MDK to ensure that everything is set up correctly. After these tests, you can use the examples as starting point to develop your own applications.  Before we begin, we need to install some software components to build our example applications. Here we recommend GNU Arm Embedded Toolchains as they are free and open-source.", 
            "title": "Introduction"
        }, 
        {
            "location": "/nrf5-sdk/#installing-gnu-arm-embedded-toolchain", 
            "text": "The GNU Embedded Toolchain for Arm is a ready-to-use, open source suite of tools for C, C++ and Assembly programming targeting Arm Cortex-M and Cortex-R family of processors. It includes the GNU Compiler (GCC) and is available free of charge directly from Arm for embedded software development on Windows, Linux and macOS operating systems.  These toolchains are based on  Free Software Foundation 's (FSF) GNU Open source tools and newlib.  The pre-built GNU Arm Embedded Toolchain can be downloaded using the following link:   Download   Note  For some reason, the latest version  7-2017-q4-major  doesn't work with nRF5 SDK well. You can use  Version 6-2017-q2-update  instead.   Download and install the  6-2017-q2-update  version. Then make sure to add the path to your toolchain to your OS PATH environment variable:  # in ~/.bash_profile, add the following script  export   PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH }   Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal:  $ arm-none-eabi-gcc --version", 
            "title": "Installing GNU Arm Embedded Toolchain"
        }, 
        {
            "location": "/nrf5-sdk/#installing-gnu-make", 
            "text": "Now with the toolchain installed we can build object files from source code, but to build projects based on makefiles, which can be seen as a recipes for the builds, we need to have  GNU make  installed on the system.  On Windows the easiest way to install the dependencies is to use the  MSYS2 . You can do so by performing the following steps:  Download    Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows.    Update the package database and core system packages with:  $ pacman -Syu    If needed, close MSYS2, run it again from Start menu. Update the rest with:  $ pacman -Su    Install dependencies:  $ pacman -S git make python2    Linux and macOS already have the necessary shell commands, but GNU make may not be a part of the standard distro. Call  make -v  from the terminal to check whether it is installed or not. GNU make would need to be installed if it's not recognized as a command.  GNU make is bundled with Xcode tools if working on macOS.  On Linux it may be different ways to obtain GNU make depending on your distro, if not installed already. On Ubuntu you can get by entering this command:  $ sudo apt-get install build-essential checkinstall", 
            "title": "Installing GNU make"
        }, 
        {
            "location": "/nrf5-sdk/#installing-the-nrf5-sdk", 
            "text": "Download the SDK file  nRF5_SDK_v15.0.0_a53641a.zip  from  developer.nordicsemi.com .  The latest version is  15.0.0 , it can be downloaded directly here:  Download  Extract the zip file to the  nrf52840-mdk  repository. This should give you the following folder structure:  ./nrf52840-mdk/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 firmware\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 nrf_sdks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a\n\u2514\u2500\u2500 tools  To build an example application you first need to set the toolchain path in  makefile.windows  or  makefile.posix  depending on platform you are using. That is, the  .posix  should be edited if your are working on either Linux or macOS. These files are located in:  SDK /components/toolchain/gcc  Open the file in a text editor ( Sublime  is recommended), and make sure that the  GNU_INSTALL_ROOT  variable is pointing to your GNU Arm Embedded Toolchain install directory.  GNU_INSTALL_ROOT : =   $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/\nGNU_VERSION : =   6 .3.1\nGNU_PREFIX : =  arm-none-eabi", 
            "title": "Installing the nRF5 SDK"
        }, 
        {
            "location": "/nrf5-sdk/#compiling-and-running-blinky-example", 
            "text": "Now you can try to build one of the examples. Will use the  blinky  example here to keep it simple.  Open terminal and change directory to:  $  cd  ./nrf52840-mdk/examples/nrf5-sdk/blinky/armgcc/  Connect the nRF52840-MDK to one of your PC's USB host ports. Compile and program the example:  $ make flash   Note  Make sure you have installed the  pyOCD  tool on your PC before you start. Just follow the ' Using pyOCD ' section.   Observe that the LEDs are blinking:", 
            "title": "Compiling and running blinky example"
        }, 
        {
            "location": "/nrf5-sdk/#running-examples-that-use-a-softdevice", 
            "text": "Before you can run more advanced examples that use  Bluetooth  or  ANT , you must program the SoftDevice on the board.  The SoftDevice binary is located in folder  components/softdevice/ SoftDevice /hex  in the SDK, where  SoftDevice  is the name of the SoftDevice. You can also download SoftDevices from  nordicsemi.com .  The easiest way to program the SoftDevice is using the GCC makefile of an example:    Open a command prompt in the folder that contains the makefile of an example. The example must require a SoftDevice. For example, the  ble_app_blinky  example.  # change to the armgcc directory of  ble_app_blinky  example \n$  cd  ~/nrf52840-mdk/examples/nrf5-sdk/ble_app_blinky/armgcc    Run the following command:  # this will compile   program the application(without SoftDevice) \n$ make flash  # this will program SoftDevice alone \n$ make flash_softdevice  Or   # this will program the application with SoftDevice \n$ make\n$ make flash_all", 
            "title": "Running examples that use a SoftDevice"
        }, 
        {
            "location": "/nrf5-sdk/#more-examples", 
            "text": "Over time, more example applications will be added to the repository. You can star or watch the  nrf52840-mdk  repository to stay up to date.", 
            "title": "More examples"
        }, 
        {
            "location": "/nrf5-sdk/#reference", 
            "text": "Nordic nRF5 SDK    Nordic Semiconductor Infocenter    makerdiary/nrf52840-mdk    GNU Arm Embedded Toolchain", 
            "title": "Reference"
        }, 
        {
            "location": "/nrf5-sdk/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/mesh/", 
            "text": "nRF5 SDK for Mesh \nSoftware Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series\n\n\n\n\nIntroduction\n\n\nThe nRF5 SDK for Mesh is Nordic Semiconductor's implementation of the \nBluetooth Mesh\n. It allows applications to utilize the features provided by the Bluetooth Mesh when running on Nordic's nRF5 Series chips.\n\n\nThe addition of mesh networking capabilities to Bluetooth Low Energy enables extended range, increases the number of nodes and a many-to-many (m:m) communication topology. In a Bluetooth mesh network every received packet is broadcasted by relays, until the packet is received by the destination node (a so called managed flooding mesh.) A simple, but effective way of spreading information across the mesh network with no single point of failure. The mesh functionality is a significant update and enables new applications for Bluetooth in smart home, lighting, beaconing and asset tracking applications.\n\n\n\n\nFor more information, go to \nnordicsemi.com\n.\n\n\nGetting started\n\n\nYou can find detailed information about Bluetooth Mesh in \nBluetooth SIG's introduction to Bluetooth Mesh\n and the \nBluetooth Mesh Networking Specifications\n.\n\n\nThe following documentation sections provide detailed information about the required software toolchains and the process of building a mesh stack.\n\n\nInstalling the toolchain\n\n\nTo build the example applications, a toolchain based on either CMake is required. Install instructions are provided for macOS. The steps should be similar for other platforms.\n\n\nCMake\n\n\nCMake\n is a build management system used for managing an environment that is independent of the compiler and build system used. Version 3.6 or above is required by the mesh stack.\n\n\nInstall CMake using \nbrew\n on macOS:\n\n\n$ brew install cmake\n\n\n\n\nGNU Arm Embedded Toolchain\n\n\nThe GNU Embedded Toolchain for Arm is a ready-to-use, open source suite of tools for C, C++ and Assembly programming targeting Arm Cortex-M and Cortex-R family of processors. It includes the GNU Compiler (GCC) and is available free of charge directly from Arm for embedded software development on Windows, Linux and macOS operating systems.\n\n\nDownload and install the \n6-2017-q2-update\n version. Then make sure to add the path to your toolchain to your OS PATH environment variable:\n\n\nDownload\n\n\n# in ~/.bash_profile, add the following script\n\n\nexport\n \nPATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update/bin:\n${\nPATH\n}\n\n\n\n\n\nAdding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal:\n\n\n$ arm-none-eabi-gcc --version\n\n\n\n\nNinja\n\n\nNinja\n is a small build system with a focus on speed. It differs from other build systems in two major respects: it is designed to have its input files generated by a higher-level build system, and it is designed to run builds as fast as possible.\n\n\nInstall Ninja using \nbrew\n on macOS:\n\n\n$ brew install ninja\n\n\n\n\nBuilding the mesh stack and examples\n\n\nThe mesh library and example applications can be built using \nCMake\n mentioned above.\n\n\nBefore you continue, check \nInstalling the toolchain\n for instructions on setting up the development environment for mesh.\n\n\nDownload the SDKs\n\n\nThe nRF5 SDK for Mesh now requires the nRF5 SDK to compile. You can download them using the following links:\n\n\n\n\nnRF5 SDK\n\n\nnRF5 SDK for Mesh\n\n\n\n\nBy default, the nRF5 SDK is expected to be adjacent to the nRF5 SDK for Mesh. The directory structure should look like this:\n\n\n.\n\u251c\u2500\u2500 nrf5_SDK_for_Mesh_v2.0.1_src/\n\u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a/\n\n\n\n\nAdding support for nRF52840-MDK\n\n\nTo add support for nRF52840-MDK, you must create a support file with the name \ncustom_board.h\n. This file must be located in a directory in the \nnRF5_SDK_15.0.0_a53641a/components/boards/\n path. \n\n\nThe easiest way to create the \ncustom_board.h\n file is to start with an existing platform definition file (for example \npca10056.h\n) and adapt it to:\n\n\n#ifndef CUSTOM_BOARD_H\n\n\n#define CUSTOM_BOARD_H\n\n\n\n#ifdef __cplusplus\n\n\nextern\n \nC\n \n{\n\n\n#endif\n\n\n\n#include\n \nnrf_gpio.h\n\n\n\n// LEDs definitions for nRF52840-MDK\n\n\n#define LEDS_NUMBER    3\n\n\n\n#define LED_1          NRF_GPIO_PIN_MAP(0,22)\n\n\n#define LED_2          NRF_GPIO_PIN_MAP(0,23)\n\n\n#define LED_3          NRF_GPIO_PIN_MAP(0,24)\n\n\n#define LED_START      LED_1\n\n\n#define LED_STOP       LED_3\n\n\n\n#define LEDS_ACTIVE_STATE 0\n\n\n\n#define LEDS_LIST { LED_1, LED_2, LED_3 }\n\n\n\n#define LEDS_INV_MASK  LEDS_MASK\n\n\n\n#define BSP_LED_0      22\n\n\n#define BSP_LED_1      23\n\n\n#define BSP_LED_2      24\n\n\n#define BSP_LED_3      25   \n// not on the board\n\n\n\n#define BUTTONS_NUMBER 1\n\n\n\n#define BUTTON_1       NRF_GPIO_PIN_MAP(1,0)\n\n\n#define BUTTON_PULL    NRF_GPIO_PIN_PULLUP\n\n\n\n#define BUTTONS_ACTIVE_STATE 0\n\n\n\n#define BUTTONS_LIST { BUTTON_1 }\n\n\n\n#define BSP_BUTTON_0   BUTTON_1\n\n\n\n\n#define RX_PIN_NUMBER  19\n\n\n#define TX_PIN_NUMBER  20\n\n\n#define CTS_PIN_NUMBER 7  \n// not used\n\n\n#define RTS_PIN_NUMBER 5  \n// not used\n\n\n#define HWFC           false\n\n\n\n#define BSP_QSPI_SCK_PIN   NRF_GPIO_PIN_MAP(1,3)\n\n\n#define BSP_QSPI_CSN_PIN   NRF_GPIO_PIN_MAP(1,6)\n\n\n#define BSP_QSPI_IO0_PIN   NRF_GPIO_PIN_MAP(1,5)\n\n\n#define BSP_QSPI_IO1_PIN   NRF_GPIO_PIN_MAP(1,4)\n\n\n#define BSP_QSPI_IO2_PIN   NRF_GPIO_PIN_MAP(1,2)\n\n\n#define BSP_QSPI_IO3_PIN   NRF_GPIO_PIN_MAP(1,1)\n\n\n\n\n#ifdef __cplusplus\n\n\n}\n\n\n#endif\n\n\n\n#endif \n// CUSTOM_BOARD_H\n\n\n\n\n\nThen create a CMake file with the name \nnrf52840_mdk.cmake\n. This file must be located in \nnrf5_SDK_for_Mesh_v2.0.1_src/CMake/board/\n.\n\n\n# nrf52840_mdk.cmake\n\nset\n(\nnrf52840_mdk_DEFINES\n    -DBOARD_CUSTOM\n    -DCONFIG_GPIO_AS_PINRESET\n)\n\n\nset\n(\nnrf52840_mdk_INCLUDE_DIRS\n    \n${\nSDK_ROOT\n}\n/components/boards\n)\n\n\n\n\n\nSpecify the nRF52840-MDK board for the \nnrf52840_xxAA\n platform by adapting the \nnrf5_SDK_for_Mesh_v2.0.1_src/CMake/Board.cmake\n file to:\n\n\n...\n\nelseif \n(\nPLATFORM STREQUAL \nnrf52840_xxAA\n)\n\n    set\n(\nBOARD \npca10056\n CACHE STRING \nBoard to build examples for.\n)\n\n    set_property\n(\nCACHE BOARD PROPERTY STRINGS \npca10056\n \nnrf52840_mdk\n)\n\n\n\n\n\nBuilding with CMake\n\n\nNow you can try to build the mesh stack. Good practice is to create a build folder in the root directory for the mesh stack repository, where all artifacts generated by the Ninja build system are stored, such as:\n\n\nnrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $ \ncd\n build\n\n\n\n\nBefore you can build with Ninja, you must generate the correct build files with CMake.\n\n\nYou can specify the required \nTOOLCHAIN\n, \nPLATFORM\n and \nBOARD\n name to CMAKE. The build system will ensure a valid \nSOFTDEVICE\n for the given platform.\n\n\nbuild $ cmake -G Ninja -DTOOLCHAIN\n=\ngccarmemb -DPLATFORM\n=\nnrf52840_xxAA -DBOARD\n=\nnrf52840_mdk ..\n\n\n\n\nAfter the Ninja build files are generated, running \nninja\n will build all the targets (examples and libraries)\n\n\nbuild $ ninja\n\n\n\n\n\n\nRunning the example\n\n\nTo run examples onto your nRF52840-MDK, first connect it to your computer with a USB cable. When your board is detected, you can program examples as described below.\n\n\nProgramming the SoftDevice\n\n\n\n\nNote\n\n\nAll examples built by the CMake-generated build system do not include the SoftDevice as part of the generated HEX files. Therefore, the SoftDevice must already be present on the device before flashing the HEX file for the example mesh application.\n\n\n\n\nDownload the SoftDevice which you chose to build mesh stack with. If you do not know the SoftDevice version that was used to build the mesh stack, check the name of the example binary.\n\n\nFor example, if the example's binary name is \nlight_switch_client_nrf52840_xxAA_s140_6.0.0.hex\n, the required SoftDevice binary is \ns140_nrf52_6.0.0_softdevice.hex\n. To program this example run:\n\n\n$ pyocd-flashtool -d debug -t nrf52 -se s140_nrf52_6.0.0_softdevice.hex\n\n\n\n\nProgramming the application\n\n\nTo program the example binary mentioned above, run:\n\n\n$ pyocd-flashtool -d debug -t nrf52 -se ./build/examples/light_switch/client/light_switch_client_nrf52840_xxAA_s140_6.0.0.hex\n\n\n\n\nCreating a new build\n\n\nThe easiest way to make a new build target is to:\n\n\n\n\n\n\nCopy one of the example folders, e.g., \nexamples/beaconing\n to \nexamples/my_app\n.\n\n\n\n\n\n\nAdd the folder to the \nexamples/CMakeLists.txt\n with a \nadd_subdirectory(\nmy_app\n)\n command.\n\n\n\n\n\n\nModify the target name in the first line of \nexamples/my_app/CMakeLists.txt\n to \nset(target \nmy_app\n)\n.\n\n\n\n\n\n\nGenerating build files with\n    \nnrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $ \ncd\n build\nbuild $ cmake -G Ninja -DTOOLCHAIN\n=\ngccarmemb -DPLATFORM\n=\nnrf52840_xxAA -DBOARD\n=\nnrf52840_mdk ..\n\n\n\n\n\n\n\nBuild your new target with\n    \nbuild $ ninja my_app\n\n\n\n\n\n\n\nMore examples\n\n\nOver time, more example applications will be added to the repository. You can star or watch the \nnrf52840-mdk\n repository to stay up to date.\n\n\nReference\n\n\n\n\n\n\nNordic nRF5 SDK for Mesh\n\n\n\n\n\n\nNordic Semiconductor Infocenter\n\n\n\n\n\n\nmakerdiary/nrf52840-mdk\n\n\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "nRF5 SDK for Mesh"
        }, 
        {
            "location": "/mesh/#nrf5-sdk-for-mesh-software-development-kit-for-bluetooth-mesh-solutions-using-nrf51-series-and-nrf52-series", 
            "text": "", 
            "title": "nRF5 SDK for Mesh Software Development Kit for Bluetooth mesh solutions using nRF51 Series and nRF52 Series"
        }, 
        {
            "location": "/mesh/#introduction", 
            "text": "The nRF5 SDK for Mesh is Nordic Semiconductor's implementation of the  Bluetooth Mesh . It allows applications to utilize the features provided by the Bluetooth Mesh when running on Nordic's nRF5 Series chips.  The addition of mesh networking capabilities to Bluetooth Low Energy enables extended range, increases the number of nodes and a many-to-many (m:m) communication topology. In a Bluetooth mesh network every received packet is broadcasted by relays, until the packet is received by the destination node (a so called managed flooding mesh.) A simple, but effective way of spreading information across the mesh network with no single point of failure. The mesh functionality is a significant update and enables new applications for Bluetooth in smart home, lighting, beaconing and asset tracking applications.   For more information, go to  nordicsemi.com .", 
            "title": "Introduction"
        }, 
        {
            "location": "/mesh/#getting-started", 
            "text": "You can find detailed information about Bluetooth Mesh in  Bluetooth SIG's introduction to Bluetooth Mesh  and the  Bluetooth Mesh Networking Specifications .  The following documentation sections provide detailed information about the required software toolchains and the process of building a mesh stack.", 
            "title": "Getting started"
        }, 
        {
            "location": "/mesh/#installing-the-toolchain", 
            "text": "To build the example applications, a toolchain based on either CMake is required. Install instructions are provided for macOS. The steps should be similar for other platforms.", 
            "title": "Installing the toolchain"
        }, 
        {
            "location": "/mesh/#cmake", 
            "text": "CMake  is a build management system used for managing an environment that is independent of the compiler and build system used. Version 3.6 or above is required by the mesh stack.  Install CMake using  brew  on macOS:  $ brew install cmake", 
            "title": "CMake"
        }, 
        {
            "location": "/mesh/#gnu-arm-embedded-toolchain", 
            "text": "The GNU Embedded Toolchain for Arm is a ready-to-use, open source suite of tools for C, C++ and Assembly programming targeting Arm Cortex-M and Cortex-R family of processors. It includes the GNU Compiler (GCC) and is available free of charge directly from Arm for embedded software development on Windows, Linux and macOS operating systems.  Download and install the  6-2017-q2-update  version. Then make sure to add the path to your toolchain to your OS PATH environment variable:  Download  # in ~/.bash_profile, add the following script  export   PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH }   Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal:  $ arm-none-eabi-gcc --version", 
            "title": "GNU Arm Embedded Toolchain"
        }, 
        {
            "location": "/mesh/#ninja", 
            "text": "Ninja  is a small build system with a focus on speed. It differs from other build systems in two major respects: it is designed to have its input files generated by a higher-level build system, and it is designed to run builds as fast as possible.  Install Ninja using  brew  on macOS:  $ brew install ninja", 
            "title": "Ninja"
        }, 
        {
            "location": "/mesh/#building-the-mesh-stack-and-examples", 
            "text": "The mesh library and example applications can be built using  CMake  mentioned above.  Before you continue, check  Installing the toolchain  for instructions on setting up the development environment for mesh.", 
            "title": "Building the mesh stack and examples"
        }, 
        {
            "location": "/mesh/#download-the-sdks", 
            "text": "The nRF5 SDK for Mesh now requires the nRF5 SDK to compile. You can download them using the following links:   nRF5 SDK  nRF5 SDK for Mesh   By default, the nRF5 SDK is expected to be adjacent to the nRF5 SDK for Mesh. The directory structure should look like this:  .\n\u251c\u2500\u2500 nrf5_SDK_for_Mesh_v2.0.1_src/\n\u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a/", 
            "title": "Download the SDKs"
        }, 
        {
            "location": "/mesh/#adding-support-for-nrf52840-mdk", 
            "text": "To add support for nRF52840-MDK, you must create a support file with the name  custom_board.h . This file must be located in a directory in the  nRF5_SDK_15.0.0_a53641a/components/boards/  path.   The easiest way to create the  custom_board.h  file is to start with an existing platform definition file (for example  pca10056.h ) and adapt it to:  #ifndef CUSTOM_BOARD_H  #define CUSTOM_BOARD_H  #ifdef __cplusplus  extern   C   {  #endif  #include   nrf_gpio.h  // LEDs definitions for nRF52840-MDK  #define LEDS_NUMBER    3  #define LED_1          NRF_GPIO_PIN_MAP(0,22)  #define LED_2          NRF_GPIO_PIN_MAP(0,23)  #define LED_3          NRF_GPIO_PIN_MAP(0,24)  #define LED_START      LED_1  #define LED_STOP       LED_3  #define LEDS_ACTIVE_STATE 0  #define LEDS_LIST { LED_1, LED_2, LED_3 }  #define LEDS_INV_MASK  LEDS_MASK  #define BSP_LED_0      22  #define BSP_LED_1      23  #define BSP_LED_2      24  #define BSP_LED_3      25    // not on the board  #define BUTTONS_NUMBER 1  #define BUTTON_1       NRF_GPIO_PIN_MAP(1,0)  #define BUTTON_PULL    NRF_GPIO_PIN_PULLUP  #define BUTTONS_ACTIVE_STATE 0  #define BUTTONS_LIST { BUTTON_1 }  #define BSP_BUTTON_0   BUTTON_1  #define RX_PIN_NUMBER  19  #define TX_PIN_NUMBER  20  #define CTS_PIN_NUMBER 7   // not used  #define RTS_PIN_NUMBER 5   // not used  #define HWFC           false  #define BSP_QSPI_SCK_PIN   NRF_GPIO_PIN_MAP(1,3)  #define BSP_QSPI_CSN_PIN   NRF_GPIO_PIN_MAP(1,6)  #define BSP_QSPI_IO0_PIN   NRF_GPIO_PIN_MAP(1,5)  #define BSP_QSPI_IO1_PIN   NRF_GPIO_PIN_MAP(1,4)  #define BSP_QSPI_IO2_PIN   NRF_GPIO_PIN_MAP(1,2)  #define BSP_QSPI_IO3_PIN   NRF_GPIO_PIN_MAP(1,1)  #ifdef __cplusplus  }  #endif  #endif  // CUSTOM_BOARD_H   Then create a CMake file with the name  nrf52840_mdk.cmake . This file must be located in  nrf5_SDK_for_Mesh_v2.0.1_src/CMake/board/ .  # nrf52840_mdk.cmake \nset ( nrf52840_mdk_DEFINES\n    -DBOARD_CUSTOM\n    -DCONFIG_GPIO_AS_PINRESET ) \n\nset ( nrf52840_mdk_INCLUDE_DIRS\n     ${ SDK_ROOT } /components/boards )   Specify the nRF52840-MDK board for the  nrf52840_xxAA  platform by adapting the  nrf5_SDK_for_Mesh_v2.0.1_src/CMake/Board.cmake  file to:  ...\n\nelseif  ( PLATFORM STREQUAL  nrf52840_xxAA ) \n    set ( BOARD  pca10056  CACHE STRING  Board to build examples for. ) \n    set_property ( CACHE BOARD PROPERTY STRINGS  pca10056   nrf52840_mdk )", 
            "title": "Adding support for nRF52840-MDK"
        }, 
        {
            "location": "/mesh/#building-with-cmake", 
            "text": "Now you can try to build the mesh stack. Good practice is to create a build folder in the root directory for the mesh stack repository, where all artifacts generated by the Ninja build system are stored, such as:  nrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $  cd  build  Before you can build with Ninja, you must generate the correct build files with CMake.  You can specify the required  TOOLCHAIN ,  PLATFORM  and  BOARD  name to CMAKE. The build system will ensure a valid  SOFTDEVICE  for the given platform.  build $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52840_xxAA -DBOARD = nrf52840_mdk ..  After the Ninja build files are generated, running  ninja  will build all the targets (examples and libraries)  build $ ninja", 
            "title": "Building with CMake"
        }, 
        {
            "location": "/mesh/#running-the-example", 
            "text": "To run examples onto your nRF52840-MDK, first connect it to your computer with a USB cable. When your board is detected, you can program examples as described below.", 
            "title": "Running the example"
        }, 
        {
            "location": "/mesh/#programming-the-softdevice", 
            "text": "Note  All examples built by the CMake-generated build system do not include the SoftDevice as part of the generated HEX files. Therefore, the SoftDevice must already be present on the device before flashing the HEX file for the example mesh application.   Download the SoftDevice which you chose to build mesh stack with. If you do not know the SoftDevice version that was used to build the mesh stack, check the name of the example binary.  For example, if the example's binary name is  light_switch_client_nrf52840_xxAA_s140_6.0.0.hex , the required SoftDevice binary is  s140_nrf52_6.0.0_softdevice.hex . To program this example run:  $ pyocd-flashtool -d debug -t nrf52 -se s140_nrf52_6.0.0_softdevice.hex", 
            "title": "Programming the SoftDevice"
        }, 
        {
            "location": "/mesh/#programming-the-application", 
            "text": "To program the example binary mentioned above, run:  $ pyocd-flashtool -d debug -t nrf52 -se ./build/examples/light_switch/client/light_switch_client_nrf52840_xxAA_s140_6.0.0.hex", 
            "title": "Programming the application"
        }, 
        {
            "location": "/mesh/#creating-a-new-build", 
            "text": "The easiest way to make a new build target is to:    Copy one of the example folders, e.g.,  examples/beaconing  to  examples/my_app .    Add the folder to the  examples/CMakeLists.txt  with a  add_subdirectory( my_app )  command.    Modify the target name in the first line of  examples/my_app/CMakeLists.txt  to  set(target  my_app ) .    Generating build files with\n     nrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $  cd  build\nbuild $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52840_xxAA -DBOARD = nrf52840_mdk ..    Build your new target with\n     build $ ninja my_app", 
            "title": "Creating a new build"
        }, 
        {
            "location": "/mesh/#more-examples", 
            "text": "Over time, more example applications will be added to the repository. You can star or watch the  nrf52840-mdk  repository to stay up to date.", 
            "title": "More examples"
        }, 
        {
            "location": "/mesh/#reference", 
            "text": "Nordic nRF5 SDK for Mesh    Nordic Semiconductor Infocenter    makerdiary/nrf52840-mdk", 
            "title": "Reference"
        }, 
        {
            "location": "/mesh/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/openthread/", 
            "text": "OpenThread \nAn open-source implementation of Thread\u00ae released by Nest\n\n\n\n\nIntroduction\n\n\nOpenThread\n is an open-source implementation of the \nThread\u00ae\n networking protocol. Nest has released OpenThread to make the networking technology used in Nest products more broadly available to developers, in order to accelerate the development of products for the connected home.\n\n\nThe \nThread specification\n defines an IPv6-based reliable, secure and low-power wireless device-to-device communication protocol for home applications. OpenThread implements all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as Border Router support.\n\n\n\n\nIn the following documentation sections, you'll program OpenThread on nRF52840-MDK, create and manage a Thread network, and pass messages between nodes.\n\n\n\n\nGetting started\n\n\nThe following documentation sections provide detailed information about the required software toolchains.\n\n\nInstall ARM GNU Toolchain\n\n\nThe GNU Embedded Toolchain for Arm is a ready-to-use, open source suite of tools for C, C++ and Assembly programming targeting Arm Cortex-M and Cortex-R family of processors. It includes the GNU Compiler (GCC) and is available free of charge directly from Arm for embedded software development on Windows, Linux and macOS operating systems.\n\n\nDownload and install the \n6-2017-q2-update\n version. Then make sure to add the path to your toolchain to your OS PATH environment variable:\n\n\nDownload\n\n\n# in ~/.bash_profile, add the following script\n\n\nexport\n \nPATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update/bin:\n${\nPATH\n}\n\n\n\n\n\nAdding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal:\n\n\n$ arm-none-eabi-gcc --version\n\n\n\n\nInstall pyOCD\n\n\npyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported.\n\n\nThe latest stable version of pyOCD may be installed via \npip\n as follows:\n\n\n$ pip install --pre -U pyocd\n\n\n\n\nFollow \nthis section\n for more information.\n\n\nInstall wpantund\n\n\nwpantund\n is a user-space network interface driver/daemon that provides a native IPv6 network interface to a low-power wireless \nNetwork Co-Processor\n (or NCP). It was written and developed by Nest Labs to make supporting Thread connectivity on Unix-like operating systems more straightforward.\n\n\nwpantund\n is designed to marshall all access to the NCP, ensuring that it always remains in a consistent and well-defined state.\n\n\nFollow the \nwpantund Installation Guide\n from \nopenthread/wpantund\n to install \nwpantund\n.\n\n\nClone OpenThread\n\n\nClone and install OpenThread:\n\n\n$ \ncd\n ~\n$ git clone --recursive https://github.com/openthread/openthread.git\n$ \ncd\n openthread\n$ ./bootstrap\n\n\n\n\nSpecify platform configuration for nRF52840-MDK by adapting the \nopenthread/examples/platforms/nrf52840/platform-config.h\n file to:\n\n\n/**\n\n\n * @def UART_HWFC\n\n\n *\n\n\n * UART Hardware Flow Control.\n\n\n *\n\n\n * @brief Possible values:\n\n\n *         \\ref NRF_UART_HWFC_ENABLED - HW Flow control enabled.\n\n\n *         \\ref NRF_UART_HWFC_DISABLED - HW Flow control disabled.\n\n\n *\n\n\n */\n\n\n#ifndef UART_HWFC\n\n\n#define UART_HWFC NRF_UART_HWFC_DISABLED\n\n\n#endif\n\n\n\n/**\n\n\n * @def UART_PIN_TX\n\n\n *\n\n\n * UART TX Pin.\n\n\n *\n\n\n */\n\n\n#ifndef UART_PIN_TX\n\n\n#define UART_PIN_TX 20\n\n\n#endif\n\n\n\n/**\n\n\n * @def UART_PIN_RX\n\n\n *\n\n\n * UART RX Pin.\n\n\n *\n\n\n */\n\n\n#ifndef UART_PIN_RX\n\n\n#define UART_PIN_RX 19\n\n\n#endif\n\n\n\n\n\nNow you're ready to build and flash OpenThread to the nRF52840-MDK.\n\n\nSet up the NCP Joiner\n\n\nBuild and flash\n\n\nBuild the OpenThread nRF52840 example with Joiner functionality. A device uses the Joiner role to be securely authenticated and commissioned onto a Thread network. Always clean the repo of previous builds first by running \nmake clean\n.\n\n\n$ \ncd\n ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840 \nJOINER\n=\n1\n\n\n\n\n\n\n\nTip\n\n\nFor more information on building and configuring OpenThread, see \nBuilding OpenThread\n.\n\n\n\n\nNavigate to the directory with the OpenThread FTD NCP binary, and convert it to hex format:\n\n\n$ \ncd\n ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-ncp-ftd ot-ncp-ftd.hex\n\n\n\n\nConnect nRF52840-MDK to your computer with a USB cable. Use \npyocd-flashtool -l\n to get the \nboardId\n:\n\n\n$ pyocd-flashtool -l\n\nWARNING:root:Unsupported board found \n1026\n\n\n0\n \n=\n Unknown Board \n[\ncortex_m\n]\n \nboardId\n \n=\n 10260000083ab20300000000000000000000000097969902\n\n\n\n\nFlash the OpenThread NCP FTD hex file onto the nRF52840-MDK, using the \nboardId\n:\n\n\n$ pyocd-flashtool -t nrf52 -b 10260000083ab20300000000000000000000000097969902 -ce ot-ncp-ftd.hex\n\n\n\n\n\n\n\n\nTip\n\n\nLabel the board \nNCP\n so that later you don't confuse the board roles.\n\n\n\n\nConfigure wpantund\n\n\nIn the NCP design, use \nwpantund\n to communicate with and manage the Thread device.\n\n\nIn a terminal window, start \nwpantund\n on the serial port with the NCP, creating the interface \nutun7\n and enabling info logs:\n\n\n$ sudo /usr/local/sbin/wpantund -o Config:NCP:SocketPath /dev/cu.usbmodem14112  \n\\\n\n        -o Config:TUN:InterfaceName utun7 \n\\\n\n        -o Daemon:SyslogMask \n -info\n\n\n\n\n\n\n\nTip\n\n\nTo configure wpantund without using command line parameters, modify the \n/etc/wpantund.conf\n file.\n\n\n\n\nOutput similar to the following is generated upon success:\n\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Starting wpantund \n0\n.08.00d \n(\nJun  \n9\n \n2018\n \n00\n:31:51\n)\n . . .\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n:  \nSOURCE_VERSION\n \n=\n \n0\n.07.01-217-g86d29d6\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n:  \nBUILD_VERSION\n \n=\n \n0\n.07.01-217-g86d29d6\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Configuration file \n/etc/wpantund.conf\n read.\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Ready. Using DBUS bus \n:1.2\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Running as root without dropping privileges!\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: State change: \nuninitialized\n -\n \noffline\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: NCP is running \nOPENTHREAD/20170716-00584-ge4f5f240-dirty; NRF52840; Jun  8 2018 23:36:19\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Driver is running \n0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51)\n\n\n1\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Network is not joinable\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Resetting interface\n(\ns\n)\n. . .\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Finished initializing NCP\n\n\n\n\nLeave this terminal window open so that logs from wpantund can be viewed.\n\n\nA user-defined interface is required to communicate with the NCP using \nwpanctl\n. Open a new terminal window and using \nwpanctl\n, connect to the interface you just set up:\n\n\n$ sudo /usr/local/bin/wpanctl -I utun7\nwpanctl:utun7\n\n\n\n\n\nVerify build\n\n\nVerify that the NCP is successfully running OpenThread:\n\n\n\n\nSet up the FTDs\n\n\nThe other two Thread nodes used in this section are Full Thread Devices (FTDs) on the standard System-on-Chip (SoC) design. They do not use \nwpantund\n, and the user manually manages them with the OpenThread CLI.\n\n\nOne device functions as the Commissioner, to securely authenticate and commission devices onto that network. The other device functions as a Joiner that the Commissioner can authenticate to the Thread network.\n\n\nBuild and flash\n\n\nBuild the OpenThread FTD example for the nRF52840-MDK, with the Commissioner and Joiner roles enabled:\n\n\n$ \ncd\n ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840 \nCOMMISSIONER\n=\n1\n \nJOINER\n=\n1\n\n\n\n\n\n\n\nNote\n\n\nIdeally, you should build OpenThread with only the desired functionality enabled. For example, the FTD Joiner would only use the \nJOINER=1\n switch. For ease of use here, build a single image with both roles so that the image can be used for both FTDs.\n\n\n\n\nNavigate to the directory with the OpenThread Full Thread Device (FTD) CLI binary, and convert it to hex format:\n\n\n$ \ncd\n ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-cli-ftd ot-cli-ftd.hex\n\n\n\n\nConnect another nRF52840-MDK to your computer with a USB cable. Use \npyocd-flashtool -l\n to get the \nboardId\n:\n\n\n$ pyocd-flashtool -l\nWARNING:root:Unsupported board found \n1026\n\nWARNING:root:Unsupported board found \n1026\n\n\n0\n \n=\n Unknown Board \n[\ncortex_m\n]\n \nboardId\n \n=\n 10260000083ac27f00000000000000000000000097969902\n\n1\n \n=\n Unknown Board \n[\ncortex_m\n]\n \nboardId\n \n=\n 10260000083ab20300000000000000000000000097969902\n\n\nFlash the OpenThread CLI FTD hex file onto the nRF52840-MDK, using the \nboardId\n:\n\n\n$ pyocd-flashtool -t nrf52 -b 10260000083ac27f00000000000000000000000097969902 -ce ot-cli-ftd.hex\n\n\n\n\n\n\nTip\n\n\nLabel the board \nCommissioner\n.\n\n\n\n\nVerify build\n\n\nVerify a successful build by accessing the OpenThread CLI using GNU Screen from a terminal window. The nRF52840-MDK boards use a baud rate of \n115200\n.\n\n\n$ screen /dev/cu.usbmodem142112 \n115200\n\n\n\n\n\nIn the new window, press \nReturn\n on the keyboard a few times to bring up the OpenThread CLI \n prompt. Check for IPv6 addresses:\n\n\n ipaddr\nfd11:2233:4455:0:99ea:1fe9:acd6:d384\nfe80:0:0:0:2003:a240:810f:1598\nDone\n\n\n\n\nSet up the FTD Joiner\n\n\nRepeat the above process to flash the third nRF52840-MDK board, using the existing \not-cli-ftd.hex\n build. Then label the board \nJoiner\n.\n\n\nOpen a new terminal window, and then access the OpenThread CLI for the FTD Joiner:\n\n\n$ screen /dev/cu.usbmodem142412 \n115200\n\n\n\n\n\nIn this new window, press \nReturn\n on the keyboard a few times to bring up the OpenThread CLI \n prompt. Check for IPv6 addresses:\n\n\n ipaddr\nfe80:0:0:0:d079:7d86:6413:4f4e\nfd11:2233:4455:0:e839:eb52:f7ec:74e3\nDone\n\n\n\n\nCreate the Thread network\n\n\nNow that you have all your terminal windows and screens configured, let's create our Thread network. On the \nFTD Commissioner\n, configure the network and bring up Thread:\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n networkname makerdiary\nDone\n\n extpanid \n1122334455667788\n\nDone\n\n panid 0x1122\nDone\n\n masterkey \n11223344556677881122334455667788\n\nDone\n\n ifconfig up\nDone\n\n thread start\nDone\n\n\n\n\nAfter a moment, check the device state. It should be the Leader. Also get the RLOC16 for future reference.\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n state\nleader\nDone\n\n rloc16\n\n3400\n\nDone\n\n\n\n\nCheck the device's IPv6 addresses:\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00        \n# Leader Anycast Locator (ALOC)\n\nfd11:2233:4455:0:0:ff:fe00:3400        \n# Routing Locator (RLOC)\n\nfd11:2233:4455:0:99ea:1fe9:acd6:d384   \n# Mesh-Local EID (ML-EID)\n\nfe80:0:0:0:2003:a240:810f:1598         \n# Link-Local Address (LLA)\n\nDone\n\n\n\n\n\n\nTip\n\n\nA single Thread node has multiple IPv6 addresses. For more information, see \nIPv6 Addressing\n.\n\n\n\n\nThe \"makerdiary\" network is now visible when scanned from other Thread devices.\n\n\nFrom \nwpanctl\n on the \nNCP Joiner\n:\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n scan\n   \n|\n Joinable \n|\n NetworkName        \n|\n PAN ID \n|\n Ch \n|\n XPanID           \n|\n HWAddr           \n|\n RSSI\n---+----------+--------------------+--------+----+------------------+------------------+------\n \n1\n \n|\n       NO \n|\n \nmakerdiary\n       \n|\n 0x1122 \n|\n \n11\n \n|\n \n1122334455667788\n \n|\n 2203A240810F1598 \n|\n  -59\n\n\n\n\nFrom the OpenThread CLI on the \nFTD Joiner\n:\n\n\n## FTD Joiner ##\n\n----------------\n\n\n scan\n\n|\n J \n|\n Network Name     \n|\n Extended PAN     \n|\n PAN  \n|\n MAC Address      \n|\n Ch \n|\n dBm \n|\n LQI \n|\n\n+---+------------------+------------------+------+------------------+----+-----+-----+\n\n \n|\n \n0\n \n|\n makerdiary       \n|\n \n1122334455667788\n \n|\n \n1122\n \n|\n 2203a240810f1598 \n|\n \n11\n \n|\n -32 \n|\n \n244\n \n|\n\nDone\n\n\n\n\nIf the \nmakerdiary\n network doesn't appear in the list, try scanning again.\n\n\nYou may note that in both scans, the network seems to be not joinable (\nJoinable\n column on the NCP Joiner, \nJ\n column on the FTD Joiner). This only means that Thread Commissioning is not active on the network. It can still be joined out-of-band, by entering the network master key in the joiner device manually.\n\n\n\n\nNote\n\n\nIn-band commissioning is when network credentials are transferred to the joiner over the radio. Out-of-band commissioning is when they are given to the joiner by other means (for example, manual entry in the OpenThread CLI).\n\n\n\n\nAdd the NCP Joiner\n\n\nLet's add the NCP Joiner to the Thread network we just created, using an out-of-band process. Scan for networks on the \nNCP Joiner\n:\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n scan\n   \n|\n Joinable \n|\n NetworkName        \n|\n PAN ID \n|\n Ch \n|\n XPanID           \n|\n HWAddr           \n|\n RSSI\n---+----------+--------------------+--------+----+------------------+------------------+------\n \n1\n \n|\n       NO \n|\n \nmakerdiary\n       \n|\n 0x1122 \n|\n \n11\n \n|\n \n1122334455667788\n \n|\n EE7A6D71FB28C60D \n|\n  -68\n\n\n\n\nTo join, set the network master key on the NCP Joiner and join network 1 (the ID in the first column of the \nscan\n output):\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n setprop Network:Key \n11223344556677881122334455667788\n\nwpanctl:utun7\n join \n1\n\nJoining \nmakerdiary\n \n1122334455667788\n as node \ntype\n \nend-device\n\nSuccessfully Joined!\n\n\n\n\nCheck the status of the NCP Joiner to verify. It might take a few seconds for all IPv6 addresses to appear in the output.\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n status\n\nutun7\n \n=\n \n[\n\n    \nNCP:State\n \n=\n \nassociated\n\n    \nDaemon:Enabled\n \n=\n \ntrue\n\n    \nNCP:Version\n \n=\n \nOPENTHREAD/20170716-00650-g631557e8-dirty; NRF52840; Jun  9 2018 15:45:03\n\n    \nDaemon:Version\n \n=\n \n0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51)\n\n    \nConfig:NCP:DriverName\n \n=\n \nspinel\n\n    \nNCP:HardwareAddress\n \n=\n \n[\n9019EC5D617D7AAB\n]\n\n    \nNCP:Channel\n \n=\n \n11\n\n    \nNetwork:NodeType\n \n=\n \nend-device\n\n    \nNetwork:Name\n \n=\n \nmakerdiary\n\n    \nNetwork:XPANID\n \n=\n 0x1122334455667788\n    \nNetwork:PANID\n \n=\n 0x1122\n    \nIPv6:LinkLocalAddress\n \n=\n \nfe80::60bd:ff84:2121:344d\n\n    \nIPv6:MeshLocalAddress\n \n=\n \nfd11:2233:4455::f:b5e:169b:b875\n\n    \nIPv6:MeshLocalPrefix\n \n=\n \nfd11:2233:4455::/64\n\n    \ncom.nestlabs.internal:Network:AllowingJoin\n \n=\n \nfalse\n\n\n]\n\n\n\n\n\nMake note of the \nIPv6:MeshLocalAddress\n, you'll use it later.\n\n\nGet the NCP Joiner's RLOC16:\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n getprop Thread:RLOC16\nThread:RLOC16 \n=\n 0x3403\n\n\n\n\n\n\nTip\n\n\nUse the \ngetprop\n command by itself to list all available properties and their current values.\n\n\n\n\nBack on the \nFTD Commissioner\n, check the router and child tables to confirm both devices are part of the same network. Use the RLOC16 to identify the NCP Joiner.\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n router table\n\n|\n ID \n|\n RLOC16 \n|\n Next Hop \n|\n Path Cost \n|\n LQ In \n|\n LQ Out \n|\n Age \n|\n Extended MAC     \n|\n\n+----+--------+----------+-----------+-------+--------+-----+------------------+\n\n|\n \n13\n \n|\n 0x3400 \n|\n       \n63\n \n|\n         \n0\n \n|\n     \n0\n \n|\n      \n0\n \n|\n   \n0\n \n|\n 2203a240810f1598 \n|\n\n\nDone\n\n child table\n\n|\n ID  \n|\n RLOC16 \n|\n Timeout    \n|\n Age        \n|\n LQ In \n|\n C_VN \n|\nR\n|\nS\n|\nD\n|\nN\n|\n Extended MAC     \n|\n\n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+\n\n|\n   \n3\n \n|\n 0x3403 \n|\n        \n240\n \n|\n         \n66\n \n|\n     \n3\n \n|\n   \n86\n \n|\n1\n|\n1\n|\n1\n|\n1\n|\n 62bdff842121344d \n|\n\n\nDone\n\n\n\n\nPing the mesh-local address of the NCP Joiner (the \nIPv6:MeshLocalAddress\n attribute from the NCP Joiner's \nstatus\n output) to verify connectivity:\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n ping fd11:2233:4455::f:b5e:169b:b875\n\n \n8\n bytes from fd11:2233:4455:0:f:b5e:169b:b875: \nicmp_seq\n=\n2\n \nhlim\n=\n64\n \ntime\n=\n35ms\n\n\n\n\nWe now have a Thread network consisting of two nodes, illustrated by this topology diagram:\n\n\n\n\nCommission the FTD Joiner\n\n\nNow let's add the third Thread device to the \"makerdiary\" network. This time we're going to use the more secure in-band commissioning process. On the \nFTD Joiner\n, scan for the network:\n\n\n## FTD Joiner ##\n----------------\n\n\n scan\n| J | Network Name     | Extended PAN     | PAN  | MAC Address      | Ch | dBm | LQI |\n+---+------------------+------------------+------+------------------+----+-----+-----+\n\n | 0 | makerdiary       | 1122334455667788 | 1122 | 2203a240810f1598 | 11 | -32 | 244 |\nDone\n\n\n\n\nA \n0\n in the J column indicates that Thread Commissioning is not active on the device.\n\n\nLet's be specific when commissioning on this next device, and only allow the FTD Joiner to join. Still on the FTD Joiner, get the \neui64\n, so the FTD Commissioner can identify it:\n\n\n## FTD Joiner ##\n\n----------------\n\n\n eui64\n31ae3e8e7b87cfd6\nDone\n\n\n\n\nOn the \nFTD Commissioner\n, start the commissioner and specify the \neui64\n of the device that can join, along with the Joiner Credential. The Joiner Credential is a device-specific passphrase.\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n commissioner start\nDone\n\n commissioner joiner add 31ae3e8e7b87cfd6 J01NME\nDone\n\n\n\n\n\n\nWarning\n\n\nIf you get an error when run the \ncommissioner joiner\n command, stop and restart the commissioner role with \ncommissioner stop\n and \ncommissioner start\n, then try the \ncommissioner joiner\n command again.\n\n\n\n\nSwitch to the \nFTD Joiner\n, and rescan:\n\n\n## FTD Joiner ##\n\n----------------\n\n\n scan\n\n|\n J \n|\n Network Name     \n|\n Extended PAN     \n|\n PAN  \n|\n MAC Address      \n|\n Ch \n|\n dBm \n|\n LQI \n|\n\n+---+------------------+------------------+------+------------------+----+-----+-----+\n\n \n|\n \n1\n \n|\n makerdiary       \n|\n \n1122334455667788\n \n|\n \n1122\n \n|\n 2203a240810f1598 \n|\n \n11\n \n|\n -32 \n|\n \n244\n \n|\n\nDone\n\n\n\n\nAs indicated by the \n1\n in the J column, Thread Commissioning is now active on the network. Start the joiner role with the Joiner Credential you just set up on the FTD Commissioner:\n\n\n## FTD Joiner ##\n\n----------------\n\n\n ifconfig up\nDone\n\n joiner start J01NME\nDone\n\n\n\n\nWithin a minute or so, you get a confirmation of a successful authentication:\n\n\n## FTD Joiner ##\n\n----------------\n\n\nJoin success\n\n\n\n\n\n\nWarning\n\n\nIf you wait too long (more than a few minutes) to start the joiner role on the FTD Joiner, the commissioner may time out and the join fail. Stop and restart the commissioner and try it again.\n\n\n\n\nBring up Thread so the FTD Joiner joins the \nmakerdiary\n network, and immediately check the state and RLOC16:\n\n\n## FTD Joiner ##\n\n----------------\n\n\n thread start\nDone\n\n state\nchild\nDone\n\n rloc16\n\n3404\n\nDone\n\n\n\n\nCheck the device's IPv6 addresses. Notice that there is no ALOC. That's because this device is not the Leader, nor does it hold an Anycast-specific role that requires an ALOC.\n\n\n## FTD Joiner ##\n\n----------------\n\n\n ipaddr\nfd11:2233:4455:0:0:ff:fe00:3404\nfe80:0:0:0:7827:55cf:47e4:5907\nfd11:2233:4455:0:e839:eb52:f7ec:74e3\nDone\n\n\n\n\nImmediately switch to the \nFTD Commissioner\n and check the router and child tables to confirm that three devices exist in the \nmakerdiary\n network:\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n router table\n\n|\n ID \n|\n RLOC16 \n|\n Next Hop \n|\n Path Cost \n|\n LQ In \n|\n LQ Out \n|\n Age \n|\n Extended MAC     \n|\n\n+----+--------+----------+-----------+-------+--------+-----+------------------+\n\n|\n \n13\n \n|\n 0x3400 \n|\n       \n63\n \n|\n         \n0\n \n|\n     \n0\n \n|\n      \n0\n \n|\n   \n0\n \n|\n 2203a240810f1598 \n|\n\n\nDone\n\n child table\n\n|\n ID  \n|\n RLOC16 \n|\n Timeout    \n|\n Age        \n|\n LQ In \n|\n C_VN \n|\nR\n|\nS\n|\nD\n|\nN\n|\n Extended MAC     \n|\n\n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+\n\n|\n   \n3\n \n|\n 0x3403 \n|\n        \n240\n \n|\n        \n231\n \n|\n     \n3\n \n|\n   \n86\n \n|\n1\n|\n1\n|\n1\n|\n1\n|\n 62bdff842121344d \n|\n\n\n|\n   \n4\n \n|\n 0x3404 \n|\n        \n240\n \n|\n         \n49\n \n|\n     \n3\n \n|\n   \n88\n \n|\n1\n|\n1\n|\n1\n|\n1\n|\n 7a2755cf47e45907 \n|\n\n\nDone\n\n\n\n\n\n\nImportant\n\n\nIt's possible that by the time you check the router and child tables, you see two Routers and one End Device (child). If so, don't worry! You did nothing wrong. Continue on to learn why this happened.\n\n\n\n\nBased on the RLOC16, the FTD Joiner has attached to the network as an End Device (child). Here is our updated topology:\n\n\n\n\nSend messages with UDP\n\n\nOne of the application services that OpenThread provides is User Datagram Protocol (UDP), a Transport Layer protocol. An application built on OpenThread could use the UDP API to pass messages between nodes in a Thread network, or to other devices in an external network (like the internet, if the Thread network features a Border Router).\n\n\nUDP sockets are exposed through the OpenThread CLI. Let's use it to pass messages between the two FTDs.\n\n\nGet the Mesh-Local EID address for the \nFTD Joiner\n. We're using this address because it's reachable from anywhere within the Thread network.\n\n\n## FTD Joiner ##\n\n----------------\n\n\n ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00        \n# Leader Anycast Locator (ALOC)\n\nfd11:2233:4455:0:0:ff:fe00:f400        \n# Routing Locator (RLOC)\n\nfe80:0:0:0:7827:55cf:47e4:5907         \n# Link-Local Address (LLA)\n\nfd11:2233:4455:0:e839:eb52:f7ec:74e3   \n# Mesh-Local EID (ML-EID)\n\nDone\n\n\n\n\nStart UDP and bind it to a socket for any IPv6 address:\n\n\n## FTD Joiner ##\n\n----------------\n\n\n udp open\nDone\n\n udp \nbind\n :: \n1212\n\n\n\n\n\nSwitch to the \nFTD Commissioner\n, start UDP, and connect to the socket you set up on the FTD Joiner, using its ML-EID:\n\n\n## FTD Commissioner ##\n----------------------\n\n\n udp open\nDone\n\n udp connect fd11:2233:4455:0:e839:eb52:f7ec:74e3 1212\nDone\n\n\n\n\nThe UDP connection should be live between the two nodes. Send a message from the FTD Commissioner:\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n udp send hello-openthread\nDone\n\n\n\n\nOn the \nFTD Joiner\n, the UDP message has been received!\n\n\n## FTD Joiner ##\n\n----------------\n\n\n \n16\n bytes from fd11:2233:4455:0:0:ff:fe00:3400 \n49153\n hello-openthread\n\n\n\n\nCongratulations!\n\n\nYou've created a physical Thread network with nRF52840-MDK!\n\n\nReference\n\n\n\n\nBuild a Thread network with nRF52840 boards and OpenThread\n - covers all the steps in this documentation\n\n\nopenthread.io\n\n\ngithub.com/openthread\n\n\nThread Primer\n \u2014 covers all the Thread concepts in this documentation\n\n\nOpenThread CLI reference\n\n\nOpenThread UDP CLI reference\n\n\nwpanctl properties reference\n\n\nOpenThread UDP API reference\n\n\nGNU Screen quick reference\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "OpenThread"
        }, 
        {
            "location": "/openthread/#openthread-an-open-source-implementation-of-thread-released-by-nest", 
            "text": "", 
            "title": "OpenThread An open-source implementation of Thread\u00ae released by Nest"
        }, 
        {
            "location": "/openthread/#introduction", 
            "text": "OpenThread  is an open-source implementation of the  Thread\u00ae  networking protocol. Nest has released OpenThread to make the networking technology used in Nest products more broadly available to developers, in order to accelerate the development of products for the connected home.  The  Thread specification  defines an IPv6-based reliable, secure and low-power wireless device-to-device communication protocol for home applications. OpenThread implements all Thread networking layers (IPv6, 6LoWPAN, IEEE 802.15.4 with MAC security, Mesh Link Establishment, Mesh Routing) and device roles, as well as Border Router support.   In the following documentation sections, you'll program OpenThread on nRF52840-MDK, create and manage a Thread network, and pass messages between nodes.", 
            "title": "Introduction"
        }, 
        {
            "location": "/openthread/#getting-started", 
            "text": "The following documentation sections provide detailed information about the required software toolchains.", 
            "title": "Getting started"
        }, 
        {
            "location": "/openthread/#install-arm-gnu-toolchain", 
            "text": "The GNU Embedded Toolchain for Arm is a ready-to-use, open source suite of tools for C, C++ and Assembly programming targeting Arm Cortex-M and Cortex-R family of processors. It includes the GNU Compiler (GCC) and is available free of charge directly from Arm for embedded software development on Windows, Linux and macOS operating systems.  Download and install the  6-2017-q2-update  version. Then make sure to add the path to your toolchain to your OS PATH environment variable:  Download  # in ~/.bash_profile, add the following script  export   PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH }   Adding the path makes it possible to run the toolchain executables from any directory using the terminal. To verify that the path is set correctly, type the following in your terminal:  $ arm-none-eabi-gcc --version", 
            "title": "Install ARM GNU Toolchain"
        }, 
        {
            "location": "/openthread/#install-pyocd", 
            "text": "pyOCD is an Open Source python 2.7 based library for programming and debugging ARM Cortex-M microcontrollers using CMSIS-DAP. Linux, OSX and Windows are supported.  The latest stable version of pyOCD may be installed via  pip  as follows:  $ pip install --pre -U pyocd  Follow  this section  for more information.", 
            "title": "Install pyOCD"
        }, 
        {
            "location": "/openthread/#install-wpantund", 
            "text": "wpantund  is a user-space network interface driver/daemon that provides a native IPv6 network interface to a low-power wireless  Network Co-Processor  (or NCP). It was written and developed by Nest Labs to make supporting Thread connectivity on Unix-like operating systems more straightforward.  wpantund  is designed to marshall all access to the NCP, ensuring that it always remains in a consistent and well-defined state.  Follow the  wpantund Installation Guide  from  openthread/wpantund  to install  wpantund .", 
            "title": "Install wpantund"
        }, 
        {
            "location": "/openthread/#clone-openthread", 
            "text": "Clone and install OpenThread:  $  cd  ~\n$ git clone --recursive https://github.com/openthread/openthread.git\n$  cd  openthread\n$ ./bootstrap  Specify platform configuration for nRF52840-MDK by adapting the  openthread/examples/platforms/nrf52840/platform-config.h  file to:  /**   * @def UART_HWFC   *   * UART Hardware Flow Control.   *   * @brief Possible values:   *         \\ref NRF_UART_HWFC_ENABLED - HW Flow control enabled.   *         \\ref NRF_UART_HWFC_DISABLED - HW Flow control disabled.   *   */  #ifndef UART_HWFC  #define UART_HWFC NRF_UART_HWFC_DISABLED  #endif  /**   * @def UART_PIN_TX   *   * UART TX Pin.   *   */  #ifndef UART_PIN_TX  #define UART_PIN_TX 20  #endif  /**   * @def UART_PIN_RX   *   * UART RX Pin.   *   */  #ifndef UART_PIN_RX  #define UART_PIN_RX 19  #endif   Now you're ready to build and flash OpenThread to the nRF52840-MDK.", 
            "title": "Clone OpenThread"
        }, 
        {
            "location": "/openthread/#set-up-the-ncp-joiner", 
            "text": "", 
            "title": "Set up the NCP Joiner"
        }, 
        {
            "location": "/openthread/#build-and-flash", 
            "text": "Build the OpenThread nRF52840 example with Joiner functionality. A device uses the Joiner role to be securely authenticated and commissioned onto a Thread network. Always clean the repo of previous builds first by running  make clean .  $  cd  ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840  JOINER = 1    Tip  For more information on building and configuring OpenThread, see  Building OpenThread .   Navigate to the directory with the OpenThread FTD NCP binary, and convert it to hex format:  $  cd  ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-ncp-ftd ot-ncp-ftd.hex  Connect nRF52840-MDK to your computer with a USB cable. Use  pyocd-flashtool -l  to get the  boardId :  $ pyocd-flashtool -l\n\nWARNING:root:Unsupported board found  1026  0   =  Unknown Board  [ cortex_m ]   boardId   =  10260000083ab20300000000000000000000000097969902  Flash the OpenThread NCP FTD hex file onto the nRF52840-MDK, using the  boardId :  $ pyocd-flashtool -t nrf52 -b 10260000083ab20300000000000000000000000097969902 -ce ot-ncp-ftd.hex    Tip  Label the board  NCP  so that later you don't confuse the board roles.", 
            "title": "Build and flash"
        }, 
        {
            "location": "/openthread/#configure-wpantund", 
            "text": "In the NCP design, use  wpantund  to communicate with and manage the Thread device.  In a terminal window, start  wpantund  on the serial port with the NCP, creating the interface  utun7  and enabling info logs:  $ sudo /usr/local/sbin/wpantund -o Config:NCP:SocketPath /dev/cu.usbmodem14112   \\ \n        -o Config:TUN:InterfaceName utun7  \\ \n        -o Daemon:SyslogMask   -info    Tip  To configure wpantund without using command line parameters, modify the  /etc/wpantund.conf  file.   Output similar to the following is generated upon success:  Jun   9   01 :29:49  wpantund [ 12257 ]   Notice : Starting wpantund  0 .08.00d  ( Jun   9   2018   00 :31:51 )  . . .\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice :   SOURCE_VERSION   =   0 .07.01-217-g86d29d6\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice :   BUILD_VERSION   =   0 .07.01-217-g86d29d6\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Configuration file  /etc/wpantund.conf  read.\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Ready. Using DBUS bus  :1.2 \nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Running as root without dropping privileges!\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : State change:  uninitialized  -   offline \nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : NCP is running  OPENTHREAD/20170716-00584-ge4f5f240-dirty; NRF52840; Jun  8 2018 23:36:19 \nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Driver is running  0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51)  1 :29:49  wpantund [ 12257 ]   Notice : Network is not joinable\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Resetting interface ( s ) . . .\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Finished initializing NCP  Leave this terminal window open so that logs from wpantund can be viewed.  A user-defined interface is required to communicate with the NCP using  wpanctl . Open a new terminal window and using  wpanctl , connect to the interface you just set up:  $ sudo /usr/local/bin/wpanctl -I utun7\nwpanctl:utun7", 
            "title": "Configure wpantund"
        }, 
        {
            "location": "/openthread/#verify-build", 
            "text": "Verify that the NCP is successfully running OpenThread:", 
            "title": "Verify build"
        }, 
        {
            "location": "/openthread/#set-up-the-ftds", 
            "text": "The other two Thread nodes used in this section are Full Thread Devices (FTDs) on the standard System-on-Chip (SoC) design. They do not use  wpantund , and the user manually manages them with the OpenThread CLI.  One device functions as the Commissioner, to securely authenticate and commission devices onto that network. The other device functions as a Joiner that the Commissioner can authenticate to the Thread network.", 
            "title": "Set up the FTDs"
        }, 
        {
            "location": "/openthread/#build-and-flash_1", 
            "text": "Build the OpenThread FTD example for the nRF52840-MDK, with the Commissioner and Joiner roles enabled:  $  cd  ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840  COMMISSIONER = 1   JOINER = 1    Note  Ideally, you should build OpenThread with only the desired functionality enabled. For example, the FTD Joiner would only use the  JOINER=1  switch. For ease of use here, build a single image with both roles so that the image can be used for both FTDs.   Navigate to the directory with the OpenThread Full Thread Device (FTD) CLI binary, and convert it to hex format:  $  cd  ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-cli-ftd ot-cli-ftd.hex  Connect another nRF52840-MDK to your computer with a USB cable. Use  pyocd-flashtool -l  to get the  boardId :  $ pyocd-flashtool -l\nWARNING:root:Unsupported board found  1026 \nWARNING:root:Unsupported board found  1026  0   =  Unknown Board  [ cortex_m ]   boardId   =  10260000083ac27f00000000000000000000000097969902 1   =  Unknown Board  [ cortex_m ]   boardId   =  10260000083ab20300000000000000000000000097969902 \nFlash the OpenThread CLI FTD hex file onto the nRF52840-MDK, using the  boardId :  $ pyocd-flashtool -t nrf52 -b 10260000083ac27f00000000000000000000000097969902 -ce ot-cli-ftd.hex   Tip  Label the board  Commissioner .", 
            "title": "Build and flash"
        }, 
        {
            "location": "/openthread/#verify-build_1", 
            "text": "Verify a successful build by accessing the OpenThread CLI using GNU Screen from a terminal window. The nRF52840-MDK boards use a baud rate of  115200 .  $ screen /dev/cu.usbmodem142112  115200   In the new window, press  Return  on the keyboard a few times to bring up the OpenThread CLI   prompt. Check for IPv6 addresses:   ipaddr\nfd11:2233:4455:0:99ea:1fe9:acd6:d384\nfe80:0:0:0:2003:a240:810f:1598\nDone", 
            "title": "Verify build"
        }, 
        {
            "location": "/openthread/#set-up-the-ftd-joiner", 
            "text": "Repeat the above process to flash the third nRF52840-MDK board, using the existing  ot-cli-ftd.hex  build. Then label the board  Joiner .  Open a new terminal window, and then access the OpenThread CLI for the FTD Joiner:  $ screen /dev/cu.usbmodem142412  115200   In this new window, press  Return  on the keyboard a few times to bring up the OpenThread CLI   prompt. Check for IPv6 addresses:   ipaddr\nfe80:0:0:0:d079:7d86:6413:4f4e\nfd11:2233:4455:0:e839:eb52:f7ec:74e3\nDone", 
            "title": "Set up the FTD Joiner"
        }, 
        {
            "location": "/openthread/#create-the-thread-network", 
            "text": "Now that you have all your terminal windows and screens configured, let's create our Thread network. On the  FTD Commissioner , configure the network and bring up Thread:  ## FTD Commissioner ## \n----------------------  networkname makerdiary\nDone  extpanid  1122334455667788 \nDone  panid 0x1122\nDone  masterkey  11223344556677881122334455667788 \nDone  ifconfig up\nDone  thread start\nDone  After a moment, check the device state. It should be the Leader. Also get the RLOC16 for future reference.  ## FTD Commissioner ## \n----------------------  state\nleader\nDone  rloc16 3400 \nDone  Check the device's IPv6 addresses:  ## FTD Commissioner ## \n----------------------  ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00         # Leader Anycast Locator (ALOC) \nfd11:2233:4455:0:0:ff:fe00:3400         # Routing Locator (RLOC) \nfd11:2233:4455:0:99ea:1fe9:acd6:d384    # Mesh-Local EID (ML-EID) \nfe80:0:0:0:2003:a240:810f:1598          # Link-Local Address (LLA) \nDone   Tip  A single Thread node has multiple IPv6 addresses. For more information, see  IPv6 Addressing .   The \"makerdiary\" network is now visible when scanned from other Thread devices.  From  wpanctl  on the  NCP Joiner :  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  scan\n    |  Joinable  |  NetworkName         |  PAN ID  |  Ch  |  XPanID            |  HWAddr            |  RSSI\n---+----------+--------------------+--------+----+------------------+------------------+------\n  1   |        NO  |   makerdiary         |  0x1122  |   11   |   1122334455667788   |  2203A240810F1598  |   -59  From the OpenThread CLI on the  FTD Joiner :  ## FTD Joiner ## \n----------------  scan |  J  |  Network Name      |  Extended PAN      |  PAN   |  MAC Address       |  Ch  |  dBm  |  LQI  | \n+---+------------------+------------------+------+------------------+----+-----+-----+   |   0   |  makerdiary        |   1122334455667788   |   1122   |  2203a240810f1598  |   11   |  -32  |   244   | \nDone  If the  makerdiary  network doesn't appear in the list, try scanning again.  You may note that in both scans, the network seems to be not joinable ( Joinable  column on the NCP Joiner,  J  column on the FTD Joiner). This only means that Thread Commissioning is not active on the network. It can still be joined out-of-band, by entering the network master key in the joiner device manually.   Note  In-band commissioning is when network credentials are transferred to the joiner over the radio. Out-of-band commissioning is when they are given to the joiner by other means (for example, manual entry in the OpenThread CLI).", 
            "title": "Create the Thread network"
        }, 
        {
            "location": "/openthread/#add-the-ncp-joiner", 
            "text": "Let's add the NCP Joiner to the Thread network we just created, using an out-of-band process. Scan for networks on the  NCP Joiner :  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  scan\n    |  Joinable  |  NetworkName         |  PAN ID  |  Ch  |  XPanID            |  HWAddr            |  RSSI\n---+----------+--------------------+--------+----+------------------+------------------+------\n  1   |        NO  |   makerdiary         |  0x1122  |   11   |   1122334455667788   |  EE7A6D71FB28C60D  |   -68  To join, set the network master key on the NCP Joiner and join network 1 (the ID in the first column of the  scan  output):  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  setprop Network:Key  11223344556677881122334455667788 \nwpanctl:utun7  join  1 \nJoining  makerdiary   1122334455667788  as node  type   end-device \nSuccessfully Joined!  Check the status of the NCP Joiner to verify. It might take a few seconds for all IPv6 addresses to appear in the output.  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  status utun7   =   [ \n     NCP:State   =   associated \n     Daemon:Enabled   =   true \n     NCP:Version   =   OPENTHREAD/20170716-00650-g631557e8-dirty; NRF52840; Jun  9 2018 15:45:03 \n     Daemon:Version   =   0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51) \n     Config:NCP:DriverName   =   spinel \n     NCP:HardwareAddress   =   [ 9019EC5D617D7AAB ] \n     NCP:Channel   =   11 \n     Network:NodeType   =   end-device \n     Network:Name   =   makerdiary \n     Network:XPANID   =  0x1122334455667788\n     Network:PANID   =  0x1122\n     IPv6:LinkLocalAddress   =   fe80::60bd:ff84:2121:344d \n     IPv6:MeshLocalAddress   =   fd11:2233:4455::f:b5e:169b:b875 \n     IPv6:MeshLocalPrefix   =   fd11:2233:4455::/64 \n     com.nestlabs.internal:Network:AllowingJoin   =   false  ]   Make note of the  IPv6:MeshLocalAddress , you'll use it later.  Get the NCP Joiner's RLOC16:  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  getprop Thread:RLOC16\nThread:RLOC16  =  0x3403   Tip  Use the  getprop  command by itself to list all available properties and their current values.   Back on the  FTD Commissioner , check the router and child tables to confirm both devices are part of the same network. Use the RLOC16 to identify the NCP Joiner.  ## FTD Commissioner ## \n----------------------  router table |  ID  |  RLOC16  |  Next Hop  |  Path Cost  |  LQ In  |  LQ Out  |  Age  |  Extended MAC      | \n+----+--------+----------+-----------+-------+--------+-----+------------------+ |   13   |  0x3400  |         63   |           0   |       0   |        0   |     0   |  2203a240810f1598  | \n\nDone  child table |  ID   |  RLOC16  |  Timeout     |  Age         |  LQ In  |  C_VN  | R | S | D | N |  Extended MAC      | \n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+ |     3   |  0x3403  |          240   |           66   |       3   |     86   | 1 | 1 | 1 | 1 |  62bdff842121344d  | \n\nDone  Ping the mesh-local address of the NCP Joiner (the  IPv6:MeshLocalAddress  attribute from the NCP Joiner's  status  output) to verify connectivity:  ## FTD Commissioner ## \n----------------------  ping fd11:2233:4455::f:b5e:169b:b875   8  bytes from fd11:2233:4455:0:f:b5e:169b:b875:  icmp_seq = 2   hlim = 64   time = 35ms  We now have a Thread network consisting of two nodes, illustrated by this topology diagram:", 
            "title": "Add the NCP Joiner"
        }, 
        {
            "location": "/openthread/#commission-the-ftd-joiner", 
            "text": "Now let's add the third Thread device to the \"makerdiary\" network. This time we're going to use the more secure in-band commissioning process. On the  FTD Joiner , scan for the network:  ## FTD Joiner ##\n----------------  scan\n| J | Network Name     | Extended PAN     | PAN  | MAC Address      | Ch | dBm | LQI |\n+---+------------------+------------------+------+------------------+----+-----+-----+  | 0 | makerdiary       | 1122334455667788 | 1122 | 2203a240810f1598 | 11 | -32 | 244 |\nDone  A  0  in the J column indicates that Thread Commissioning is not active on the device.  Let's be specific when commissioning on this next device, and only allow the FTD Joiner to join. Still on the FTD Joiner, get the  eui64 , so the FTD Commissioner can identify it:  ## FTD Joiner ## \n----------------  eui64\n31ae3e8e7b87cfd6\nDone  On the  FTD Commissioner , start the commissioner and specify the  eui64  of the device that can join, along with the Joiner Credential. The Joiner Credential is a device-specific passphrase.  ## FTD Commissioner ## \n----------------------  commissioner start\nDone  commissioner joiner add 31ae3e8e7b87cfd6 J01NME\nDone   Warning  If you get an error when run the  commissioner joiner  command, stop and restart the commissioner role with  commissioner stop  and  commissioner start , then try the  commissioner joiner  command again.   Switch to the  FTD Joiner , and rescan:  ## FTD Joiner ## \n----------------  scan |  J  |  Network Name      |  Extended PAN      |  PAN   |  MAC Address       |  Ch  |  dBm  |  LQI  | \n+---+------------------+------------------+------+------------------+----+-----+-----+   |   1   |  makerdiary        |   1122334455667788   |   1122   |  2203a240810f1598  |   11   |  -32  |   244   | \nDone  As indicated by the  1  in the J column, Thread Commissioning is now active on the network. Start the joiner role with the Joiner Credential you just set up on the FTD Commissioner:  ## FTD Joiner ## \n----------------  ifconfig up\nDone  joiner start J01NME\nDone  Within a minute or so, you get a confirmation of a successful authentication:  ## FTD Joiner ## \n---------------- Join success   Warning  If you wait too long (more than a few minutes) to start the joiner role on the FTD Joiner, the commissioner may time out and the join fail. Stop and restart the commissioner and try it again.   Bring up Thread so the FTD Joiner joins the  makerdiary  network, and immediately check the state and RLOC16:  ## FTD Joiner ## \n----------------  thread start\nDone  state\nchild\nDone  rloc16 3404 \nDone  Check the device's IPv6 addresses. Notice that there is no ALOC. That's because this device is not the Leader, nor does it hold an Anycast-specific role that requires an ALOC.  ## FTD Joiner ## \n----------------  ipaddr\nfd11:2233:4455:0:0:ff:fe00:3404\nfe80:0:0:0:7827:55cf:47e4:5907\nfd11:2233:4455:0:e839:eb52:f7ec:74e3\nDone  Immediately switch to the  FTD Commissioner  and check the router and child tables to confirm that three devices exist in the  makerdiary  network:  ## FTD Commissioner ## \n----------------------  router table |  ID  |  RLOC16  |  Next Hop  |  Path Cost  |  LQ In  |  LQ Out  |  Age  |  Extended MAC      | \n+----+--------+----------+-----------+-------+--------+-----+------------------+ |   13   |  0x3400  |         63   |           0   |       0   |        0   |     0   |  2203a240810f1598  | \n\nDone  child table |  ID   |  RLOC16  |  Timeout     |  Age         |  LQ In  |  C_VN  | R | S | D | N |  Extended MAC      | \n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+ |     3   |  0x3403  |          240   |          231   |       3   |     86   | 1 | 1 | 1 | 1 |  62bdff842121344d  |  |     4   |  0x3404  |          240   |           49   |       3   |     88   | 1 | 1 | 1 | 1 |  7a2755cf47e45907  | \n\nDone   Important  It's possible that by the time you check the router and child tables, you see two Routers and one End Device (child). If so, don't worry! You did nothing wrong. Continue on to learn why this happened.   Based on the RLOC16, the FTD Joiner has attached to the network as an End Device (child). Here is our updated topology:", 
            "title": "Commission the FTD Joiner"
        }, 
        {
            "location": "/openthread/#send-messages-with-udp", 
            "text": "One of the application services that OpenThread provides is User Datagram Protocol (UDP), a Transport Layer protocol. An application built on OpenThread could use the UDP API to pass messages between nodes in a Thread network, or to other devices in an external network (like the internet, if the Thread network features a Border Router).  UDP sockets are exposed through the OpenThread CLI. Let's use it to pass messages between the two FTDs.  Get the Mesh-Local EID address for the  FTD Joiner . We're using this address because it's reachable from anywhere within the Thread network.  ## FTD Joiner ## \n----------------  ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00         # Leader Anycast Locator (ALOC) \nfd11:2233:4455:0:0:ff:fe00:f400         # Routing Locator (RLOC) \nfe80:0:0:0:7827:55cf:47e4:5907          # Link-Local Address (LLA) \nfd11:2233:4455:0:e839:eb52:f7ec:74e3    # Mesh-Local EID (ML-EID) \nDone  Start UDP and bind it to a socket for any IPv6 address:  ## FTD Joiner ## \n----------------  udp open\nDone  udp  bind  ::  1212   Switch to the  FTD Commissioner , start UDP, and connect to the socket you set up on the FTD Joiner, using its ML-EID:  ## FTD Commissioner ##\n----------------------  udp open\nDone  udp connect fd11:2233:4455:0:e839:eb52:f7ec:74e3 1212\nDone  The UDP connection should be live between the two nodes. Send a message from the FTD Commissioner:  ## FTD Commissioner ## \n----------------------  udp send hello-openthread\nDone  On the  FTD Joiner , the UDP message has been received!  ## FTD Joiner ## \n----------------   16  bytes from fd11:2233:4455:0:0:ff:fe00:3400  49153  hello-openthread", 
            "title": "Send messages with UDP"
        }, 
        {
            "location": "/openthread/#congratulations", 
            "text": "You've created a physical Thread network with nRF52840-MDK!", 
            "title": "Congratulations!"
        }, 
        {
            "location": "/openthread/#reference", 
            "text": "Build a Thread network with nRF52840 boards and OpenThread  - covers all the steps in this documentation  openthread.io  github.com/openthread  Thread Primer  \u2014 covers all the Thread concepts in this documentation  OpenThread CLI reference  OpenThread UDP CLI reference  wpanctl properties reference  OpenThread UDP API reference  GNU Screen quick reference", 
            "title": "Reference"
        }, 
        {
            "location": "/openthread/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/mbedos/", 
            "text": "Arm Mbed OS \nAn open-source platform operating system designed for the internet of things\n\n\n\n\nIntroduction\n\n\nArm Mbed OS\n is an open source embedded operating system designed specifically for the \"things\" in the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.\n\n\nMbed OS provides a platform that includes:\n\n\n\n\nSecurity foundations.\n\n\nCloud management services.\n\n\nDrivers for sensors, I/O devices and connectivity.\n\n\n\n\nArm Mbed OS lets you write applications that run on embedded devices, by providing the layer that interprets your application's code in a way the hardware can understand.\n\n\nYour application code is written in C and C++. It uses the application programming interfaces (APIs) that Mbed OS provides. These APIs allow your code to work on different microcontrollers in a uniform way. This reduces the challenges of getting started with Arm-based microcontrollers and integrating large software projects.\n\n\n\n\nInfo\n\n\nMbed OS is now a Thread Certified Component. Using IPv6 with 6LoWPAN as the foundation, Thread technology provides a low-power, self-healing mesh network designed for the home.\n\n\n\n\nFor more information, please visit the \nMbed OS developer site\n.\n\n\nUsing Arm Mbed CLI\n\n\nIn the Arm Mbed ecosystem, you have a choice in how you want to develop, Online and Offline. For offline development, Arm Mbed CLI is provided. Mbed CLI is compatible with Windows, Linux and macOS. This option provides more configuration options but also requires slightly more setup.\n\n\nInstall Mbed CLI\n\n\nThe setup process for Arm Mbed CLI depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to install Mbed CLI locally.\n\n\nOn Windows the easiest way to install Mbed CLI to run the \nMbed CLI Windows .exe installer\n.\n\n\n\n\nNote\n\n\nThe Windows installer only installs the GNU Arm embedded toolchain. If you want to compile using Arm Compiler 5 or IAR, visit the \nsupported compilers page\n.\n\n\n\n\nOn Linux and macOS, you can use Python and Pip:\n\n\n$ pip install mbed-cli\n\n\n# if you have installed mbed-cli, you can update it with:\n\n$ pip install mbed-cli --upgrade\n\n\n\n\nYou can ensure Mbed CLI installed correctly by running \nmbed help\n from your command-line.\n\n\nSetup environment\n\n\nFor any installed toolchain, be sure to add the Mbed CLI global configuration:\n\n\n$ mbed config -G GCC_ARM_PATH \npath to GNU Arm bin\n\n\n[\nmbed\n]\n \npath to GNU Arm bin\n now \nset\n as global GCC_ARM_PATH\n\n$ mbed config --list\n\n[\nmbed\n]\n Global config:\n\nGCC_ARM_PATH\n=\npath to GNU Arm bin\n\n\n\n\n\n\n\nNote\n\n\nYou can also apply the same configuration to the IAR and ARM toolchains using \nIAR_PATH\n or \nARM_PATH\n.\n\n\n\n\nCompile and program the board\n\n\nNow you can try to compile one of the examples. Will use the \nmbed-os-example-blinky\n example here to keep it simple.\n\n\nOpen terminal and change directory to:\n\n\n$ \ncd\n ./nrf52840-mdk/examples/mbedos5/mbed-os-example-blinky/\n\n\n\n\nAdd mbed-os library to the example directory:\n\n\nmbed-os-example-blinky$ mbed config root .\nmbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git\n\n\n\n\nInvoke \nmbed compile\n, and specify the name of your platform and your installed toolchain (GCC_ARM, ARM, IAR). For example, for the NRF52840_MDK platform and GNU Arm embedded toolchain:\n\n\nmbed-os-example-blinky$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM\n\n\n\n\n\n\nYou can add locally manufacturers id and platform name for nRF52840-MDK and see which boards are connected with \nmbed detect\n:\n\n\n$ mbedls --mock\n=\n1026\n:nRF52840-MDK\n\n\n\n\nAdding the \n--flash\n argument will automatically flash the compiled program onto your board if it is connected to your computer.\n\n\nmbed-os-example-blinky$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash\n\n\nObserve that the Green LED is blinking:\n\n\n\n\n\n\nTip\n\n\nYou can also follow the '\nHow to program your nRF52840-MDK\n' section to flash the compiled program.\n\n\n\n\nBluetooth Low Energy examples\n\n\nThe \nnrf52840-mdk\n repository contains a collection of Bluetooth Low Energy example applications based on mbed OS and built with Arm Mbed CLI.\n\n\n./nrf52840-mdk/examples/mbedos5/mbed-os-example-ble\n\u251c\u2500\u2500 BLE_BatteryLevel\n\u251c\u2500\u2500 BLE_Beacon\n\u251c\u2500\u2500 BLE_Button\n\u251c\u2500\u2500 BLE_EddystoneObserver\n\u251c\u2500\u2500 BLE_EddystoneService\n\u251c\u2500\u2500 BLE_GAPButton\n\u251c\u2500\u2500 BLE_HeartRate\n\u251c\u2500\u2500 BLE_LED\n\u251c\u2500\u2500 BLE_LEDBlinker\n\u251c\u2500\u2500 BLE_Thermometer\n\u2514\u2500\u2500 README.md\n\n\n\n\nUsing a command-line tool, navigate to any of the example directories, like \nBLE_BatteryLevel\n:\n\n\n$ \ncd\n BLE_BatteryLevel\n\n\n\n\nAdd mbed-os library to the example directory:\n\n\nBLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git\n\n\n\n\nCompile and run the example application on your board:\n\n\nBLE_BatteryLevel$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash\n\n\n\n\nOpen the \nnRF Connect\n app on your phone. Find your device which should be named \nBATTERY\n.\n\n\nThen establish a connection with your device. Discover the services and the characteristics on the device. The \nBattery service\n has the UUID \n0x180F\n and includes the \nBattery level characteristic\n which has the UUID \n0x2A19\n.\n\n\n\n\nNow you can try other BLE examples on your board. Have fun!\n\n\nMore examples\n\n\nOver time, more example applications will be added to the repository. You can star or watch the \nnrf52840-mdk\n repository to stay up to date.\n\n\nReference\n\n\n\n\nArm Mbed OS developer site\n\n\nMbed OS Documentation\n\n\nARMmbed/mbed-os repository\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "Arm Mbed OS"
        }, 
        {
            "location": "/mbedos/#arm-mbed-os-an-open-source-platform-operating-system-designed-for-the-internet-of-things", 
            "text": "", 
            "title": "Arm Mbed OS An open-source platform operating system designed for the internet of things"
        }, 
        {
            "location": "/mbedos/#introduction", 
            "text": "Arm Mbed OS  is an open source embedded operating system designed specifically for the \"things\" in the Internet of Things. It includes all the features you need to develop a connected product based on an Arm Cortex-M microcontroller, including security, connectivity, an RTOS and drivers for sensors and I/O devices.  Mbed OS provides a platform that includes:   Security foundations.  Cloud management services.  Drivers for sensors, I/O devices and connectivity.   Arm Mbed OS lets you write applications that run on embedded devices, by providing the layer that interprets your application's code in a way the hardware can understand.  Your application code is written in C and C++. It uses the application programming interfaces (APIs) that Mbed OS provides. These APIs allow your code to work on different microcontrollers in a uniform way. This reduces the challenges of getting started with Arm-based microcontrollers and integrating large software projects.   Info  Mbed OS is now a Thread Certified Component. Using IPv6 with 6LoWPAN as the foundation, Thread technology provides a low-power, self-healing mesh network designed for the home.   For more information, please visit the  Mbed OS developer site .", 
            "title": "Introduction"
        }, 
        {
            "location": "/mbedos/#using-arm-mbed-cli", 
            "text": "In the Arm Mbed ecosystem, you have a choice in how you want to develop, Online and Offline. For offline development, Arm Mbed CLI is provided. Mbed CLI is compatible with Windows, Linux and macOS. This option provides more configuration options but also requires slightly more setup.", 
            "title": "Using Arm Mbed CLI"
        }, 
        {
            "location": "/mbedos/#install-mbed-cli", 
            "text": "The setup process for Arm Mbed CLI depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to install Mbed CLI locally.  On Windows the easiest way to install Mbed CLI to run the  Mbed CLI Windows .exe installer .   Note  The Windows installer only installs the GNU Arm embedded toolchain. If you want to compile using Arm Compiler 5 or IAR, visit the  supported compilers page .   On Linux and macOS, you can use Python and Pip:  $ pip install mbed-cli # if you have installed mbed-cli, you can update it with: \n$ pip install mbed-cli --upgrade  You can ensure Mbed CLI installed correctly by running  mbed help  from your command-line.", 
            "title": "Install Mbed CLI"
        }, 
        {
            "location": "/mbedos/#setup-environment", 
            "text": "For any installed toolchain, be sure to add the Mbed CLI global configuration:  $ mbed config -G GCC_ARM_PATH  path to GNU Arm bin  [ mbed ]   path to GNU Arm bin  now  set  as global GCC_ARM_PATH\n\n$ mbed config --list [ mbed ]  Global config: GCC_ARM_PATH = path to GNU Arm bin    Note  You can also apply the same configuration to the IAR and ARM toolchains using  IAR_PATH  or  ARM_PATH .", 
            "title": "Setup environment"
        }, 
        {
            "location": "/mbedos/#compile-and-program-the-board", 
            "text": "Now you can try to compile one of the examples. Will use the  mbed-os-example-blinky  example here to keep it simple.  Open terminal and change directory to:  $  cd  ./nrf52840-mdk/examples/mbedos5/mbed-os-example-blinky/  Add mbed-os library to the example directory:  mbed-os-example-blinky$ mbed config root .\nmbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git  Invoke  mbed compile , and specify the name of your platform and your installed toolchain (GCC_ARM, ARM, IAR). For example, for the NRF52840_MDK platform and GNU Arm embedded toolchain:  mbed-os-example-blinky$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM   You can add locally manufacturers id and platform name for nRF52840-MDK and see which boards are connected with  mbed detect :  $ mbedls --mock = 1026 :nRF52840-MDK  Adding the  --flash  argument will automatically flash the compiled program onto your board if it is connected to your computer.  mbed-os-example-blinky$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash \nObserve that the Green LED is blinking:    Tip  You can also follow the ' How to program your nRF52840-MDK ' section to flash the compiled program.", 
            "title": "Compile and program the board"
        }, 
        {
            "location": "/mbedos/#bluetooth-low-energy-examples", 
            "text": "The  nrf52840-mdk  repository contains a collection of Bluetooth Low Energy example applications based on mbed OS and built with Arm Mbed CLI.  ./nrf52840-mdk/examples/mbedos5/mbed-os-example-ble\n\u251c\u2500\u2500 BLE_BatteryLevel\n\u251c\u2500\u2500 BLE_Beacon\n\u251c\u2500\u2500 BLE_Button\n\u251c\u2500\u2500 BLE_EddystoneObserver\n\u251c\u2500\u2500 BLE_EddystoneService\n\u251c\u2500\u2500 BLE_GAPButton\n\u251c\u2500\u2500 BLE_HeartRate\n\u251c\u2500\u2500 BLE_LED\n\u251c\u2500\u2500 BLE_LEDBlinker\n\u251c\u2500\u2500 BLE_Thermometer\n\u2514\u2500\u2500 README.md  Using a command-line tool, navigate to any of the example directories, like  BLE_BatteryLevel :  $  cd  BLE_BatteryLevel  Add mbed-os library to the example directory:  BLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git  Compile and run the example application on your board:  BLE_BatteryLevel$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash  Open the  nRF Connect  app on your phone. Find your device which should be named  BATTERY .  Then establish a connection with your device. Discover the services and the characteristics on the device. The  Battery service  has the UUID  0x180F  and includes the  Battery level characteristic  which has the UUID  0x2A19 .   Now you can try other BLE examples on your board. Have fun!", 
            "title": "Bluetooth Low Energy examples"
        }, 
        {
            "location": "/mbedos/#more-examples", 
            "text": "Over time, more example applications will be added to the repository. You can star or watch the  nrf52840-mdk  repository to stay up to date.", 
            "title": "More examples"
        }, 
        {
            "location": "/mbedos/#reference", 
            "text": "Arm Mbed OS developer site  Mbed OS Documentation  ARMmbed/mbed-os repository", 
            "title": "Reference"
        }, 
        {
            "location": "/mbedos/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/zephyr/", 
            "text": "Zephyr \nA Small, Scalable Open Source RTOS for Internet of Things Embedded Devices\n\n\n\n\nIntroduction\n\n\nThe Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.\n\n\nThe Zephyr kernel supports multiple architectures, including ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, and RISC-V. \n\n\nDistinguishing Features\n\n\nThe Zephyr kernel offers a number of features that distinguish it from other small-footprint OSes:\n\n\n\n\nSingle address-space\n\n\nHighly configurable / Modular for flexibility\n\n\nCross Architecture\n\n\nCompile-time resource definition\n\n\nMinimal and Configurable error checking\n\n\nMemory Protection\n\n\nNative Networking Stack supporting multiple protocols\n\n\nNative Linux, macOS, and Windows Development\n\n\nExtensive suite of services\n\n\n\n\nFor more details, please visit \nZephyr Project\n site.\n\n\nGetting Started\n\n\nChecking out the repository\n\n\nClone the \nZephyr Project\n repository on GitHub or download it as a zip package and put its contents to your working directory.\n\n\n$ git clone https://github.com/zephyrproject-rtos/zephyr.git\n\n\n\n\nSetting up the development environment\n\n\nThe Zephyr project uses \nCMake\n as a tool for managing the building of the project. CMake is able to generate build files in different formats (also known as \u201cgenerators\u201d), and the following ones are currently supported by Zephyr:\n\n\n\n\nmake\n: Supported on UNIX-like platforms (Linux, macOS).\n\n\nninja\n: Supported on all platforms.\n\n\n\n\nThe setup process for the development environment depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to set up the development environment.\n\n\nWindows\n\n\nThe easiest way to install the dependencies natively on Microsoft Windows is to use the Chocolatey package manager (\nChocolatey website\n). \n\n\n\n\n\n\nInstall Chocolatey by following the instructions on the \nChocolatey install\n website.\n\n\n\n\n\n\nOpen a Command Prompt (cmd.exe) as an \nAdministrator\n.\n\n\n\n\n\n\nOptionally disable global confirmation to avoid having to add -y to all commands:\n\n\n$ choco feature \nenable\n -n allowGlobalConfirmation\n\n\n\n\n\n\n\n\nInstall CMake:\n\n\n$ choco install cmake --installargs \nADD_CMAKE_TO_PATH=System\n\n\n\n\n\n\n\n\n\nInstall the rest of the tools:\n\n\n$ choco install git python ninja dtc-msys2 gperf\n\n\n\n\n\n\n\n\nClose the Command Prompt window.\n\n\n\n\n\n\nOpen a Command Prompt (cmd.exe) as a regular user.\n\n\n\n\n\n\nInstall the required Python modules:\n\n\n$ \ncd\n ./zephyr\n$ pip install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt\n\n\n\n\n\n\n\n\nDownload and install the \nGNU Arm Embedded Toolchain\n (install to \nc:\\gccarmemb\n).\n\n\n\n\n\n\nWithin the Command Prompt, set up environment variables for the installed tools and for the Zephyr environment:\n\n\n$ \nset\n \nZEPHYR_TOOLCHAIN_VARIANT\n=\ngccarmemb\n$ \nset\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\nc:\n\\g\nccarmemb\n\n\n\n\n\n\n\n\nmacOS\n\n\nFirst, install the \nHomebrew\n (The missing package manager for macOS). Homebrew is a free and open-source software package management system that simplifies the installation of software on Apple\u2019s macOS operating system.\n\n\nTo install Homebrew, visit the \nHomebrew site\n and follow the installation instructions on the site.\n\n\nAfter Homebrew was successfully installed, install the following tools using the brew command line:\n\n\n$ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf\n$ curl -O \nhttps://bootstrap.pypa.io/get-pip.py\n\n$ ./get-pip.py\n$ rm get-pip.py\n$ \ncd\n ~/zephyr   \n# or to the folder where you cloned the zephyr repo\n\n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt\n\n\n\n\nDownload and install the \nGNU Arm Embedded Toolchain\n. Then make sure to add the path to your toolchain to your OS PATH environment variable:\n\n\n# add the following scripts to ~/.bash_profile \n\n\nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\n\n\n\nLinux\n\n\nBefore proceeding with the build, ensure your OS is up to date. On Ubuntu, you\u2019ll first need to update the local database list of available packages before upgrading:\n\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n\n\n\n\nInstall the required packages in a Ubuntu host system with:\n\n\n$ sudo apt-get install --no-install-recommends git cmake ninja-build gperf \n\\\n\n  ccache doxygen dfu-util device-tree-compiler \n\\\n\n  python3-ply python3-pip python3-setuptools xz-utils file make gcc-multilib \n\\\n\n  autoconf automake libtool\n\n\n\n\nInstall additional packages required for development with Zephyr:\n\n\n$ \ncd\n ~/zephyr  \n# or to your directory where zephyr is cloned\n\n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt\n\n\n\n\nDownload and install the \nGNU Arm Embedded Toolchain\n. Then make sure to add the path to your toolchain to your OS PATH environment variable:\n\n\n# add the following scripts to ~/.bash_profile \n\n\nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\n\n\n\nAdding support for nRF52840-MDK\n\n\nTo add support for nRF52840-MDK, you must add the board support files. This should give you the following folder structure:\n\n\n.zephyr/boards/arm/nrf52840_mdk\n\u251c\u2500\u2500 Kconfig\n\u251c\u2500\u2500 Kconfig.board\n\u251c\u2500\u2500 Kconfig.defconfig\n\u251c\u2500\u2500 board.cmake\n\u251c\u2500\u2500 board.h\n\u251c\u2500\u2500 nrf52840_mdk.dts\n\u251c\u2500\u2500 nrf52840_mdk.yaml\n\u2514\u2500\u2500 nrf52840_mdk_defconfig\n\n\n\n\nYou can checkout the patch from \nmakerdiary/zephyr\n:\n\n\n$ \ncd\n \nzephyr git clone location\n\n$ git remote add makerdiary https://github.com/makerdiary/zephyr.git\n$ git pull makerdiary master\n\n\n\n\nCompiling and running an example\n\n\nNow you can try to build one of the examples. Will use the \nhello_world\n example here to keep it simple.\n\n\nSource \nzephyr-env.sh\n wherever you have cloned the Zephyr Git repository:\n\n\n$ \nunset\n ZEPHYR_SDK_INSTALL_DIR\n$ \ncd\n \nzephyr git clone location\n\n$ \nsource\n zephyr-env.sh\n\n\n\n\nCreate a \nbuild\n folder in the example directory, where all artifacts generated by the Ninja build system are stored, such as:\n\n\n$ \ncd\n nrf52840-mdk/examples/zephyr/hello_world/\n$ mkdir build \n \ncd\n build\n\nbuild$ cmake -GNinja -DBOARD\n=\nnrf52840_mdk ..\nbuild$ ninja\nbuild$ ninja flash\n\n\n\n\n\n\nCheck the board output from serial port, you will see the following messages:\n\n\n***** Booting Zephyr OS \n1\n.12.0-rc3 *****\nHello World! arm\n\n\n\n\nThat's it! You can also try other examples in the path \nnrf52840-mdk/examples/zephyr/\n.\n\n\nMore examples\n\n\nOver time, more example applications will be added to the repository. You can star or watch the \nnrf52840-mdk\n repository to stay up to date.\n\n\nReference\n\n\n\n\nZephyr Project site\n\n\nZephyr Project Documentation\n\n\nzephyrproject-rtos/zephyr repository\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "Zephyr"
        }, 
        {
            "location": "/zephyr/#zephyr-a-small-scalable-open-source-rtos-for-internet-of-things-embedded-devices", 
            "text": "", 
            "title": "Zephyr A Small, Scalable Open Source RTOS for Internet of Things Embedded Devices"
        }, 
        {
            "location": "/zephyr/#introduction", 
            "text": "The Zephyr OS is based on a small-footprint kernel designed for use on resource-constrained systems: from simple embedded environmental sensors and LED wearables to sophisticated smart watches and IoT wireless gateways.  The Zephyr kernel supports multiple architectures, including ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, and RISC-V.", 
            "title": "Introduction"
        }, 
        {
            "location": "/zephyr/#distinguishing-features", 
            "text": "The Zephyr kernel offers a number of features that distinguish it from other small-footprint OSes:   Single address-space  Highly configurable / Modular for flexibility  Cross Architecture  Compile-time resource definition  Minimal and Configurable error checking  Memory Protection  Native Networking Stack supporting multiple protocols  Native Linux, macOS, and Windows Development  Extensive suite of services   For more details, please visit  Zephyr Project  site.", 
            "title": "Distinguishing Features"
        }, 
        {
            "location": "/zephyr/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/zephyr/#checking-out-the-repository", 
            "text": "Clone the  Zephyr Project  repository on GitHub or download it as a zip package and put its contents to your working directory.  $ git clone https://github.com/zephyrproject-rtos/zephyr.git", 
            "title": "Checking out the repository"
        }, 
        {
            "location": "/zephyr/#setting-up-the-development-environment", 
            "text": "The Zephyr project uses  CMake  as a tool for managing the building of the project. CMake is able to generate build files in different formats (also known as \u201cgenerators\u201d), and the following ones are currently supported by Zephyr:   make : Supported on UNIX-like platforms (Linux, macOS).  ninja : Supported on all platforms.   The setup process for the development environment depends on your operating system. Please choose your host operating system. The setup instructions for each operating system walk you through how to set up the development environment.", 
            "title": "Setting up the development environment"
        }, 
        {
            "location": "/zephyr/#windows", 
            "text": "The easiest way to install the dependencies natively on Microsoft Windows is to use the Chocolatey package manager ( Chocolatey website ).     Install Chocolatey by following the instructions on the  Chocolatey install  website.    Open a Command Prompt (cmd.exe) as an  Administrator .    Optionally disable global confirmation to avoid having to add -y to all commands:  $ choco feature  enable  -n allowGlobalConfirmation    Install CMake:  $ choco install cmake --installargs  ADD_CMAKE_TO_PATH=System     Install the rest of the tools:  $ choco install git python ninja dtc-msys2 gperf    Close the Command Prompt window.    Open a Command Prompt (cmd.exe) as a regular user.    Install the required Python modules:  $  cd  ./zephyr\n$ pip install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt    Download and install the  GNU Arm Embedded Toolchain  (install to  c:\\gccarmemb ).    Within the Command Prompt, set up environment variables for the installed tools and for the Zephyr environment:  $  set   ZEPHYR_TOOLCHAIN_VARIANT = gccarmemb\n$  set   GCCARMEMB_TOOLCHAIN_PATH = c: \\g ccarmemb", 
            "title": "Windows"
        }, 
        {
            "location": "/zephyr/#macos", 
            "text": "First, install the  Homebrew  (The missing package manager for macOS). Homebrew is a free and open-source software package management system that simplifies the installation of software on Apple\u2019s macOS operating system.  To install Homebrew, visit the  Homebrew site  and follow the installation instructions on the site.  After Homebrew was successfully installed, install the following tools using the brew command line:  $ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf\n$ curl -O  https://bootstrap.pypa.io/get-pip.py \n$ ./get-pip.py\n$ rm get-pip.py\n$  cd  ~/zephyr    # or to the folder where you cloned the zephyr repo \n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt  Download and install the  GNU Arm Embedded Toolchain . Then make sure to add the path to your toolchain to your OS PATH environment variable:  # add the following scripts to ~/.bash_profile   export   GCCARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update  export   ZEPHYR_GCC_VARIANT = gccarmemb", 
            "title": "macOS"
        }, 
        {
            "location": "/zephyr/#linux", 
            "text": "Before proceeding with the build, ensure your OS is up to date. On Ubuntu, you\u2019ll first need to update the local database list of available packages before upgrading:  $ sudo apt-get update\n$ sudo apt-get upgrade  Install the required packages in a Ubuntu host system with:  $ sudo apt-get install --no-install-recommends git cmake ninja-build gperf  \\ \n  ccache doxygen dfu-util device-tree-compiler  \\ \n  python3-ply python3-pip python3-setuptools xz-utils file make gcc-multilib  \\ \n  autoconf automake libtool  Install additional packages required for development with Zephyr:  $  cd  ~/zephyr   # or to your directory where zephyr is cloned \n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt  Download and install the  GNU Arm Embedded Toolchain . Then make sure to add the path to your toolchain to your OS PATH environment variable:  # add the following scripts to ~/.bash_profile   export   GCCARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update  export   ZEPHYR_GCC_VARIANT = gccarmemb", 
            "title": "Linux"
        }, 
        {
            "location": "/zephyr/#adding-support-for-nrf52840-mdk", 
            "text": "To add support for nRF52840-MDK, you must add the board support files. This should give you the following folder structure:  .zephyr/boards/arm/nrf52840_mdk\n\u251c\u2500\u2500 Kconfig\n\u251c\u2500\u2500 Kconfig.board\n\u251c\u2500\u2500 Kconfig.defconfig\n\u251c\u2500\u2500 board.cmake\n\u251c\u2500\u2500 board.h\n\u251c\u2500\u2500 nrf52840_mdk.dts\n\u251c\u2500\u2500 nrf52840_mdk.yaml\n\u2514\u2500\u2500 nrf52840_mdk_defconfig  You can checkout the patch from  makerdiary/zephyr :  $  cd   zephyr git clone location \n$ git remote add makerdiary https://github.com/makerdiary/zephyr.git\n$ git pull makerdiary master", 
            "title": "Adding support for nRF52840-MDK"
        }, 
        {
            "location": "/zephyr/#compiling-and-running-an-example", 
            "text": "Now you can try to build one of the examples. Will use the  hello_world  example here to keep it simple.  Source  zephyr-env.sh  wherever you have cloned the Zephyr Git repository:  $  unset  ZEPHYR_SDK_INSTALL_DIR\n$  cd   zephyr git clone location \n$  source  zephyr-env.sh  Create a  build  folder in the example directory, where all artifacts generated by the Ninja build system are stored, such as:  $  cd  nrf52840-mdk/examples/zephyr/hello_world/\n$ mkdir build    cd  build\n\nbuild$ cmake -GNinja -DBOARD = nrf52840_mdk ..\nbuild$ ninja\nbuild$ ninja flash   Check the board output from serial port, you will see the following messages:  ***** Booting Zephyr OS  1 .12.0-rc3 *****\nHello World! arm  That's it! You can also try other examples in the path  nrf52840-mdk/examples/zephyr/ .", 
            "title": "Compiling and running an example"
        }, 
        {
            "location": "/zephyr/#more-examples", 
            "text": "Over time, more example applications will be added to the repository. You can star or watch the  nrf52840-mdk  repository to stay up to date.", 
            "title": "More examples"
        }, 
        {
            "location": "/zephyr/#reference", 
            "text": "Zephyr Project site  Zephyr Project Documentation  zephyrproject-rtos/zephyr repository", 
            "title": "Reference"
        }, 
        {
            "location": "/zephyr/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/mynewt/", 
            "text": "Mynewt \nAn OS to build, deploy and securely manage billions of devices\n\n\n\n\nIntroduction\n\n\nApache Mynewt is an operating system that makes it easy to develop applications for microcontroller environments where power and cost are driving factors. Examples of these devices are connected locks, lights, and wearables.\n\n\nAs more and more devices get connected, these interconnected devices perform complex tasks. To perform these tasks, you need low-level operational functionality built into the operating system. Typically, connected devices built with these microcontrollers perform a myriad of functions:\n\n\n\n\n\n\nNetworking Stacks: Bluetooth Low Energy and Thread\n\n\n\n\n\n\nPeripherals: PWM to drive motors, ADCs to measure sensor data, and RTCs to keep time.\n\n\n\n\n\n\nScheduled Processing: actions must happen on a calendared or periodic basis.\n\n\n\n\n\n\nApache Mynewt accomplishes all the above easily, by providing a complete operating system for constrained devices, including:\n\n\n\n\n\n\nA fully open-source Bluetooth Low Energy stack with both Host and Controller implementations.\n\n\n\n\n\n\nA pre-emptive, multi-tasking Real Time operating system kernel\n\n\n\n\n\n\nA Hardware Abstraction Layer (HAL) that abstracts the MCU's peripheral functions, allowing developers to easily write cross-platform code.\n\n\n\n\n\n\nNewt\n\n\nIn order to provide all this functionality, and operate in an extremely low resource environment, Mynewt provides a very fine-grained source package management and build system tool, called \nnewt\n.\n\n\nYou can install newt for \nmacOS\n, \nLinux\n, or \nWindows\n.\n\n\nInstalling Newt on macOS\n\n\nNewt is supported on macOS 64 bit platforms and has been tested on macOS Sierra.\n\n\nIf this is your first time installing newt, add the \nruntimeco/homebrew-mynewt\n tap:\n\n\n$ brew tap runtimeco/homebrew-mynewt\n$ brew update\n\n\n\n\nRun the following command to install the latest release version of newt:\n\n\n$ brew update\n$ brew install mynewt-newt\n\n\n\n\nInstalling Newt on Linux\n\n\nRun the following commands to upgrade or install the latest version of newt:\n\n\n$ sudo apt-get update\n$ sudo apt-get install newt\n\n\n\n\n\n\nNote\n\n\nIf you encounter build errors (such as missing \nsys/mman.h\n), please make sure you have a 32-bit glibc:\n\n$ sudo apt-get install gcc-multilib\n\n\n\n\n\nInstalling Newt on Windows\n\n\nOn Windows, we use MSYS2 as the development environment to build and run Mynewt OS applications for target boards. You can do so by performing the following steps:\n\n\nDownload\n\n\n\n\n\n\nDownload and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows.\n\n\n\n\n\n\nUpdate the package database and core system packages with:\n\n\n$ pacman -Syu\n\n\n\n\n\n\n\n\nIf needed, close MSYS2, run it again from Start menu. Update the rest with:\n\n\n$ pacman -Su\n\n\n\n\n\n\n\n\nInstall dependencies:\n\n\n$ pacman -S git tar\n\n\n\n\n\n\n\n\nDownload and unpack the newt source:\n\n\n$ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz\n$ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz\n\n\n\n\n\n\n\n\nRun the \nbuild.sh\n to build the newt tool.\n\n\n$ \ncd\n mynewt-newt-mynewt_1_3_0_tag   \n$ ./build.sh\n$ rm /tmp/mynewt_1_3_0_tag.tar.gz\n\n\n\n\n\n\n\n\nYou should see the \nnewt/newt.exe\n executable. Move the executable to a bin directory in your PATH:\n\n\n$ mv newt/newt.exe /usr/bin\n\n\n\n\n\n\n\n\nBlinky on nRF52840-MDK\n\n\nNow you can try to build one of the examples. Will use the \nblinky\n example here to keep it simple.\n\n\nOpen terminal and change directory to:\n\n\n$ \ncd\n ./nrf52840-mdk/examples/mynewt/blinky\n\n\n\n\nInstall project dependencies using the \nnewt install\n command:\n\n\nblinky$ newt install\napache-mynewt-core successfully installed version \n0\n.0.0-none\nmynewt_nrf52840_mdk successfully installed version \n0\n.0.0-none\n\n\n\n\nSeveral targets are already created for the Blinky application. You can run the \nnewt target show\n command to verify the target settings:\n\n\nblinky$ newt target show\ntargets/my_blinky_sim\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@apache-mynewt-core/hw/bsp/native\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_blinky\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_boot\n    \napp\n=\n@apache-mynewt-core/apps/boot\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\noptimized\n\n\n\n\nNow you can try to build the target executables.\n\n\nRun the \nnewt build nrf52_boot\n command to build the bootloader:\n\n\nblinky$ newt build nrf52_boot\nBuilding target targets/nrf52_boot\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c\nCompiling repos/apache-mynewt-core/apps/boot/src/boot.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/loader.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c\n...\nArchiving nrf52_boot-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf\nTarget successfully built: targets/nrf52_boot\n\n\n\n\nRun the \nnewt build nrf52_blinky\n command to build the Blinky application:\n\n\nblinky$ newt build nrf52_blinky\nBuilding target targets/nrf52_blinky\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52840.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/sbrk.c\nCompiling apps/blinky/src/main.c\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/hal_bsp.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c\nCompiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_common.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c\n...\nArchiving nrf52_blinky-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf\nTarget successfully built: targets/nrf52_blinky\n\n\n\n\nRun the \nnewt create-image nrf52_blinky 1.0.0\n command to create and sign the application image. You may assign an arbitrary version (e.g. \n1.0.0\n) to the image.\n\n\nblinky$ newt create-image nrf52_blinky \n1\n.0.0\nApp image succesfully generated: /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img\n\n\n\n\nEverything goes well, now you can connect to the board and load the firmware:\n\n\n\n\nNote\n\n\nnRF52840-MDK supports OpenOCD debugger. OpenOCD version 0.10.0 with nrf52 support is required. A binary for this version is available to download for Mac OS, Linux, and Windows. Follow \nthis guide\n to install it.\n\n\n\n\nRun the \nnewt load nrf52_boot\n command to load the bootloader onto the board:\n\n\nblinky$ newt load nrf52_boot\nLoading bootloader\n\n\n\n\nRun the \nnewt load nrf52_blinky\n command to load the Blinky application image onto the board.\n\n\nblinky$ newt load nrf52_blinky\nLoading app image into slot \n1\n\n\n\n\n\nObserve that the GREEN LED is blinking:\n\n\n\n\nCreate Your First Project\n\n\nCreating a New Project\n\n\nChoose a name for your project. We name the project \nmyproj\n.\n\n\nRun the newt new myproj command, from your \ndev\n directory, to create a new project:\n\n\n$cd\n ~/dev\n$ newt new myproj\nDownloading project skeleton from apache/mynewt-blinky...\nInstalling skeleton in myproj...\nProject myproj successfully created.\n\n\n\n\nThe newt tool creates a project base directory name myproj. All newt tool commands are run from the project base directory. The newt tool populates this new project with a base skeleton of a new Apache Mynewt project in the project base directory. It has the following structure:\n\n\n.\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 NOTICE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 apps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 blinky\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pkg.yml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 main.c\n\u251c\u2500\u2500 project.yml\n\u2514\u2500\u2500 targets\n    \u251c\u2500\u2500 my_blinky_sim\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pkg.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 target.yml\n    \u2514\u2500\u2500 unittest\n        \u251c\u2500\u2500 pkg.yml\n        \u2514\u2500\u2500 target.yml\n\n\n6\n directories, \n10\n files\n\n\n\n\nFetching External Packages\n\n\nTo fetch the package with board support for nRF52840-MDK from the \nmakerdiary/mynewt_nrf52840_mdk\n git repository, you need to add the repository to the \nproject.yml\n file in your base project directory.\n\n\nHere is an example \nproject.yml\n file with the \nmynewt_nrf52840_mdk\n repository added. \n\n\n\n\nNote\n\n\nYou need to set \nvers\n to \n0-dev\n and use the latest master branch for both repositories.\n\n\n\n\nproject.name: \nmyproj\n\n\nproject.repositories:\n    - apache-mynewt-core\n    - mynewt_nrf52840_mdk\n\n\n# Use github\ns distribution mechanism for core ASF libraries.\n\n\n# This provides mirroring automatically for us.\n\n\n#\n\nrepository.apache-mynewt-core:\n    type: github\n    vers: \n0\n-dev\n    user: apache\n    repo: mynewt-core\n\n\n# a special repo to hold hardware specific stuff for nRF52840-MDK\n\nrepository.mynewt_nrf52840_mdk:\n    type: github\n    vers: \n0\n-dev\n    user: makerdiary\n    repo: mynewt_nrf52840_mdk\n\n\n\n\nInstall project dependencies using the \nnewt install\n command:\n\n\nmyproj$ newt install\napache-mynewt-core successfully installed version \n0\n.0.0-none\nmynewt_nrf52840_mdk successfully installed version \n0\n.0.0-none\n\n\n\n\nCreating the Targets\n\n\nCreate two targets for the nRF52840-MDK board - one for the bootloader and one for the your application.\n\n\nRun the following \nnewt target\n commands, from your project directory, to create a bootloader target. We name the target \nnrf52_boot\n:\n\n\nmyproj$ newt target create nrf52_boot\nmyproj$ newt target \nset\n nrf52_boot \napp\n=\n@apache-mynewt-core/apps/boot\nmyproj$ newt target \nset\n nrf52_boot \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target \nset\n nrf52_boot \nbuild_profile\n=\noptimized\n\n\n\n\nRun the following \nnewt target\n commands to create a target for the Blinky application. We name the target \nnrf52_blinky\n.\n\n\nmyproj$ newt target create nrf52_blinky\nmyproj$ newt target \nset\n nrf52_blinky \napp\n=\napps/blinky\nmyproj$ newt target \nset\n nrf52_blinky \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target \nset\n nrf52_blinky \nbuild_profile\n=\ndebug\n\n\n\n\nYou can run the \nnewt target show\n command to verify the target settings:\n\n\nmyproj$ newt target show\ntargets/my_blinky_sim\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@apache-mynewt-core/hw/bsp/native\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_blinky\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_boot\n    \napp\n=\n@apache-mynewt-core/apps/boot\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\noptimized\n\n\n\n\nBuilding the Target Executables\n\n\nRun the following commands to build the bootloader and application:\n\n\nmyproj$ newt build nrf52_boot\nmyproj$ newt build nrf52_blinky\n\n\n\n\nLoading the images\n\n\nFirst run the \nnewt create-image nrf52_blinky 1.0.0\n command to create and sign the application image. You may assign an arbitrary version (e.g. \n1.0.0\n) to the image.\n\n\nmyproj$ newt create-image nrf52_blinky \n1\n.0.0\n\n\n\n\nRun the \nnewt load nrf52_boot\n command to load the bootloader onto the board:\n\n\nmyproj$ newt load nrf52_boot\nLoading bootloader\n\n\n\n\nRun the \nnewt load nrf52_blinky\n command to load the Blinky application image onto the board.\n\n\nmyproj$ newt load nrf52_blinky\nLoading app image into slot \n1\n\n\n\n\n\nNow observe if the application is running in the right way.\n\n\nExplore other Mynewt OS Features\n\n\nCongratulations! You have created your first project! Apache Mynewt has a lot more functionality. Over time, more example applications will be added to the repository. You can star or watch the \nnrf52840-mdk\n repository to stay up to date.\n\n\nHappy Hacking!\n\n\nReference\n\n\n\n\nApache Mynewt Official site\n\n\nApache Mynewt Documentation\n\n\nApache/mynewt-core repository\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "Mynewt"
        }, 
        {
            "location": "/mynewt/#mynewt-an-os-to-build-deploy-and-securely-manage-billions-of-devices", 
            "text": "", 
            "title": "Mynewt An OS to build, deploy and securely manage billions of devices"
        }, 
        {
            "location": "/mynewt/#introduction", 
            "text": "Apache Mynewt is an operating system that makes it easy to develop applications for microcontroller environments where power and cost are driving factors. Examples of these devices are connected locks, lights, and wearables.  As more and more devices get connected, these interconnected devices perform complex tasks. To perform these tasks, you need low-level operational functionality built into the operating system. Typically, connected devices built with these microcontrollers perform a myriad of functions:    Networking Stacks: Bluetooth Low Energy and Thread    Peripherals: PWM to drive motors, ADCs to measure sensor data, and RTCs to keep time.    Scheduled Processing: actions must happen on a calendared or periodic basis.    Apache Mynewt accomplishes all the above easily, by providing a complete operating system for constrained devices, including:    A fully open-source Bluetooth Low Energy stack with both Host and Controller implementations.    A pre-emptive, multi-tasking Real Time operating system kernel    A Hardware Abstraction Layer (HAL) that abstracts the MCU's peripheral functions, allowing developers to easily write cross-platform code.", 
            "title": "Introduction"
        }, 
        {
            "location": "/mynewt/#newt", 
            "text": "In order to provide all this functionality, and operate in an extremely low resource environment, Mynewt provides a very fine-grained source package management and build system tool, called  newt .  You can install newt for  macOS ,  Linux , or  Windows .", 
            "title": "Newt"
        }, 
        {
            "location": "/mynewt/#installing-newt-on-macos", 
            "text": "Newt is supported on macOS 64 bit platforms and has been tested on macOS Sierra.  If this is your first time installing newt, add the  runtimeco/homebrew-mynewt  tap:  $ brew tap runtimeco/homebrew-mynewt\n$ brew update  Run the following command to install the latest release version of newt:  $ brew update\n$ brew install mynewt-newt", 
            "title": "Installing Newt on macOS"
        }, 
        {
            "location": "/mynewt/#installing-newt-on-linux", 
            "text": "Run the following commands to upgrade or install the latest version of newt:  $ sudo apt-get update\n$ sudo apt-get install newt   Note  If you encounter build errors (such as missing  sys/mman.h ), please make sure you have a 32-bit glibc: $ sudo apt-get install gcc-multilib", 
            "title": "Installing Newt on Linux"
        }, 
        {
            "location": "/mynewt/#installing-newt-on-windows", 
            "text": "On Windows, we use MSYS2 as the development environment to build and run Mynewt OS applications for target boards. You can do so by performing the following steps:  Download    Download and run the installer - \"x86_64\" for 64-bit, \"i686\" for 32-bit Windows.    Update the package database and core system packages with:  $ pacman -Syu    If needed, close MSYS2, run it again from Start menu. Update the rest with:  $ pacman -Su    Install dependencies:  $ pacman -S git tar    Download and unpack the newt source:  $ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz\n$ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz    Run the  build.sh  to build the newt tool.  $  cd  mynewt-newt-mynewt_1_3_0_tag   \n$ ./build.sh\n$ rm /tmp/mynewt_1_3_0_tag.tar.gz    You should see the  newt/newt.exe  executable. Move the executable to a bin directory in your PATH:  $ mv newt/newt.exe /usr/bin", 
            "title": "Installing Newt on Windows"
        }, 
        {
            "location": "/mynewt/#blinky-on-nrf52840-mdk", 
            "text": "Now you can try to build one of the examples. Will use the  blinky  example here to keep it simple.  Open terminal and change directory to:  $  cd  ./nrf52840-mdk/examples/mynewt/blinky  Install project dependencies using the  newt install  command:  blinky$ newt install\napache-mynewt-core successfully installed version  0 .0.0-none\nmynewt_nrf52840_mdk successfully installed version  0 .0.0-none  Several targets are already created for the Blinky application. You can run the  newt target show  command to verify the target settings:  blinky$ newt target show\ntargets/my_blinky_sim\n     app = apps/blinky\n     bsp = @apache-mynewt-core/hw/bsp/native\n     build_profile = debug\ntargets/nrf52_blinky\n     app = apps/blinky\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = debug\ntargets/nrf52_boot\n     app = @apache-mynewt-core/apps/boot\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = optimized  Now you can try to build the target executables.  Run the  newt build nrf52_boot  command to build the bootloader:  blinky$ newt build nrf52_boot\nBuilding target targets/nrf52_boot\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c\nCompiling repos/apache-mynewt-core/apps/boot/src/boot.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/loader.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c\n...\nArchiving nrf52_boot-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf\nTarget successfully built: targets/nrf52_boot  Run the  newt build nrf52_blinky  command to build the Blinky application:  blinky$ newt build nrf52_blinky\nBuilding target targets/nrf52_blinky\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52840.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/sbrk.c\nCompiling apps/blinky/src/main.c\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/hal_bsp.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c\nCompiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_common.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c\n...\nArchiving nrf52_blinky-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf\nTarget successfully built: targets/nrf52_blinky  Run the  newt create-image nrf52_blinky 1.0.0  command to create and sign the application image. You may assign an arbitrary version (e.g.  1.0.0 ) to the image.  blinky$ newt create-image nrf52_blinky  1 .0.0\nApp image succesfully generated: /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img  Everything goes well, now you can connect to the board and load the firmware:   Note  nRF52840-MDK supports OpenOCD debugger. OpenOCD version 0.10.0 with nrf52 support is required. A binary for this version is available to download for Mac OS, Linux, and Windows. Follow  this guide  to install it.   Run the  newt load nrf52_boot  command to load the bootloader onto the board:  blinky$ newt load nrf52_boot\nLoading bootloader  Run the  newt load nrf52_blinky  command to load the Blinky application image onto the board.  blinky$ newt load nrf52_blinky\nLoading app image into slot  1   Observe that the GREEN LED is blinking:", 
            "title": "Blinky on nRF52840-MDK"
        }, 
        {
            "location": "/mynewt/#create-your-first-project", 
            "text": "", 
            "title": "Create Your First Project"
        }, 
        {
            "location": "/mynewt/#creating-a-new-project", 
            "text": "Choose a name for your project. We name the project  myproj .  Run the newt new myproj command, from your  dev  directory, to create a new project:  $cd  ~/dev\n$ newt new myproj\nDownloading project skeleton from apache/mynewt-blinky...\nInstalling skeleton in myproj...\nProject myproj successfully created.  The newt tool creates a project base directory name myproj. All newt tool commands are run from the project base directory. The newt tool populates this new project with a base skeleton of a new Apache Mynewt project in the project base directory. It has the following structure:  .\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 NOTICE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 apps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 blinky\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pkg.yml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 main.c\n\u251c\u2500\u2500 project.yml\n\u2514\u2500\u2500 targets\n    \u251c\u2500\u2500 my_blinky_sim\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pkg.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 target.yml\n    \u2514\u2500\u2500 unittest\n        \u251c\u2500\u2500 pkg.yml\n        \u2514\u2500\u2500 target.yml 6  directories,  10  files", 
            "title": "Creating a New Project"
        }, 
        {
            "location": "/mynewt/#fetching-external-packages", 
            "text": "To fetch the package with board support for nRF52840-MDK from the  makerdiary/mynewt_nrf52840_mdk  git repository, you need to add the repository to the  project.yml  file in your base project directory.  Here is an example  project.yml  file with the  mynewt_nrf52840_mdk  repository added.    Note  You need to set  vers  to  0-dev  and use the latest master branch for both repositories.   project.name:  myproj \n\nproject.repositories:\n    - apache-mynewt-core\n    - mynewt_nrf52840_mdk # Use github s distribution mechanism for core ASF libraries.  # This provides mirroring automatically for us.  # \nrepository.apache-mynewt-core:\n    type: github\n    vers:  0 -dev\n    user: apache\n    repo: mynewt-core # a special repo to hold hardware specific stuff for nRF52840-MDK \nrepository.mynewt_nrf52840_mdk:\n    type: github\n    vers:  0 -dev\n    user: makerdiary\n    repo: mynewt_nrf52840_mdk  Install project dependencies using the  newt install  command:  myproj$ newt install\napache-mynewt-core successfully installed version  0 .0.0-none\nmynewt_nrf52840_mdk successfully installed version  0 .0.0-none", 
            "title": "Fetching External Packages"
        }, 
        {
            "location": "/mynewt/#creating-the-targets", 
            "text": "Create two targets for the nRF52840-MDK board - one for the bootloader and one for the your application.  Run the following  newt target  commands, from your project directory, to create a bootloader target. We name the target  nrf52_boot :  myproj$ newt target create nrf52_boot\nmyproj$ newt target  set  nrf52_boot  app = @apache-mynewt-core/apps/boot\nmyproj$ newt target  set  nrf52_boot  bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target  set  nrf52_boot  build_profile = optimized  Run the following  newt target  commands to create a target for the Blinky application. We name the target  nrf52_blinky .  myproj$ newt target create nrf52_blinky\nmyproj$ newt target  set  nrf52_blinky  app = apps/blinky\nmyproj$ newt target  set  nrf52_blinky  bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target  set  nrf52_blinky  build_profile = debug  You can run the  newt target show  command to verify the target settings:  myproj$ newt target show\ntargets/my_blinky_sim\n     app = apps/blinky\n     bsp = @apache-mynewt-core/hw/bsp/native\n     build_profile = debug\ntargets/nrf52_blinky\n     app = apps/blinky\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = debug\ntargets/nrf52_boot\n     app = @apache-mynewt-core/apps/boot\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = optimized", 
            "title": "Creating the Targets"
        }, 
        {
            "location": "/mynewt/#building-the-target-executables", 
            "text": "Run the following commands to build the bootloader and application:  myproj$ newt build nrf52_boot\nmyproj$ newt build nrf52_blinky", 
            "title": "Building the Target Executables"
        }, 
        {
            "location": "/mynewt/#loading-the-images", 
            "text": "First run the  newt create-image nrf52_blinky 1.0.0  command to create and sign the application image. You may assign an arbitrary version (e.g.  1.0.0 ) to the image.  myproj$ newt create-image nrf52_blinky  1 .0.0  Run the  newt load nrf52_boot  command to load the bootloader onto the board:  myproj$ newt load nrf52_boot\nLoading bootloader  Run the  newt load nrf52_blinky  command to load the Blinky application image onto the board.  myproj$ newt load nrf52_blinky\nLoading app image into slot  1   Now observe if the application is running in the right way.", 
            "title": "Loading the images"
        }, 
        {
            "location": "/mynewt/#explore-other-mynewt-os-features", 
            "text": "Congratulations! You have created your first project! Apache Mynewt has a lot more functionality. Over time, more example applications will be added to the repository. You can star or watch the  nrf52840-mdk  repository to stay up to date.  Happy Hacking!", 
            "title": "Explore other Mynewt OS Features"
        }, 
        {
            "location": "/mynewt/#reference", 
            "text": "Apache Mynewt Official site  Apache Mynewt Documentation  Apache/mynewt-core repository", 
            "title": "Reference"
        }, 
        {
            "location": "/mynewt/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/daplink/", 
            "text": "Arm Mbed DAPLink \nAn open-source software project that enables programming and debugging application running on Arm Cortex CPUs\n\n\n\n\nIntroduction\n\n\nArm Mbed DAPLink is an open-source software project that enables programming and debugging application software on running on Arm Cortex CPUs.  \n\n\nDAPLink enables developers with drag-and-drop programming, a serial port and CMSIS-DAP based debugging. More features are planned and will show up gradually over time. \n\n\nThe project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy!\n\n\nFor more information, please visit \nArm Mbed DAPLink page\n.\n\n\nDistinguishing features\n\n\nDAPLink enables developers with:\n\n\n\n\nMSC - drag-n-drop programming flash memory\n\n\nCDC - virtual com port for log, trace and terminal emulation\n\n\nHID - CMSIS-DAP compliant debug channel\n\n\nWEBUSB HID - CMSIS-DAP compliant debug channel\n\n\n\n\nMore features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy!\n\n\nBlock diagram\n\n\nCommonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD or JTAG port of the application MCU. This configuration is found on nearly all development boards. It creates a bridge between your development computer and the CPU debug access port.\n\n\n\n\nHow to update the DAPLink firmware?\n\n\nYou can update DAPLink interface firmware by performing the following steps:\n\n\n\n\n\n\nWhile holding the board's RESET button, connect it to your computer. The device mounts in its bootloader mode. The drive name should be \nCRP DISABLD\n.\n\n\n\n\n\n\nRemove \nfirmware.bin\n from this device's root directory.\n\n\n\n\n\n\nDownload \nthe latest DAPLink firmware\n. You can find it in the directory \nnrf52840-mdk/firmware/daplink\n with the name \nlpc11u35_nrf52840_mdk_if_crc_xxxx.bin\n.\n\n\n\n\n\n\nCopy the new interface firmware to the drive:\n\n\n\n\n\n\nWindows - Drag and drop the \n.bin\n file downloaded before into this directory.\n\n\n\n\n\n\nmacOS - Run the following scripts:\n\n\n$ sudo mount -u -w -o sync /Volumes/CRP DISABLD\n$ cp -X \npath to interface firmware file\n /Volumes/CRP DISABLD/\n\n\n\n\n\n\n\n\nLinux - Run the following scripts:\n\n\n$ cp \npath to interface firmware file\n \nCRP DISABLD\n \n sync\n\n\n\n\n\n\n\n\n\n\n\n\nWhen the file copy operation completes, eject and replug the board into your computer normally (without holding down the RESET button). Your device now has the new firmware installed and mounts a drive named \nDAPLINK\n.\n\n\n\n\n\n\nCheck the \nDETAILS.TXT\n file in \nDAPLINK\n to verify the \nInterface Version\n.\n\n\n\n\n\n\nHow to build DAPLink?\n\n\nThis tutorial will show you how to create a release build of DAPLink.\n\n\nSet up prerequisites\n\n\nInstall the necessary tools listed below. Skip any step where a compatible tool already exists.\n\n\n\n\nInstall \nPython 2, 2.7.9 or above\n. Add to PATH.\n\n\nInstall \nGit\n. Add to PATH.\n\n\nInstall \nKeil MDK-ARM\n, preferably version 5. Set environment variable \"UV4\" to the absolute path of the UV4 executable if you don't install to the default location. Note that \"UV4\" is what's used for both MDK versions 4 and 5.\n\n\nInstall \nvirtualenv\n in your global Python installation eg: \npip install virtualenv\n\n\n\n\nGet the sources and create a virtual environment\n\n\n$ git clone https://github.com/ARMmbed/DAPLink\n$ \ncd\n DAPLink\n$ pip install virtualenv\n$ virtualenv venv\n\n\n\n\nUpdate tools and generate project files\n\n\n\n\nNote\n\n\nThis should be done every time you pull new changes.\n\n\n\n\n$ ./venv/Scripts/activate\n$ pip install -r requirements.txt\n$ progen generate -t uvision\n$ ./venv/Scripts/deactivate\n\n\n\n\nCompile your project\n\n\nChange to the \nprojectfiles/uvision/\nyour-project\n directory, and open your project using Keil MDK-ARM. Click the \nbuild\n icon to build your project. That's it.\n\n\n\n\nReference\n\n\n\n\nArm Mbed DAPLink Repo\n\n\n\n\nCreate an Issue\n\n\nInterested in contributing to this project? Want to report a bug? Feel free and click here:\n\n\n Create an Issue", 
            "title": "DAPLink"
        }, 
        {
            "location": "/daplink/#arm-mbed-daplink-an-open-source-software-project-that-enables-programming-and-debugging-application-running-on-arm-cortex-cpus", 
            "text": "", 
            "title": "Arm Mbed DAPLink An open-source software project that enables programming and debugging application running on Arm Cortex CPUs"
        }, 
        {
            "location": "/daplink/#introduction", 
            "text": "Arm Mbed DAPLink is an open-source software project that enables programming and debugging application software on running on Arm Cortex CPUs.    DAPLink enables developers with drag-and-drop programming, a serial port and CMSIS-DAP based debugging. More features are planned and will show up gradually over time.   The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy!  For more information, please visit  Arm Mbed DAPLink page .", 
            "title": "Introduction"
        }, 
        {
            "location": "/daplink/#distinguishing-features", 
            "text": "DAPLink enables developers with:   MSC - drag-n-drop programming flash memory  CDC - virtual com port for log, trace and terminal emulation  HID - CMSIS-DAP compliant debug channel  WEBUSB HID - CMSIS-DAP compliant debug channel   More features are planned and will show up gradually over time. The project is constantly under heavy development by Arm, its partners, numerous hardware vendors and the open-source community around the world. DAPLink has superseded the mbed CMSIS-DAP interface firmware project. You are free to use and contribute. Enjoy!", 
            "title": "Distinguishing features"
        }, 
        {
            "location": "/daplink/#block-diagram", 
            "text": "Commonly referred to as interface firmware, DAPLink runs on a secondary MCU that is attached to the SWD or JTAG port of the application MCU. This configuration is found on nearly all development boards. It creates a bridge between your development computer and the CPU debug access port.", 
            "title": "Block diagram"
        }, 
        {
            "location": "/daplink/#how-to-update-the-daplink-firmware", 
            "text": "You can update DAPLink interface firmware by performing the following steps:    While holding the board's RESET button, connect it to your computer. The device mounts in its bootloader mode. The drive name should be  CRP DISABLD .    Remove  firmware.bin  from this device's root directory.    Download  the latest DAPLink firmware . You can find it in the directory  nrf52840-mdk/firmware/daplink  with the name  lpc11u35_nrf52840_mdk_if_crc_xxxx.bin .    Copy the new interface firmware to the drive:    Windows - Drag and drop the  .bin  file downloaded before into this directory.    macOS - Run the following scripts:  $ sudo mount -u -w -o sync /Volumes/CRP DISABLD\n$ cp -X  path to interface firmware file  /Volumes/CRP DISABLD/    Linux - Run the following scripts:  $ cp  path to interface firmware file   CRP DISABLD    sync      When the file copy operation completes, eject and replug the board into your computer normally (without holding down the RESET button). Your device now has the new firmware installed and mounts a drive named  DAPLINK .    Check the  DETAILS.TXT  file in  DAPLINK  to verify the  Interface Version .", 
            "title": "How to update the DAPLink firmware?"
        }, 
        {
            "location": "/daplink/#how-to-build-daplink", 
            "text": "This tutorial will show you how to create a release build of DAPLink.", 
            "title": "How to build DAPLink?"
        }, 
        {
            "location": "/daplink/#set-up-prerequisites", 
            "text": "Install the necessary tools listed below. Skip any step where a compatible tool already exists.   Install  Python 2, 2.7.9 or above . Add to PATH.  Install  Git . Add to PATH.  Install  Keil MDK-ARM , preferably version 5. Set environment variable \"UV4\" to the absolute path of the UV4 executable if you don't install to the default location. Note that \"UV4\" is what's used for both MDK versions 4 and 5.  Install  virtualenv  in your global Python installation eg:  pip install virtualenv", 
            "title": "Set up prerequisites"
        }, 
        {
            "location": "/daplink/#get-the-sources-and-create-a-virtual-environment", 
            "text": "$ git clone https://github.com/ARMmbed/DAPLink\n$  cd  DAPLink\n$ pip install virtualenv\n$ virtualenv venv", 
            "title": "Get the sources and create a virtual environment"
        }, 
        {
            "location": "/daplink/#update-tools-and-generate-project-files", 
            "text": "Note  This should be done every time you pull new changes.   $ ./venv/Scripts/activate\n$ pip install -r requirements.txt\n$ progen generate -t uvision\n$ ./venv/Scripts/deactivate", 
            "title": "Update tools and generate project files"
        }, 
        {
            "location": "/daplink/#compile-your-project", 
            "text": "Change to the  projectfiles/uvision/ your-project  directory, and open your project using Keil MDK-ARM. Click the  build  icon to build your project. That's it.", 
            "title": "Compile your project"
        }, 
        {
            "location": "/daplink/#reference", 
            "text": "Arm Mbed DAPLink Repo", 
            "title": "Reference"
        }, 
        {
            "location": "/daplink/#create-an-issue", 
            "text": "Interested in contributing to this project? Want to report a bug? Feel free and click here:   Create an Issue", 
            "title": "Create an Issue"
        }, 
        {
            "location": "/how-to-buy/", 
            "text": "How to Buy nRF52840-MDK\n\n\nBuy Online\n\n\nnRF52840-MDK is available on the following channels (click to go directly to the product):\n\n\n\n\n\n\n\n\nBulk \n Customization\n\n\nWe are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization.\n\n\nIf you would like to do some serious business, \ndrop a line\n and we'll reply before you know it.\n\n\n Email Us", 
            "title": "How to Buy"
        }, 
        {
            "location": "/how-to-buy/#how-to-buy-nrf52840-mdk", 
            "text": "", 
            "title": "How to Buy nRF52840-MDK"
        }, 
        {
            "location": "/how-to-buy/#buy-online", 
            "text": "nRF52840-MDK is available on the following channels (click to go directly to the product):", 
            "title": "Buy Online"
        }, 
        {
            "location": "/how-to-buy/#bulk-customization", 
            "text": "We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization.  If you would like to do some serious business,  drop a line  and we'll reply before you know it.   Email Us", 
            "title": "Bulk &amp; Customization"
        }, 
        {
            "location": "/CONTRIBUTING/", 
            "text": "Interested in contributing to the nRF52840-MDK project? Want to report a bug? Before you do, please read the following guidelines.\n\n\nGot a question or problem?\n\n\nFor quick questions there's no need to open an issue as you can comment at the bottom of the corresponding\n page.\n\n\nFound a bug?\n\n\nIf you found a bug in the source code, you can help us by submitting an issue to the \nissue tracker\n in our GitHub repository. Even better, you can submit a Pull Request with a fix.\n\n\nMissing a feature?\n\n\nYou can request a new feature by submitting an issue to our GitHub Repository. Be sure that it is of use for everyone.\n\n\n Create an Issue", 
            "title": "Contributing"
        }, 
        {
            "location": "/CONTRIBUTING/#got-a-question-or-problem", 
            "text": "For quick questions there's no need to open an issue as you can comment at the bottom of the corresponding\n page.", 
            "title": "Got a question or problem?"
        }, 
        {
            "location": "/CONTRIBUTING/#found-a-bug", 
            "text": "If you found a bug in the source code, you can help us by submitting an issue to the  issue tracker  in our GitHub repository. Even better, you can submit a Pull Request with a fix.", 
            "title": "Found a bug?"
        }, 
        {
            "location": "/CONTRIBUTING/#missing-a-feature", 
            "text": "You can request a new feature by submitting an issue to our GitHub Repository. Be sure that it is of use for everyone.   Create an Issue", 
            "title": "Missing a feature?"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "MIT License\n\n\nCopyright \n 2018 \nmakerdiary.com\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/cn/", 
            "text": "nRF52840-MDK \n\u5f00\u6e90\u3001\u9762\u5411\u591a\u534f\u8bae\u65e0\u7ebf\u7269\u8054\u7f51\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6\n\n\n\u7b80\u4ecb\n\n\nnRF52840-MDK \u662f\u4e00\u4e2a\u5c0f\u5de7\u800c\u529f\u80fd\u4e30\u5bcc\u3001\u5f00\u7bb1\u5373\u7528\u7684\u7269\u8054\u7f51\u5f00\u53d1\u5957\u4ef6\uff0c\u57fa\u4e8e \nNordic\n \u9ad8\u7aef\u7cfb\u7edf\u7ea7\u82af\u7247 \nnRF52840\n\uff0c\u53ef\u652f\u6301 \nBluetooth 5\n\u3001\nBluetooth Mesh\n\u3001\nThread\n\u3001\nIEEE 802.15.4\n\u3001\nANT\n \u7b49\u65e0\u7ebf\u534f\u8bae\uff0c\u540c\u65f6\u5e26\u6709\u7247\u4e0a Arm CryptoCell \u52a0\u5bc6\u5b50\u7cfb\u7edf\uff0c\u662f\u76ee\u524d\u9762\u5411\u591a\u534f\u8bae\u65e0\u7ebf\u7269\u8054\u7f51\u7684\u7406\u60f3\u89e3\u51b3\u65b9\u6848\u3002\n\n\nnRF52840-MDK \u96c6\u6210\u4e86\u591a\u529f\u80fd\u8c03\u8bd5\u5668 \nArm Mbed DAPLink\n\uff0c\u63d0\u4f9b\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u56fa\u4ef6\u3001USB CDC \u865a\u62df\u4e32\u53e3\u3001CMSIS-DAP \u4eff\u771f\u7b49\u529f\u80fd\u3002\n\n\nnRF52840-MDK \u8fd8\u677f\u8f7d\u4e86\u6765\u81ea Microchip \u7684\u4e24\u7aef\u53e3 USB 2.0 \u9ad8\u901f\u96c6\u7ebf\u5668\uff0c\u53ea\u9700\u4e00\u4e2a USB \u63a5\u53e3\u5373\u53ef\u540c\u65f6\u4f7f\u7528 DAPLink \u548c nRF52840 \u7684 USB \u8bbe\u5907\u63a7\u5236\u5668\u3002\u540c\u65f6\u8fd8\u642d\u8f7d\u4e86 64Mbit \u8d85\u4f4e\u529f\u8017 QSPI FLASH\u3001\u53ef\u7f16\u7a0b\u6309\u952e\u3001RGB LED\u3001\u6676\u7247\u5929\u7ebf\u53ca\u5916\u90e8\u5929\u7ebf\u8fde\u63a5\u5668\u7b49\u786c\u4ef6\u8d44\u6e90\u3002\n\n\nnRF52840-MDK \u652f\u6301\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u53ef\u4ee5\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6\uff08\u5982\uff1anRF5 SDK, Mesh, OpenThread, ZigBee 3.0, Mbed OS 5, Zephyr, Mynewt, iBeacon, Eddystone, Web Bluetooth \u7b49\u7b49\uff09\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\u53ca\u793a\u4f8b\uff0c\u5e2e\u52a9\u4f60\u52a0\u901f\u7269\u8054\u7f51\u5e94\u7528\u5f00\u53d1\u3002\n\n\n\n\n\u786c\u4ef6\u89c4\u683c\n\n\n\n\nNordic \u9ad8\u7aef\u7cfb\u7edf\u7ea7\u82af\u7247 nRF52840\n\n\nARM\u00ae Cortex\u00ae-M4F \u5185\u6838\n\n\n1MB FLASH\uff0c256kB RAM\n\n\n\u652f\u6301 \nBluetooth 5\n\u3001\nBluetooth Mesh\n\u3001\nThread\n\u3001\nIEEE 802.15.4\n\u3001\nANT\n \u7b49\u65e0\u7ebf\u534f\u8bae\n\n\n\u7247\u4e0a NFC-A \u6807\u7b7e\n\n\nUSB 2.0 \u8bbe\u5907\u63a7\u5236\u5668\n\n\nARM TrustZone\u00ae Cryptocell 310 \u52a0\u5bc6\u5b50\u7cfb\u7edf\n\n\n\n\n\n\n\n\n\u677f\u8f7d Arm Mbed DAPLink \u591a\u529f\u80fd\u8c03\u5de5\u5177\uff1a\n\n\n\n\nMSC - \u652f\u6301\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u56fa\u4ef6\n\n\nCDC - \u63d0\u4f9b\u865a\u62df\u4e32\u53e3\u5de5\u5177\n\n\nHID - \u517c\u5bb9 CMSIS-DAP \u4eff\u771f\u529f\u80fd\n\n\n\n\n\n\n\n\nMicrochip \u4e24\u7aef\u53e3 USB 2.0 \u9ad8\u901f\u96c6\u7ebf\u5668\n\n\n\n\n\u677f\u8f7d 64Mbit \u8d85\u4f4e\u529f\u8017 QSPI FLASH \n\n\n\u62e5\u6709 \u591a\u8fbe 24 \u4e2a\u53ef\u7f16\u7a0b GPIO\n\n\nIF Boot/Reset \u6309\u94ae\n\n\n\u7528\u6237\u53ef\u7f16\u7a0b\u6309\u94ae\u548c RGB LED\n\n\n\u677f\u8f7d 2.4G \u6676\u7247\u5929\u7ebf\n\n\nU.FL \u8fde\u63a5\u5668\u53ef\u7528\u4e8e\u9009\u62e9\u5916\u90e8\u5929\u7ebf\n\n\n3.3V \u7a33\u538b\u5668\uff0c\u9ad8\u6548\u7387\u3001\u4f4e\u9759\u6001\u7535\u6d41\u3001\u53ef\u8f93\u51fa 1A \u5cf0\u503c\u7535\u6d41\n\n\nVBUS \n VIN \u7535\u6e90\u8def\u5f84\u7ba1\u7406\n\n\n\u53ef\u6b63\u53cd\u9762\u8fde\u63a5\u7684 USB 3.1 Type-C \u63a5\u53e3\n\n\n2.54mm \u6807\u51c6\u5f15\u811a\u95f4\u8ddd\uff0c\u53ef\u76f4\u63a5\u5b89\u88c5\u5728\u9762\u5305\u677f\u4e0a\n\n\n\u5c3a\u5bf8\u5c0f\u5de7 50mm x 23mm x 13mm (\u5df2\u710a\u6392\u9488)\n\n\n\n\n\u5f15\u811a\u4f4d\u7f6e\u56fe\n\n\n\n\n\u8f6f\u4ef6\u8d44\u6e90\n\n\nnRF52840-MDK \u652f\u6301\u591a\u79cd\u8f6f\u4ef6\u6846\u67b6\u53ca\u534f\u8bae\uff1a\n\n\n\n\n\n\n\n\n\u6846\u67b6/\u534f\u8bae\n\n\n\u7b80\u4ecb\n\n\n\n\n\n\n\n\n\n\nnRF5 SDK\n\n\nNordic \u5b98\u65b9\u63d0\u4f9b\u7684 SDK\n\n\n\n\n\n\nnRF5 SDK for Mesh\n\n\nNordic \u5b98\u65b9\u63d0\u4f9b\u7684\u4f4e\u529f\u8017\u84dd\u7259 Mesh \u7f51\u7edc SDK\n\n\n\n\n\n\nOpenThread\n\n\nNest \u5f00\u6e90\u5b9e\u73b0\u7684 Thread\u00ae \u7f51\u7edc\u534f\u8bae\n\n\n\n\n\n\nArm Mbed OS\n\n\nArm \u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\n\n\n\n\n\n\nZephyr\n\n\nLinux \u57fa\u91d1\u4f1a\u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\n\n\n\n\n\n\nMynewt\n\n\nApache \u5f00\u6e90\u6a21\u5757\u5316\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e13\u95e8\u4e3a\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u800c\u53c8\u8981\u4ee5\u6781\u4f4e\u529f\u8017\u8fd0\u884c\u975e\u5e38\u957f\u65f6\u95f4\u7684\u7269\u8054\u7f51\u8bbe\u5907\u8bbe\u8ba1\n\n\n\n\n\n\nArm Mbed DAPLink\n\n\nArm Mbed \u9488\u5bf9 Arm Cortex \u7cfb\u5217 CPU \u5f00\u6e90 CMSIS-DAP \u591a\u529f\u80fd\u8c03\u8bd5\u5668\n\n\n\n\n\n\nWeb Bluetooth\n\n\n\u57fa\u4e8e Web \u7684\u4f4e\u529f\u8017\u84dd\u7259 API\n\n\n\n\n\n\niBeacon\n\n\nApple \u5b9e\u73b0\u7684 Beacon \u534f\u8bae\n\n\n\n\n\n\nEddystone\n\n\nGoogle \u5f00\u6e90\u7684 Beacon \u534f\u8bae\n\n\n\n\n\n\n\n\n\u786c\u4ef6\u8d44\u6599\n\n\n\n\n\n\n\n\n\u7248\u672c\n\n\n\u8bbe\u8ba1\u6587\u6863\n\n\n\n\n\n\n\n\n\n\nV1.0\n\n\nnRF52840-MDK V1.0 Pinout Diagram\nnRF52840-MDK V1.0 Schematic\nnRF52840-MDK V1.0 Board File\nnRF52840-MDK V1.0 3D STEP\n\n\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/#nrf52840-mdk", 
            "text": "", 
            "title": "nRF52840-MDK \u5f00\u6e90\u3001\u9762\u5411\u591a\u534f\u8bae\u65e0\u7ebf\u7269\u8054\u7f51\u5e94\u7528\u7684\u5f00\u53d1\u5957\u4ef6"
        }, 
        {
            "location": "/cn/#_1", 
            "text": "nRF52840-MDK \u662f\u4e00\u4e2a\u5c0f\u5de7\u800c\u529f\u80fd\u4e30\u5bcc\u3001\u5f00\u7bb1\u5373\u7528\u7684\u7269\u8054\u7f51\u5f00\u53d1\u5957\u4ef6\uff0c\u57fa\u4e8e  Nordic  \u9ad8\u7aef\u7cfb\u7edf\u7ea7\u82af\u7247  nRF52840 \uff0c\u53ef\u652f\u6301  Bluetooth 5 \u3001 Bluetooth Mesh \u3001 Thread \u3001 IEEE 802.15.4 \u3001 ANT  \u7b49\u65e0\u7ebf\u534f\u8bae\uff0c\u540c\u65f6\u5e26\u6709\u7247\u4e0a Arm CryptoCell \u52a0\u5bc6\u5b50\u7cfb\u7edf\uff0c\u662f\u76ee\u524d\u9762\u5411\u591a\u534f\u8bae\u65e0\u7ebf\u7269\u8054\u7f51\u7684\u7406\u60f3\u89e3\u51b3\u65b9\u6848\u3002  nRF52840-MDK \u96c6\u6210\u4e86\u591a\u529f\u80fd\u8c03\u8bd5\u5668  Arm Mbed DAPLink \uff0c\u63d0\u4f9b\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u56fa\u4ef6\u3001USB CDC \u865a\u62df\u4e32\u53e3\u3001CMSIS-DAP \u4eff\u771f\u7b49\u529f\u80fd\u3002  nRF52840-MDK \u8fd8\u677f\u8f7d\u4e86\u6765\u81ea Microchip \u7684\u4e24\u7aef\u53e3 USB 2.0 \u9ad8\u901f\u96c6\u7ebf\u5668\uff0c\u53ea\u9700\u4e00\u4e2a USB \u63a5\u53e3\u5373\u53ef\u540c\u65f6\u4f7f\u7528 DAPLink \u548c nRF52840 \u7684 USB \u8bbe\u5907\u63a7\u5236\u5668\u3002\u540c\u65f6\u8fd8\u642d\u8f7d\u4e86 64Mbit \u8d85\u4f4e\u529f\u8017 QSPI FLASH\u3001\u53ef\u7f16\u7a0b\u6309\u952e\u3001RGB LED\u3001\u6676\u7247\u5929\u7ebf\u53ca\u5916\u90e8\u5929\u7ebf\u8fde\u63a5\u5668\u7b49\u786c\u4ef6\u8d44\u6e90\u3002  nRF52840-MDK \u652f\u6301\u8de8\u5e73\u53f0\u5f00\u53d1\uff0c\u53ef\u4ee5\u73a9\u8f6c\u591a\u79cd\u5f00\u6e90\u8f6f\u4ef6\u6846\u67b6\uff08\u5982\uff1anRF5 SDK, Mesh, OpenThread, ZigBee 3.0, Mbed OS 5, Zephyr, Mynewt, iBeacon, Eddystone, Web Bluetooth \u7b49\u7b49\uff09\uff0c\u5e76\u4e14\u63d0\u4f9b\u4e30\u5bcc\u7684\u5728\u7ebf\u6587\u6863\u53ca\u793a\u4f8b\uff0c\u5e2e\u52a9\u4f60\u52a0\u901f\u7269\u8054\u7f51\u5e94\u7528\u5f00\u53d1\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/#_2", 
            "text": "Nordic \u9ad8\u7aef\u7cfb\u7edf\u7ea7\u82af\u7247 nRF52840  ARM\u00ae Cortex\u00ae-M4F \u5185\u6838  1MB FLASH\uff0c256kB RAM  \u652f\u6301  Bluetooth 5 \u3001 Bluetooth Mesh \u3001 Thread \u3001 IEEE 802.15.4 \u3001 ANT  \u7b49\u65e0\u7ebf\u534f\u8bae  \u7247\u4e0a NFC-A \u6807\u7b7e  USB 2.0 \u8bbe\u5907\u63a7\u5236\u5668  ARM TrustZone\u00ae Cryptocell 310 \u52a0\u5bc6\u5b50\u7cfb\u7edf     \u677f\u8f7d Arm Mbed DAPLink \u591a\u529f\u80fd\u8c03\u5de5\u5177\uff1a   MSC - \u652f\u6301\u201c\u62d6\u653e\u5f0f\u201d\u4e0b\u8f7d\u56fa\u4ef6  CDC - \u63d0\u4f9b\u865a\u62df\u4e32\u53e3\u5de5\u5177  HID - \u517c\u5bb9 CMSIS-DAP \u4eff\u771f\u529f\u80fd     Microchip \u4e24\u7aef\u53e3 USB 2.0 \u9ad8\u901f\u96c6\u7ebf\u5668   \u677f\u8f7d 64Mbit \u8d85\u4f4e\u529f\u8017 QSPI FLASH   \u62e5\u6709 \u591a\u8fbe 24 \u4e2a\u53ef\u7f16\u7a0b GPIO  IF Boot/Reset \u6309\u94ae  \u7528\u6237\u53ef\u7f16\u7a0b\u6309\u94ae\u548c RGB LED  \u677f\u8f7d 2.4G \u6676\u7247\u5929\u7ebf  U.FL \u8fde\u63a5\u5668\u53ef\u7528\u4e8e\u9009\u62e9\u5916\u90e8\u5929\u7ebf  3.3V \u7a33\u538b\u5668\uff0c\u9ad8\u6548\u7387\u3001\u4f4e\u9759\u6001\u7535\u6d41\u3001\u53ef\u8f93\u51fa 1A \u5cf0\u503c\u7535\u6d41  VBUS   VIN \u7535\u6e90\u8def\u5f84\u7ba1\u7406  \u53ef\u6b63\u53cd\u9762\u8fde\u63a5\u7684 USB 3.1 Type-C \u63a5\u53e3  2.54mm \u6807\u51c6\u5f15\u811a\u95f4\u8ddd\uff0c\u53ef\u76f4\u63a5\u5b89\u88c5\u5728\u9762\u5305\u677f\u4e0a  \u5c3a\u5bf8\u5c0f\u5de7 50mm x 23mm x 13mm (\u5df2\u710a\u6392\u9488)", 
            "title": "\u786c\u4ef6\u89c4\u683c"
        }, 
        {
            "location": "/cn/#_3", 
            "text": "", 
            "title": "\u5f15\u811a\u4f4d\u7f6e\u56fe"
        }, 
        {
            "location": "/cn/#_4", 
            "text": "nRF52840-MDK \u652f\u6301\u591a\u79cd\u8f6f\u4ef6\u6846\u67b6\u53ca\u534f\u8bae\uff1a     \u6846\u67b6/\u534f\u8bae  \u7b80\u4ecb      nRF5 SDK  Nordic \u5b98\u65b9\u63d0\u4f9b\u7684 SDK    nRF5 SDK for Mesh  Nordic \u5b98\u65b9\u63d0\u4f9b\u7684\u4f4e\u529f\u8017\u84dd\u7259 Mesh \u7f51\u7edc SDK    OpenThread  Nest \u5f00\u6e90\u5b9e\u73b0\u7684 Thread\u00ae \u7f51\u7edc\u534f\u8bae    Arm Mbed OS  Arm \u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf    Zephyr  Linux \u57fa\u91d1\u4f1a\u5f00\u6e90\u7684\u7269\u8054\u7f51\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf    Mynewt  Apache \u5f00\u6e90\u6a21\u5757\u5316\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e13\u95e8\u4e3a\u5185\u5b58\u548c\u5b58\u50a8\u90fd\u6781\u5176\u6709\u9650\u800c\u53c8\u8981\u4ee5\u6781\u4f4e\u529f\u8017\u8fd0\u884c\u975e\u5e38\u957f\u65f6\u95f4\u7684\u7269\u8054\u7f51\u8bbe\u5907\u8bbe\u8ba1    Arm Mbed DAPLink  Arm Mbed \u9488\u5bf9 Arm Cortex \u7cfb\u5217 CPU \u5f00\u6e90 CMSIS-DAP \u591a\u529f\u80fd\u8c03\u8bd5\u5668    Web Bluetooth  \u57fa\u4e8e Web \u7684\u4f4e\u529f\u8017\u84dd\u7259 API    iBeacon  Apple \u5b9e\u73b0\u7684 Beacon \u534f\u8bae    Eddystone  Google \u5f00\u6e90\u7684 Beacon \u534f\u8bae", 
            "title": "\u8f6f\u4ef6\u8d44\u6e90"
        }, 
        {
            "location": "/cn/#_5", 
            "text": "\u7248\u672c  \u8bbe\u8ba1\u6587\u6863      V1.0  nRF52840-MDK V1.0 Pinout Diagram nRF52840-MDK V1.0 Schematic nRF52840-MDK V1.0 Board File nRF52840-MDK V1.0 3D STEP", 
            "title": "\u786c\u4ef6\u8d44\u6599"
        }, 
        {
            "location": "/cn/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/getting-started/", 
            "text": "nRF52840-MDK \u5feb\u901f\u5165\u95e8\u6307\u5357\n\n\n\n\n\u611f\u8c22\u4f7f\u7528 nRF52840-MDK\uff01\n\n\n\u672c\u6307\u5357\u5c06\u6307\u5f15\u4f60\u5982\u4f55\u5feb\u901f\u5f00\u59cb nRF52840-MDK \u5f00\u53d1\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5927\u6982\u9700\u8981 20 \u5206\u949f\u3002\n\n\n\n\n\u5305\u88c5\u5185\u5bb9\n\n\n\n\nnRF52840-MDK\n\n\nUSB 3.1 Type-C to USB 2.0 Type-A Male \u6570\u636e\u7ebf\n\n\n\n\n\n\n\u7b2c\u4e00\u6b65\uff1a\u8fde\u63a5 nRF52840-MDK\n\n\n\u4f7f\u7528\u5305\u88c5\u968f\u9644\u7684 USB 3.1 Type-C \u6570\u636e\u7ebf\uff0c\u5c06 nRF52840-MDK \u8fde\u63a5\u81f3 PC\uff0c\u7eff\u8272\u7535\u6e90\u6307\u793a\u706f\u5c06\u5e38\u4eae\uff0c\u53e6\u5916\u7684\u7eff\u8272 LED \u5e38\u4eae\u8868\u793a\u84dd\u7259\u6b63\u5728\u5e7f\u64ad\uff1a\n\n\n\n\n\u6253\u5f00 PC \u7684\u8d44\u6e90\u6d4f\u89c8\u5668\uff0cnRF52840-MDK \u5c06\u88ab\u8bc6\u522b\u6210\u4e00\u4e2a\u540d\u4e3a \nDAPLINK\n \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\u8bbe\u5907\uff1a\n\n\n\n\n\u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u4e32\u53e3\u7ec8\u7aef\n\n\nWindows\n\n\n\u5728 Windows \u73af\u5883\u4e0b\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e32\u53e3\u9a71\u52a8\uff0c\n\u70b9\u51fb\u4e0b\u8f7d\n\u5e76\u5b89\u88c5\u9a71\u52a8\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u5bf9\u4e8e Windows 10 \u4ee5\u4e0a\u7cfb\u7edf\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5b89\u88c5\u9a71\u52a8\u3002\n\n\n\n\n\u4e32\u53e3\u5de5\u5177\u5efa\u8bae\u4f7f\u7528\u514d\u8d39\u7684 \nPuTTY\n\uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff0c\u4e32\u53e3\u53f7\u53ef\u4ee5\u5728 \n\u8bbe\u5907\u7ba1\u7406\u5668\n \u4e2d\u67e5\u770b\uff1a\n\n\n\n\n\n\nmacOS\n\n\nmacOS \u7528\u6237\u53ef\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u7684\u7ec8\u7aef\u5de5\u5177 \nscreen\n, \u5177\u4f53\u547d\u4ee4\u5982\u4e0b\uff1a\n\n\n$ screen /dev/cu.usbmodem1412 \n115200\n\n\n\n\n\n\n\n\u5c0f\u6280\u5de7\n\n\n\u53ef\u4ee5\u5728\u7ec8\u7aef\u5148\u8f93\u5165 \nscreen /dev/cu.usb\n\uff0c\u7136\u540e\u6309\u4e0b \ntab\n\uff0c\u8bbe\u5907\u540d\u79f0\u5c06\u81ea\u52a8\u8865\u9f50\u3002\n\n\n\u6309\u4e0b \nCtrl\n + \nA\n\uff0c\u5728\u6309\u4e0b \nCtrl\n + \nK\n\uff0c\u5728\u7a97\u53e3\u5e95\u90e8\u4f1a\u51fa\u73b0\u63d0\u793a\u7b26 \n[y/n]\n\uff0c\u8f93\u5165 \ny\n \u5373\u53ef\u9000\u51fa\u4e32\u53e3\u7ec8\u7aef\u3002\n\n\n\n\n\n\nLinux\n\n\n\u5728 Linux \u73af\u5883\u4e0b\u540c\u6837\u53ef\u4ee5\u4f7f\u7528 \nscreen\n \u5de5\u5177\uff0c\u8fd9\u91cc\u4ee5 Ubuntu 16.04 \u4e3a\u4f8b\uff1a\n\n\n$ sudo apt-get install screen\n\n\n\n\n$ sudo screen /dev/ttyACM0 \n115200\n\n\n\n\n\n\n\n\u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528 nRF Connect\n\n\n\n\n\n\n\u4ece App Store \u6216 Google Play \u4e0b\u8f7d \nnRF Connect\n \u5e94\u7528\uff1b\n\n\n\n\n\u63d0\u793a\n\n\n\u6700\u65b0 Android \u7248\u672c\u7684 nRF Connect \u5e94\u7528\u4e5f\u53ef\u4ee5\u4ece Nordic \u7684 \nAndroid-nRF-Connect\n \u4e0b\u8f7d\u3002\n\n\n\n\n\n\n\n\n\u6253\u5f00 app\uff0c\u626b\u63cf\u8bbe\u5907\uff0c\u4f60\u5c06\u770b\u5230\u540d\u4e3a \nnRF52840-MDK\n \u7684\u8bbe\u5907\u6b63\u5728\u5e7f\u64ad\uff0c\u8fde\u63a5\u8be5\u8bbe\u5907\uff1b\n\n\n\n\n\u84dd\u8272 LED \u4eae\u3001\u7eff\u8272 LED \u706d\uff0c\u8868\u660e\u8bbe\u5907\u4ece\u5e7f\u64ad\u6001\u8fdb\u5165\u8fde\u63a5\u6001\uff0c\u540c\u65f6\u53ef\u4ee5\u89c2\u5bdf\u5230\u8be5\u8bbe\u5907\u80fd\u591f\u63d0\u4f9b\u7684\u670d\u52a1\uff1b\n\n\n\u6253\u5f00 \nNordic Blinky Button\n \u5c5e\u6027\uff08\n0x1524\n\uff09\u7684\u901a\u77e5\uff0c\u6309\u4e0b/\u91ca\u653e\u677f\u5b50\u4e0a\u7684 USER Button\uff0c\u53ef\u89c2\u5bdf\u6309\u94ae\u72b6\u6001\u7684\u6539\u53d8\uff1b\n\n\n\u5148\u540e\u5bf9 \nNordic Blinky LED\n \u5c5e\u6027 (0x1525) \u5199\u5165 \n01\n \u3001\n00\n\uff0c\u53ef\u89c2\u5bdf\u5230 LED \u7684\u72b6\u6001\u53d8\u5316\u3002\n\n\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u8be5\u6f14\u793a demo \u6e90\u7801\u4f4d\u4e8e \n./nrf52840-mdk/examples/nrf5-sdk/ble_app_blinky\n\u3002\n\n\n\n\n\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f\n\n\nnRF52840-MDK \u677f\u4e0a\u96c6\u6210\u4e86 DAPLink \u591a\u529f\u80fd\u8c03\u8bd5\u5668\uff0c\u53ef\u7528\u4e8e\u4e0b\u8f7d\u56fa\u4ef6\u3001\u8c03\u8bd5\u4ee3\u7801\u3001\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u4e0b\u8f7d\u65b9\u5f0f\uff1a\n\n\n\n\n\u201c\u62d6\u653e\u201d\u4e0b\u8f7d\n\n\n\u4f7f\u7528 pyOCD \u4e0b\u8f7d\n\n\n\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528 \nHeart rate monitor\n \u4f5c\u4e3a\u793a\u4f8b\uff0c\u53ef\u4ece\u4ee5\u4e0b\u94fe\u63a5\u83b7\u5f97 \nhex\n \u56fa\u4ef6\u3002\n\n\n\u4e0b\u8f7d\u56fa\u4ef6\n\n\n\u201c\u62d6\u653e\u201d\u4e0b\u8f7d\n\n\n\u5c06 nRF52840-MDK \u8fde\u63a5\u5230 PC\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bc6\u522b\u5230 \nDAPLINK\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u76f4\u63a5\u628a \n.hex\n \u56fa\u4ef6\u62d6\u653e\u5230\u8be5\u78c1\u76d8\u5373\u53ef\u5f00\u59cb\u4e0b\u8f7d\uff0c\u7b49\u5f85\u4e0b\u8f7d\u5b8c\u6210....\n\n\n\n\n\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u6309\u4e0b\u590d\u4f4d\u6309\u94ae\u4fbf\u53ef\u8fd0\u884c\u65b0\u56fa\u4ef6\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u5bf9\u4e8e\u5305\u542b\u84dd\u7259\u534f\u8bae\u6808\uff08SoftDevice\uff09\u7684\u5e94\u7528\uff0c\u9700\u8981\u5148\u4f7f\u7528 \nmergehex\n \u5de5\u5177\u5408\u5e76\u5e94\u7528\u7a0b\u5e8f\u56fa\u4ef6\u548c SoftDevice \u534f\u8bae\u6808\u3002 \nmergehex\n \u5305\u542b\u5728 \nnRF5x Command Line Tools\n \u5de5\u5177\u5305\u4e2d\u3002\n\n\n\n\n\u4f7f\u7528 pyOCD \u4e0b\u8f7d\n\n\npyOCD\n \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, macOS, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002\n\n\n\u53ef\u4ee5\u901a\u8fc7 \npip\n \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a\n\n\n$ pip install --pre -U pyocd\n\n\n\n\n\u6216\u8005\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5b89\u88c5\u6700\u65b0\u5f00\u53d1\u7248\u672c\uff0c\u4f53\u9a8c\u4e00\u4e9b\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u65b0\u529f\u80fd\uff1a\n\n\n$ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip\n\n\n\n\n\n\n\u6ce8\u610f\n\n\n\u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 pyOCD\uff0c\u9700\u8981\u5728\u5b89\u88c5\u547d\u4ee4\u524d\u589e\u52a0 \nsudo -H\n \u8fdb\u884c\u5168\u5c40\u5b89\u88c5\u3002\n\n\n\n\n\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u53ef\u5b8c\u6210\u56fa\u4ef6\u4e0b\u8f7d\u3001\u64e6\u9664\uff1a\n\n\n# -se \u8868\u793a\u53ea\u64e6\u9664\u9700\u8981\u7528\u5230\u7684\u533a\u57df\n\n$ pyocd-flashtool -d debug -t nrf52 -se your-hex-file.hex\n\n\n# \u5982\u679c\u9700\u8981\u6574\u7247\u64e6\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528 -ce \u53c2\u6570\n\n$ pyocd-flashtool -d debug -t nrf52 -ce your-hex-file.hex\n\n\n# \u5982\u679c\u53ea\u662f\u60f3\u64e6\u9664\uff0c\u4e0d\u7f16\u7a0b\uff0c\u53ef\u4ee5\u4e0d\u5e26hex\u6587\u4ef6\u53c2\u6570\n\n$ pyocd-flashtool -d debug -t nrf52 -ce\n\n\n\n\n\n\n\u9a8c\u8bc1\u65b0\u56fa\u4ef6\n\n\n\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u53ef\u4f7f\u7528 \nnRF Toolbox\n app \u9a8c\u8bc1\u65b0\u56fa\u4ef6\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a\u6253\u5f00 nRF Toolbox\uff0c\u9009\u62e9 \nHRM\n \u5de5\u5177\uff0c\u8fde\u63a5 \nNordic_HRM\n \u8bbe\u5907\uff0c\u5373\u53ef\u67e5\u770b\u5fc3\u7387\u6570\u636e\uff1a\n\n\n\n\n\u4e0b\u8f7d\u9879\u76ee\u6e90\u7801\n\n\nnRF52840-MDK \u7684\u6240\u6709\u793a\u4f8b\u4ee3\u7801\u53ca\u6587\u6863\u6258\u7ba1\u5728 GitHub \nmakerdiary/nrf52840-mdk\n \u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u4e0b\u8f7d\u6216\u514b\u9686\u5230\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\u4e0b\u4f7f\u7528\uff1a\n\n\n$ git clone https://github.com/makerdiary/nrf52840-mdk.git\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/cn/getting-started/#nrf52840-mdk", 
            "text": "\u611f\u8c22\u4f7f\u7528 nRF52840-MDK\uff01  \u672c\u6307\u5357\u5c06\u6307\u5f15\u4f60\u5982\u4f55\u5feb\u901f\u5f00\u59cb nRF52840-MDK \u5f00\u53d1\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5927\u6982\u9700\u8981 20 \u5206\u949f\u3002", 
            "title": "nRF52840-MDK \u5feb\u901f\u5165\u95e8\u6307\u5357"
        }, 
        {
            "location": "/cn/getting-started/#_1", 
            "text": "nRF52840-MDK  USB 3.1 Type-C to USB 2.0 Type-A Male \u6570\u636e\u7ebf", 
            "title": "\u5305\u88c5\u5185\u5bb9"
        }, 
        {
            "location": "/cn/getting-started/#nrf52840-mdk_1", 
            "text": "\u4f7f\u7528\u5305\u88c5\u968f\u9644\u7684 USB 3.1 Type-C \u6570\u636e\u7ebf\uff0c\u5c06 nRF52840-MDK \u8fde\u63a5\u81f3 PC\uff0c\u7eff\u8272\u7535\u6e90\u6307\u793a\u706f\u5c06\u5e38\u4eae\uff0c\u53e6\u5916\u7684\u7eff\u8272 LED \u5e38\u4eae\u8868\u793a\u84dd\u7259\u6b63\u5728\u5e7f\u64ad\uff1a   \u6253\u5f00 PC \u7684\u8d44\u6e90\u6d4f\u89c8\u5668\uff0cnRF52840-MDK \u5c06\u88ab\u8bc6\u522b\u6210\u4e00\u4e2a\u540d\u4e3a  DAPLINK  \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\u8bbe\u5907\uff1a", 
            "title": "\u7b2c\u4e00\u6b65\uff1a\u8fde\u63a5 nRF52840-MDK"
        }, 
        {
            "location": "/cn/getting-started/#_2", 
            "text": "", 
            "title": "\u7b2c\u4e8c\u6b65\uff1a\u914d\u7f6e\u4e32\u53e3\u7ec8\u7aef"
        }, 
        {
            "location": "/cn/getting-started/#windows", 
            "text": "\u5728 Windows \u73af\u5883\u4e0b\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u4e32\u53e3\u9a71\u52a8\uff0c \u70b9\u51fb\u4e0b\u8f7d \u5e76\u5b89\u88c5\u9a71\u52a8\u3002   \u63d0\u793a  \u5bf9\u4e8e Windows 10 \u4ee5\u4e0a\u7cfb\u7edf\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u5b89\u88c5\u9a71\u52a8\u3002   \u4e32\u53e3\u5de5\u5177\u5efa\u8bae\u4f7f\u7528\u514d\u8d39\u7684  PuTTY \uff0c\u76f8\u5173\u8bbe\u7f6e\u5982\u4e0b\uff0c\u4e32\u53e3\u53f7\u53ef\u4ee5\u5728  \u8bbe\u5907\u7ba1\u7406\u5668  \u4e2d\u67e5\u770b\uff1a", 
            "title": "Windows"
        }, 
        {
            "location": "/cn/getting-started/#macos", 
            "text": "macOS \u7528\u6237\u53ef\u76f4\u63a5\u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u7684\u7ec8\u7aef\u5de5\u5177  screen , \u5177\u4f53\u547d\u4ee4\u5982\u4e0b\uff1a  $ screen /dev/cu.usbmodem1412  115200    \u5c0f\u6280\u5de7  \u53ef\u4ee5\u5728\u7ec8\u7aef\u5148\u8f93\u5165  screen /dev/cu.usb \uff0c\u7136\u540e\u6309\u4e0b  tab \uff0c\u8bbe\u5907\u540d\u79f0\u5c06\u81ea\u52a8\u8865\u9f50\u3002  \u6309\u4e0b  Ctrl  +  A \uff0c\u5728\u6309\u4e0b  Ctrl  +  K \uff0c\u5728\u7a97\u53e3\u5e95\u90e8\u4f1a\u51fa\u73b0\u63d0\u793a\u7b26  [y/n] \uff0c\u8f93\u5165  y  \u5373\u53ef\u9000\u51fa\u4e32\u53e3\u7ec8\u7aef\u3002", 
            "title": "macOS"
        }, 
        {
            "location": "/cn/getting-started/#linux", 
            "text": "\u5728 Linux \u73af\u5883\u4e0b\u540c\u6837\u53ef\u4ee5\u4f7f\u7528  screen  \u5de5\u5177\uff0c\u8fd9\u91cc\u4ee5 Ubuntu 16.04 \u4e3a\u4f8b\uff1a  $ sudo apt-get install screen  $ sudo screen /dev/ttyACM0  115200", 
            "title": "Linux"
        }, 
        {
            "location": "/cn/getting-started/#nrf-connect", 
            "text": "\u4ece App Store \u6216 Google Play \u4e0b\u8f7d  nRF Connect  \u5e94\u7528\uff1b   \u63d0\u793a  \u6700\u65b0 Android \u7248\u672c\u7684 nRF Connect \u5e94\u7528\u4e5f\u53ef\u4ee5\u4ece Nordic \u7684  Android-nRF-Connect  \u4e0b\u8f7d\u3002     \u6253\u5f00 app\uff0c\u626b\u63cf\u8bbe\u5907\uff0c\u4f60\u5c06\u770b\u5230\u540d\u4e3a  nRF52840-MDK  \u7684\u8bbe\u5907\u6b63\u5728\u5e7f\u64ad\uff0c\u8fde\u63a5\u8be5\u8bbe\u5907\uff1b   \u84dd\u8272 LED \u4eae\u3001\u7eff\u8272 LED \u706d\uff0c\u8868\u660e\u8bbe\u5907\u4ece\u5e7f\u64ad\u6001\u8fdb\u5165\u8fde\u63a5\u6001\uff0c\u540c\u65f6\u53ef\u4ee5\u89c2\u5bdf\u5230\u8be5\u8bbe\u5907\u80fd\u591f\u63d0\u4f9b\u7684\u670d\u52a1\uff1b  \u6253\u5f00  Nordic Blinky Button  \u5c5e\u6027\uff08 0x1524 \uff09\u7684\u901a\u77e5\uff0c\u6309\u4e0b/\u91ca\u653e\u677f\u5b50\u4e0a\u7684 USER Button\uff0c\u53ef\u89c2\u5bdf\u6309\u94ae\u72b6\u6001\u7684\u6539\u53d8\uff1b  \u5148\u540e\u5bf9  Nordic Blinky LED  \u5c5e\u6027 (0x1525) \u5199\u5165  01  \u3001 00 \uff0c\u53ef\u89c2\u5bdf\u5230 LED \u7684\u72b6\u6001\u53d8\u5316\u3002     \u63d0\u793a  \u8be5\u6f14\u793a demo \u6e90\u7801\u4f4d\u4e8e  ./nrf52840-mdk/examples/nrf5-sdk/ble_app_blinky \u3002", 
            "title": "\u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528 nRF Connect"
        }, 
        {
            "location": "/cn/getting-started/#_3", 
            "text": "nRF52840-MDK \u677f\u4e0a\u96c6\u6210\u4e86 DAPLink \u591a\u529f\u80fd\u8c03\u8bd5\u5668\uff0c\u53ef\u7528\u4e8e\u4e0b\u8f7d\u56fa\u4ef6\u3001\u8c03\u8bd5\u4ee3\u7801\u3001\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u3002\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u4e0b\u8f7d\u65b9\u5f0f\uff1a   \u201c\u62d6\u653e\u201d\u4e0b\u8f7d  \u4f7f\u7528 pyOCD \u4e0b\u8f7d   \u4f60\u53ef\u4ee5\u4f7f\u7528  Heart rate monitor  \u4f5c\u4e3a\u793a\u4f8b\uff0c\u53ef\u4ece\u4ee5\u4e0b\u94fe\u63a5\u83b7\u5f97  hex  \u56fa\u4ef6\u3002  \u4e0b\u8f7d\u56fa\u4ef6", 
            "title": "\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f"
        }, 
        {
            "location": "/cn/getting-started/#_4", 
            "text": "\u5c06 nRF52840-MDK \u8fde\u63a5\u5230 PC\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8bc6\u522b\u5230  DAPLINK  \u53ef\u79fb\u52a8\u78c1\u76d8\uff0c\u76f4\u63a5\u628a  .hex  \u56fa\u4ef6\u62d6\u653e\u5230\u8be5\u78c1\u76d8\u5373\u53ef\u5f00\u59cb\u4e0b\u8f7d\uff0c\u7b49\u5f85\u4e0b\u8f7d\u5b8c\u6210....   \u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u6309\u4e0b\u590d\u4f4d\u6309\u94ae\u4fbf\u53ef\u8fd0\u884c\u65b0\u56fa\u4ef6\u3002   \u63d0\u793a  \u5bf9\u4e8e\u5305\u542b\u84dd\u7259\u534f\u8bae\u6808\uff08SoftDevice\uff09\u7684\u5e94\u7528\uff0c\u9700\u8981\u5148\u4f7f\u7528  mergehex  \u5de5\u5177\u5408\u5e76\u5e94\u7528\u7a0b\u5e8f\u56fa\u4ef6\u548c SoftDevice \u534f\u8bae\u6808\u3002  mergehex  \u5305\u542b\u5728  nRF5x Command Line Tools  \u5de5\u5177\u5305\u4e2d\u3002", 
            "title": "\u201c\u62d6\u653e\u201d\u4e0b\u8f7d"
        }, 
        {
            "location": "/cn/getting-started/#pyocd", 
            "text": "pyOCD  \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, macOS, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002  \u53ef\u4ee5\u901a\u8fc7  pip  \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a  $ pip install --pre -U pyocd  \u6216\u8005\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u5b89\u88c5\u6700\u65b0\u5f00\u53d1\u7248\u672c\uff0c\u4f53\u9a8c\u4e00\u4e9b\u6b63\u5728\u5f00\u53d1\u4e2d\u7684\u65b0\u529f\u80fd\uff1a  $ pip install --pre -U https://github.com/mbedmicro/pyOCD/archive/master.zip   \u6ce8\u610f  \u6709\u7684\u7cfb\u7edf(\u4f8b\u5982 Ubuntu )\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 pyOCD\uff0c\u9700\u8981\u5728\u5b89\u88c5\u547d\u4ee4\u524d\u589e\u52a0  sudo -H  \u8fdb\u884c\u5168\u5c40\u5b89\u88c5\u3002   \u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u53ef\u5b8c\u6210\u56fa\u4ef6\u4e0b\u8f7d\u3001\u64e6\u9664\uff1a  # -se \u8868\u793a\u53ea\u64e6\u9664\u9700\u8981\u7528\u5230\u7684\u533a\u57df \n$ pyocd-flashtool -d debug -t nrf52 -se your-hex-file.hex # \u5982\u679c\u9700\u8981\u6574\u7247\u64e6\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528 -ce \u53c2\u6570 \n$ pyocd-flashtool -d debug -t nrf52 -ce your-hex-file.hex # \u5982\u679c\u53ea\u662f\u60f3\u64e6\u9664\uff0c\u4e0d\u7f16\u7a0b\uff0c\u53ef\u4ee5\u4e0d\u5e26hex\u6587\u4ef6\u53c2\u6570 \n$ pyocd-flashtool -d debug -t nrf52 -ce", 
            "title": "\u4f7f\u7528 pyOCD \u4e0b\u8f7d"
        }, 
        {
            "location": "/cn/getting-started/#_5", 
            "text": "\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u53ef\u4f7f\u7528  nRF Toolbox  app \u9a8c\u8bc1\u65b0\u56fa\u4ef6\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a\u6253\u5f00 nRF Toolbox\uff0c\u9009\u62e9  HRM  \u5de5\u5177\uff0c\u8fde\u63a5  Nordic_HRM  \u8bbe\u5907\uff0c\u5373\u53ef\u67e5\u770b\u5fc3\u7387\u6570\u636e\uff1a", 
            "title": "\u9a8c\u8bc1\u65b0\u56fa\u4ef6"
        }, 
        {
            "location": "/cn/getting-started/#_6", 
            "text": "nRF52840-MDK \u7684\u6240\u6709\u793a\u4f8b\u4ee3\u7801\u53ca\u6587\u6863\u6258\u7ba1\u5728 GitHub  makerdiary/nrf52840-mdk  \u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u81ea\u7531\u4e0b\u8f7d\u6216\u514b\u9686\u5230\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\u4e0b\u4f7f\u7528\uff1a  $ git clone https://github.com/makerdiary/nrf52840-mdk.git", 
            "title": "\u4e0b\u8f7d\u9879\u76ee\u6e90\u7801"
        }, 
        {
            "location": "/cn/getting-started/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/nrf5-sdk/", 
            "text": "nRF5 SDK \nNordic \u5b98\u65b9\u9488\u5bf9 nRF5x \u7cfb\u5217 SoC \u7684\u8f6f\u4ef6\u5f00\u53d1\u5305\n\n\n\n\n\u7b80\u4ecb\n\n\nnRF5 SDK \u662f Nordic \u9488\u5bf9 nRF5x \u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\uff0c\u5305\u542b\u5404\u79cd\u5916\u8bbe\u9a71\u52a8\u3001\u4ee3\u7801\u5e93\u3001\u5e94\u7528\u793a\u4f8b\u3001\u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\u4ee5\u53ca\u5176\u4ed6\u5177\u6709\u4e13\u5229\u7684\u65e0\u7ebf\u534f\u8bae\u6808\u3002\n\n\nnRF5 SDK \u4ee5 \n.zip\n \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u53d1\u5e03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u7531\u9009\u62e9\u5f00\u53d1\u73af\u5883\u3002\n\n\n\u6211\u4eec\u5df2\u7ecf\u4e3a nRF52840-MDK \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u786e\u4fdd\u80fd\u591f\u5229\u7528 nRF5 SDK \u5feb\u901f\u5f00\u53d1\u4f60\u81ea\u5df1\u7684\u5e94\u7528\u3002\n\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u642d\u5efa\u4e00\u4e2a\u57fa\u672c\u7684\u5f00\u53d1\u73af\u5883\uff0c\u63a8\u8350\u4f7f\u7528 GNU Arm Embedded Toolchains\u3002\n\n\n\u642d\u5efa\u5f00\u53d1\u73af\u5883\n\n\n\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u642d\u5efa\u5f00\u53d1\u73af\u5883\uff0c\u5bf9\u4e8e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002\n\n\n\u5b89\u88c5 GNU Arm Embedded Toolchain\n\n\nGNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a\n\n\n\u4e0b\u8f7d\u5de5\u5177\u94fe\n\n\n\u4e0b\u8f7d\u3001\u5b89\u88c5 \n6-2017-q2-update\n \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a\n\n\n# in ~/.bash_profile, add the following script\n\n\nexport\n \nPATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update/bin:\n${\nPATH\n}\n\n\n\n\n\n\u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\n\n\n$ arm-none-eabi-gcc --version\n\n\n\n\n\n\n\u5b89\u88c5 GNU make\n\n\nnRF5 SDK \u4f9d\u8d56\u4e8e makefile \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\u9700\u8981 \nGNU make\n \u5de5\u5177\u6765\u5904\u7406 makefile\u3002\n\n\n\u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982 \nMSYS2\n\u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a\n\n\n\n\n\n\n\u524d\u5f80 \nMSYS2\n \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b\n\n\n\n\n\n\n\u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a\n\n\n$ pacman -Syu\n\n\n\n\n\n\n\n\n\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a\n\n\n$ pacman -Su\n\n\n\n\n\n\n\n\n\u5b89\u88c5 \ngit\n\u3001\nmake\n\u3001\npython2\n\u7b49\u5de5\u5177\uff1a\n\n\n$ pacman -S git make python2\n\n\n\n\n\n\n\n\nLinux \u548c macOS \u7cfb\u7edf\u4e00\u822c\u81ea\u5e26 \nmake\n \u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7 \nmake -v\n \u547d\u4ee4\u67e5\u770b\u8be5\u5de5\u5177\u662f\u5426\u53ef\u7528\u3002\u5bf9\u4e8e\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u9700\u8981\u53e6\u884c\u5b89\u88c5\uff0c\u4f8b\u5982\u5728 Ubuntu \u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a\n\n\n$ sudo apt-get install build-essential checkinstall\n\n\n\n\n\n\n\u5b89\u88c5 nRF5 SDK\n\n\n\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece Nordic \u5b98\u7f51\u4e0b\u8f7d nRF5 SDK\uff0c\u8be5\u8f6f\u4ef6\u5305\u4ee5 \n.zip\n \u538b\u7f29\u5305\u7684\u65b9\u5f0f\u53d1\u5e03\uff0c\u4f8b\u5982 \nnRF5_SDK_v15.0.0_a53641a.zip\n\u3002\n\n\n\u4e0b\u8f7d nRF5 SDK\n\n\n\u4f60\u9700\u8981\u5c06\u8be5\u8f6f\u4ef6\u5305\u89e3\u538b\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\uff0c\u4e00\u822c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n./nrf52840-mdk/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 firmware\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 nrf_sdks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a\n\u2514\u2500\u2500 tools\n\n\n\n\n\u8bbe\u7f6e\u5de5\u5177\u94fe\u8def\u5f84\uff0c\u5bf9\u4e8e Linux \u548c macOS \u4e3b\u8981\u4fee\u6539 \nmakefile.posix\n \u6587\u4ef6\uff0cWindows \u7cfb\u7edf\u5219\u4fee\u6539 \nmakefile.windows\n\uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4f4d\u4e8e\u4ee5\u4e0b\u76ee\u5f55\uff1a\n\n\nnRF5_SDK_15.0.0_a53641a\n/components/toolchain/gcc\n\n\n\n\n\u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\uff08\u4f8b\u5982\uff1a\nSublime\n\uff09\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u5c06 \nGNU_INSTALL_ROOT\n \u8bbe\u7f6e\u4e3a\u524d\u9762\u5b89\u88c5\u7684 GNU Arm Embedded Toolchain \u7684\u76ee\u5f55\uff0c\u53c2\u8003\u8bbe\u7f6e\u5982\u4e0b\uff1a\n\n\nGNU_INSTALL_ROOT :\n=\n \n$(\nHOME\n)\n/gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/\nGNU_VERSION :\n=\n \n6\n.3.1\nGNU_PREFIX :\n=\n arm-none-eabi\n\n\n\n\n\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b\n\n\n\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4ee5 \nblinky\n \u4e3a\u4f8b\uff1a\n\n\n\u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a\n\n\n$ \ncd\n ./nrf52840-mdk/examples/nrf5-sdk/blinky/armgcc/\n\n\n\n\n\u5c06 nRF52840-MDK \u8fde\u63a5\u5230 PC\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u7f16\u8bd1\u548c\u56fa\u4ef6\u4e0b\u8f7d\uff1a\n\n\n$ make flash\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u786e\u4fdd\u4f60\u5df2\u7ecf\u6b63\u786e\u5b89\u88c5 \npyOCD\n\uff0c\u53ef\u4ee5\u6309\u7167 [\n\u4f7f\u7528 pyOCD \u4e0b\u8f7d\n] \u90e8\u5206\u8fdb\u884c\u5b89\u88c5\u3002\n\n\n\n\n\u89c2\u5bdf RGB LED \u662f\u5426\u5f00\u59cb\u95ea\u70c1\uff1a\n\n\n\n\n\u8fd0\u884c\u5e26 SoftDevice \u7684\u793a\u4f8b\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5e26\u5177\u6709 \nBluetooth\n \u534f\u8bae\u6808\u7684\u4f8b\u5b50\uff0c\u5728\u6b64\u4e4b\u524d\u9700\u8981\u5148\u4e0b\u8f7d SoftDevice \u56fa\u4ef6\u3002\u8be5\u56fa\u4ef6\u4ee5 \n.hex\n \u7684\u65b9\u5f0f\u63d0\u4f9b\uff0c\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u76ee\u5f55\u627e\u5230\uff1a\n\n\nSDK path\ncomponents/softdevice/SoftDevice/hex\n\n\n\n\n\u6216\u8005\u76f4\u63a5\u4ece \nnordicsemi.com\n \u7f51\u7ad9\u4e0b\u8f7d\u3002\n\n\n\u6211\u4eec\u5df2\u7ecf\u5728 makefile \u63d0\u4f9b\u4e0b\u8f7d SoftDevice \u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4e0b\u8f7d\uff1a\n\n\n# \u8fd0\u884cflash_softdevice \u53ef\u4ee5\u53ea\u4e0b\u8f7d SoftDevice\n\n$ make flash_softdevice\n\n\n# \u8fd0\u884c flash_all \u53ef\u4ee5\u4e0b\u8f7d SoftDevice \u548c app \u5408\u5e76\u540e\u7684\u56fa\u4ef6\n\n$ make flash_all\n\n\n\n\n\n\n\u66f4\u591a\u793a\u4f8b\n\n\n\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\n\n\nNordic nRF5 SDK\n\n\n\n\n\n\nNordic Semiconductor Infocenter\n\n\n\n\n\n\nmakerdiary/nrf52840-mdk\n\n\n\n\n\n\nGNU Arm Embedded Toolchain\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "nRF5 SDK"
        }, 
        {
            "location": "/cn/nrf5-sdk/#nrf5-sdk-nordic-nrf5x-soc", 
            "text": "", 
            "title": "nRF5 SDK Nordic \u5b98\u65b9\u9488\u5bf9 nRF5x \u7cfb\u5217 SoC \u7684\u8f6f\u4ef6\u5f00\u53d1\u5305"
        }, 
        {
            "location": "/cn/nrf5-sdk/#_1", 
            "text": "nRF5 SDK \u662f Nordic \u9488\u5bf9 nRF5x \u7cfb\u5217\u82af\u7247\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5f00\u53d1\u73af\u5883\uff0c\u5305\u542b\u5404\u79cd\u5916\u8bbe\u9a71\u52a8\u3001\u4ee3\u7801\u5e93\u3001\u5e94\u7528\u793a\u4f8b\u3001\u4f4e\u529f\u8017\u84dd\u7259\u534f\u8bae\u6808\u4ee5\u53ca\u5176\u4ed6\u5177\u6709\u4e13\u5229\u7684\u65e0\u7ebf\u534f\u8bae\u6808\u3002  nRF5 SDK \u4ee5  .zip  \u538b\u7f29\u5305\u7684\u5f62\u5f0f\u53d1\u5e03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fbf\u4e8e\u5f00\u53d1\u8005\u81ea\u7531\u9009\u62e9\u5f00\u53d1\u73af\u5883\u3002  \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52840-MDK \u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u786e\u4fdd\u80fd\u591f\u5229\u7528 nRF5 SDK \u5feb\u901f\u5f00\u53d1\u4f60\u81ea\u5df1\u7684\u5e94\u7528\u3002  \u5728\u6b64\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u642d\u5efa\u4e00\u4e2a\u57fa\u672c\u7684\u5f00\u53d1\u73af\u5883\uff0c\u63a8\u8350\u4f7f\u7528 GNU Arm Embedded Toolchains\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/nrf5-sdk/#_2", 
            "text": "\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u642d\u5efa\u5f00\u53d1\u73af\u5883\uff0c\u5bf9\u4e8e\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002", 
            "title": "\u642d\u5efa\u5f00\u53d1\u73af\u5883"
        }, 
        {
            "location": "/cn/nrf5-sdk/#gnu-arm-embedded-toolchain", 
            "text": "GNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a  \u4e0b\u8f7d\u5de5\u5177\u94fe  \u4e0b\u8f7d\u3001\u5b89\u88c5  6-2017-q2-update  \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a  # in ~/.bash_profile, add the following script  export   PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH }   \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a  $ arm-none-eabi-gcc --version", 
            "title": "\u5b89\u88c5 GNU Arm Embedded Toolchain"
        }, 
        {
            "location": "/cn/nrf5-sdk/#gnu-make", 
            "text": "nRF5 SDK \u4f9d\u8d56\u4e8e makefile \u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\u9700\u8981  GNU make  \u5de5\u5177\u6765\u5904\u7406 makefile\u3002  \u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982  MSYS2 \u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a    \u524d\u5f80  MSYS2  \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b    \u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a  $ pacman -Syu    \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a  $ pacman -Su    \u5b89\u88c5  git \u3001 make \u3001 python2 \u7b49\u5de5\u5177\uff1a  $ pacman -S git make python2    Linux \u548c macOS \u7cfb\u7edf\u4e00\u822c\u81ea\u5e26  make  \u5de5\u5177\uff0c\u53ef\u4ee5\u901a\u8fc7  make -v  \u547d\u4ee4\u67e5\u770b\u8be5\u5de5\u5177\u662f\u5426\u53ef\u7528\u3002\u5bf9\u4e8e\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u9700\u8981\u53e6\u884c\u5b89\u88c5\uff0c\u4f8b\u5982\u5728 Ubuntu \u7cfb\u7edf\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a  $ sudo apt-get install build-essential checkinstall", 
            "title": "\u5b89\u88c5 GNU make"
        }, 
        {
            "location": "/cn/nrf5-sdk/#nrf5-sdk", 
            "text": "\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece Nordic \u5b98\u7f51\u4e0b\u8f7d nRF5 SDK\uff0c\u8be5\u8f6f\u4ef6\u5305\u4ee5  .zip  \u538b\u7f29\u5305\u7684\u65b9\u5f0f\u53d1\u5e03\uff0c\u4f8b\u5982  nRF5_SDK_v15.0.0_a53641a.zip \u3002  \u4e0b\u8f7d nRF5 SDK  \u4f60\u9700\u8981\u5c06\u8be5\u8f6f\u4ef6\u5305\u89e3\u538b\u5230  nrf52840-mdk  \u4ed3\u5e93\uff0c\u4e00\u822c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a  ./nrf52840-mdk/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 firmware\n\u251c\u2500\u2500 docs\n\u251c\u2500\u2500 examples\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 nrf_sdks\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a\n\u2514\u2500\u2500 tools  \u8bbe\u7f6e\u5de5\u5177\u94fe\u8def\u5f84\uff0c\u5bf9\u4e8e Linux \u548c macOS \u4e3b\u8981\u4fee\u6539  makefile.posix  \u6587\u4ef6\uff0cWindows \u7cfb\u7edf\u5219\u4fee\u6539  makefile.windows \uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u4f4d\u4e8e\u4ee5\u4e0b\u76ee\u5f55\uff1a  nRF5_SDK_15.0.0_a53641a /components/toolchain/gcc  \u4f7f\u7528\u6587\u672c\u7f16\u8f91\u5668\uff08\u4f8b\u5982\uff1a Sublime \uff09\u6253\u5f00\u8be5\u6587\u4ef6\uff0c\u5c06  GNU_INSTALL_ROOT  \u8bbe\u7f6e\u4e3a\u524d\u9762\u5b89\u88c5\u7684 GNU Arm Embedded Toolchain \u7684\u76ee\u5f55\uff0c\u53c2\u8003\u8bbe\u7f6e\u5982\u4e0b\uff1a  GNU_INSTALL_ROOT : =   $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-6-2017-q2-update/bin/\nGNU_VERSION : =   6 .3.1\nGNU_PREFIX : =  arm-none-eabi", 
            "title": "\u5b89\u88c5 nRF5 SDK"
        }, 
        {
            "location": "/cn/nrf5-sdk/#_3", 
            "text": "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4ee5  blinky  \u4e3a\u4f8b\uff1a  \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a  $  cd  ./nrf52840-mdk/examples/nrf5-sdk/blinky/armgcc/  \u5c06 nRF52840-MDK \u8fde\u63a5\u5230 PC\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\u7f16\u8bd1\u548c\u56fa\u4ef6\u4e0b\u8f7d\uff1a  $ make flash   \u63d0\u793a  \u786e\u4fdd\u4f60\u5df2\u7ecf\u6b63\u786e\u5b89\u88c5  pyOCD \uff0c\u53ef\u4ee5\u6309\u7167 [ \u4f7f\u7528 pyOCD \u4e0b\u8f7d ] \u90e8\u5206\u8fdb\u884c\u5b89\u88c5\u3002   \u89c2\u5bdf RGB LED \u662f\u5426\u5f00\u59cb\u95ea\u70c1\uff1a", 
            "title": "\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/nrf5-sdk/#softdevice", 
            "text": "\u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5e26\u5177\u6709  Bluetooth  \u534f\u8bae\u6808\u7684\u4f8b\u5b50\uff0c\u5728\u6b64\u4e4b\u524d\u9700\u8981\u5148\u4e0b\u8f7d SoftDevice \u56fa\u4ef6\u3002\u8be5\u56fa\u4ef6\u4ee5  .hex  \u7684\u65b9\u5f0f\u63d0\u4f9b\uff0c\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u76ee\u5f55\u627e\u5230\uff1a  SDK path components/softdevice/SoftDevice/hex  \u6216\u8005\u76f4\u63a5\u4ece  nordicsemi.com  \u7f51\u7ad9\u4e0b\u8f7d\u3002  \u6211\u4eec\u5df2\u7ecf\u5728 makefile \u63d0\u4f9b\u4e0b\u8f7d SoftDevice \u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u4e0b\u8f7d\uff1a  # \u8fd0\u884cflash_softdevice \u53ef\u4ee5\u53ea\u4e0b\u8f7d SoftDevice \n$ make flash_softdevice # \u8fd0\u884c flash_all \u53ef\u4ee5\u4e0b\u8f7d SoftDevice \u548c app \u5408\u5e76\u540e\u7684\u56fa\u4ef6 \n$ make flash_all", 
            "title": "\u8fd0\u884c\u5e26 SoftDevice \u7684\u793a\u4f8b"
        }, 
        {
            "location": "/cn/nrf5-sdk/#_4", 
            "text": "\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230  nrf52840-mdk  \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/nrf5-sdk/#_5", 
            "text": "Nordic nRF5 SDK    Nordic Semiconductor Infocenter    makerdiary/nrf52840-mdk    GNU Arm Embedded Toolchain", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/nrf5-sdk/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/mesh/", 
            "text": "nRF5 SDK for Mesh \nNordic \u5b98\u65b9\u7684 Bluetooth Mesh \u8f6f\u4ef6\u5f00\u53d1\u5305\n\n\n\n\n\u7b80\u4ecb\n\n\nThe nRF5 SDK for Mesh \u662f Nordic \u4e3a\u5728 nRF5 \u7cfb\u5217\u82af\u7247\u4e0a\u8fd0\u884c\u6807\u51c6 \nBluetooth Mesh\n \u534f\u8bae\u800c\u63a8\u51fa\u7684\u8f6f\u4ef6\u5f00\u53d1\u5305\u3002\u5229\u7528\u8be5\u8f6f\u4ef6\u5f00\u53d1\u5305\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u5efa Bluetooth Mesh \u5e94\u7528\u3002\n\n\nmesh \u662f\u4f4e\u529f\u8017\u84dd\u7259\u7684\u4e00\u79cd\u5168\u65b0\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\u9009\u62e9\uff0c\u4e8e2017\u5e74\u590f\u5b63\u63a8\u51fa\u3002\u5b83\u4ee3\u8868\u84dd\u7259\u6280\u672f\u7684\u4e00\u9879\u91cd\u8981\u8fdb\u5c55\uff0c\u5c06\u84dd\u7259\u5b9a\u4f4d\u4e3a\u5305\u62ec\u667a\u80fd\u697c\u5b87\u548c\u5de5\u4e1a\u7269\u8054\u7f51\u5728\u5185\u7684\u5404\u5927\u65b0\u9886\u57df\u548c\u65b0\u7528\u4f8b\u7684\u4e3b\u6d41\u4f4e\u529f\u8017\u65e0\u7ebf\u901a\u4fe1\u6280\u672f\u3002\n\n\n\u5728 mesh \u7f51\u7edc\u4e2d\uff0c\u4e2d\u7ee7\u8282\u70b9\uff08RN\uff09\u4f1a\u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u5305\u4e0d\u65ad\u5e7f\u64ad\u4e0b\u53bb\uff0c\u76f4\u5230\u76ee\u6807\u8282\u70b9\uff08N\uff09\u6536\u5230\u8be5\u6570\u636e\u5305\u4e3a\u6b62\uff0c\u8fd9\u662f\u4e00\u79cd\u79f0\u4e3a\u2018\u6cdb\u6d2a\uff08flooding\uff09\u2019\u7684\u7f51\u7edc\u7ed3\u6784\u3002\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\u4fe1\u606f, \u53ef\u4ee5\u524d\u5f80 \nnordicsemi.com\n\u3002\n\n\n\u5feb\u901f\u5165\u95e8\n\n\n\u4f60\u53ef\u4ee5\u5728 Bluetooth SIG \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Bluetooth Mesh \u7684\u4ecb\u7ecd\uff1a\n\n\n\n\n\n\nBluetooth Mesh \u7b80\u4ecb\n\n\n\n\n\n\nBluetooth Mesh \u534f\u8bae\u89c4\u8303\n\n\n\n\n\n\n\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5feb\u901f\u642d\u5efa\u5f00\u53d1\u73af\u5883\u3001\u7f16\u8bd1\u8fd0\u884c\u7b80\u5355\u7684 mesh \u793a\u4f8b\u3002\n\n\n\u5b89\u88c5 Mesh \u5de5\u5177\u94fe\n\n\n\u5728\u5f00\u59cb\u7f16\u8bd1\u4e4b\u524d\uff0c\u9700\u8981\u5b89\u88c5 \nCMake\n\u3001\nGNU Arm Toolchain\n\u3001\nninja\n \u5de5\u5177\u3002\u8fd9\u91cc\u4ee5 macOS \u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5176\u4ed6\u7cfb\u7edf\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002\n\n\nCMake\n\n\nCMake\n \u662f\u4e2a\u4e00\u4e2a\u5f00\u6e90\u7684\u8de8\u5e73\u53f0\u81ea\u52a8\u5316\u5efa\u6784\u7cfb\u7edf\uff0c\u7528\u6765\u7ba1\u7406\u8f6f\u4ef6\u5efa\u7f6e\u7684\u7a0b\u5e8f\uff0c\u5e76\u4e0d\u76f8\u4f9d\u4e8e\u67d0\u7279\u5b9a\u7f16\u8bd1\u5668\u3002\u5e76\u53ef\u652f\u6301\u591a\u5c42\u76ee\u5f55\u3001\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u591a\u4e2a\u5e93\u3002 \u5b83\u7528\u914d\u7f6e\u6587\u4ef6\u63a7\u5236\u5efa\u6784\u8fc7\u7a0b\u7684\u65b9\u5f0f\u548c Unix \u7684 \nmake\n \u76f8\u4f3c\uff0c\u53ea\u662f CMake \u7684\u914d\u7f6e\u6587\u4ef6\u53d6\u540d\u4e3a \nCMakeLists.txt\n \u3002\n\n\n\u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u9700\u8981 \n3.6\n \u53ca\u4ee5\u4e0a\u7248\u672c CMake\uff0c\u5728 macOS \u7cfb\u7edf\u53ef\u4f7f\u7528 \nbrew\n \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\uff1a\n\n\n$ brew install cmake\n\n\n\n\nGNU Arm Embedded Toolchain\n\n\nGNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a\n\n\n\u4e0b\u8f7d\u5de5\u5177\u94fe\n\n\n\u4e0b\u8f7d\u3001\u5b89\u88c5 \n6-2017-q2-update\n \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a\n\n\n# in ~/.bash_profile, add the following script\n\n\nexport\n \nPATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update/bin:\n${\nPATH\n}\n\n\n\n\n\n\u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\n\n\n$ arm-none-eabi-gcc --version\n\n\n\n\nNinja\n\n\nNinja\n \u662f\u4e00\u4e2a\u5c0f\u5de7\u800c\u9ad8\u6548\u7684\u7f16\u8bd1\u5de5\u5177\uff0c\u76f8\u6bd4\u4e8e \nmake\n\uff0cNinja \u7f16\u8bd1\u901f\u5ea6\u66f4\u5feb\u3001\u66f4\u52a0\u7075\u6d3b\u3002\n\n\n\u5728 macOS \u7cfb\u7edf\u53ef\u4f7f\u7528 \nbrew\n \u547d\u4ee4\u5b89\u88c5 \nNinja\n\uff1a\n\n\n$ brew install ninja\n\n\n\n\n\u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u548c\u793a\u4f8b\n\n\n\u4e0b\u8f7d SDKs\n\n\nnRF5 SDK for Mesh\n \u9700\u8981\u914d\u5408 \nnRF5 SDK\n \u4e00\u8d77\u7f16\u8bd1\uff0c\u53ef\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8fd9\u4e24\u4e2a SDK\uff1a\n\n\n\n\nnRF5 SDK\n\n\nnRF5 SDK for Mesh\n\n\n\n\n\u5c06\u8fd9\u4e24\u4e2a SDK \u89e3\u538b\u5230\u540c\u4e00\u5de5\u4f5c\u76ee\u5f55\uff1a\n\n\n.\n\u251c\u2500\u2500 nrf5_SDK_for_Mesh_v2.0.1_src/\n\u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a/\n\n\n\n\n\u6dfb\u52a0 nRF52840-MDK \u652f\u6301\n\n\n\u4e3a\u4e86\u652f\u6301 nRF52840-MDK \u786c\u4ef6\uff0c\u4f60\u9700\u8981\u5728 \nnRF5_SDK_15.0.0_a53641a/components/boards/\n \u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a \ncustom_board.h\n \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5177\u4f53\u914d\u7f6e\u5982\u4e0b\uff08\u53ef\u4ee5\u4f7f\u7528 \npca10056.h\n \u4f5c\u4e3a\u6a21\u677f\uff09\uff1a\n\n\n#ifndef CUSTOM_BOARD_H\n\n\n#define CUSTOM_BOARD_H\n\n\n\n#ifdef __cplusplus\n\n\nextern\n \nC\n \n{\n\n\n#endif\n\n\n\n#include\n \nnrf_gpio.h\n\n\n\n// LEDs definitions for nRF52840-MDK\n\n\n#define LEDS_NUMBER    3\n\n\n\n#define LED_1          NRF_GPIO_PIN_MAP(0,22)\n\n\n#define LED_2          NRF_GPIO_PIN_MAP(0,23)\n\n\n#define LED_3          NRF_GPIO_PIN_MAP(0,24)\n\n\n#define LED_START      LED_1\n\n\n#define LED_STOP       LED_3\n\n\n\n#define LEDS_ACTIVE_STATE 0\n\n\n\n#define LEDS_LIST { LED_1, LED_2, LED_3 }\n\n\n\n#define LEDS_INV_MASK  LEDS_MASK\n\n\n\n#define BSP_LED_0      22\n\n\n#define BSP_LED_1      23\n\n\n#define BSP_LED_2      24\n\n\n#define BSP_LED_3      25   \n// not on the board\n\n\n\n#define BUTTONS_NUMBER 1\n\n\n\n#define BUTTON_1       NRF_GPIO_PIN_MAP(1,0)\n\n\n#define BUTTON_PULL    NRF_GPIO_PIN_PULLUP\n\n\n\n#define BUTTONS_ACTIVE_STATE 0\n\n\n\n#define BUTTONS_LIST { BUTTON_1 }\n\n\n\n#define BSP_BUTTON_0   BUTTON_1\n\n\n\n\n#define RX_PIN_NUMBER  19\n\n\n#define TX_PIN_NUMBER  20\n\n\n#define CTS_PIN_NUMBER 7  \n// not used\n\n\n#define RTS_PIN_NUMBER 5  \n// not used\n\n\n#define HWFC           false\n\n\n\n#define BSP_QSPI_SCK_PIN   NRF_GPIO_PIN_MAP(1,3)\n\n\n#define BSP_QSPI_CSN_PIN   NRF_GPIO_PIN_MAP(1,6)\n\n\n#define BSP_QSPI_IO0_PIN   NRF_GPIO_PIN_MAP(1,5)\n\n\n#define BSP_QSPI_IO1_PIN   NRF_GPIO_PIN_MAP(1,4)\n\n\n#define BSP_QSPI_IO2_PIN   NRF_GPIO_PIN_MAP(1,2)\n\n\n#define BSP_QSPI_IO3_PIN   NRF_GPIO_PIN_MAP(1,1)\n\n\n\n\n#ifdef __cplusplus\n\n\n}\n\n\n#endif\n\n\n\n#endif \n// CUSTOM_BOARD_H\n\n\n\n\n\n\u7136\u540e\u521b\u5efa\u4e00\u4e2a CMake \u6587\u4ef6 \nnrf52840_mdk.cmake\n\uff0c\u8be5\u6587\u4ef6\u4f4d\u4e8e  \nnrf5_SDK_for_Mesh_v2.0.1_src/CMake/board/\n\uff0c\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\uff1a\n\n\n# nrf52840_mdk.cmake\n\nset\n(\nnrf52840_mdk_DEFINES\n    -DBOARD_CUSTOM\n    -DCONFIG_GPIO_AS_PINRESET\n)\n\n\nset\n(\nnrf52840_mdk_INCLUDE_DIRS\n    \n${\nSDK_ROOT\n}\n/components/boards\n)\n\n\n\n\n\n\u7136\u540e\u4fee\u6539 \nnrf5_SDK_for_Mesh_v2.0.1_src/CMake/Board.cmake\n \u6587\u4ef6\uff0c\u6307\u5b9a nRF52840-MDK \u4e3a \nnrf52840_xxAA\n \u5e73\u53f0\u9ed8\u8ba4\u7684\u677f\u5b50\uff1a\n\n\n...\n\nelseif \n(\nPLATFORM STREQUAL \nnrf52840_xxAA\n)\n\n    set\n(\nBOARD \npca10056\n CACHE STRING \nBoard to build examples for.\n)\n\n    set_property\n(\nCACHE BOARD PROPERTY STRINGS \npca10056\n \nnrf52840_mdk\n)\n\n\n\n\n\n\u4f7f\u7528 Cmake \u6784\u5efa\n\n\n\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728 \nnrf5_SDK_for_Mesh_v2.0.1_src\n \u6839\u76ee\u5f55\u521b\u5efa \nbuild\n \u6587\u4ef6\u5939\uff0c\u7528\u6765\u5b58\u653e \nninja\n \u751f\u6210\u7684\u6587\u4ef6\uff1a\n\n\nnrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $ \ncd\n build\n\n\n\n\n\u63a5\u7740\u4f7f\u7528 \ncmake\n \u5de5\u5177\u6765\u7f16\u8bd1\uff0c\u4f60\u9700\u8981\u6307\u5b9a \nTOOLCHAIN\n\u3001\nPLATFORM\n\u3001\nBOARD\n \u53c2\u6570\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u786e\u5b9a\u53ef\u7528\u7684 \nSOFTDEVICE\n\uff1a\n\n\nbuild $ cmake -G Ninja -DTOOLCHAIN\n=\ngccarmemb -DPLATFORM\n=\nnrf52840_xxAA -DBOARD\n=\nnrf52840_mdk ..\n\n\n\n\n\u751f\u6210\u7f16\u8bd1\u6587\u4ef6\u540e\u4fbf\u53ef\u4f7f\u7528 \nninja\n \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\u6240\u6709\u793a\u4f8b\u548c\u5e93\uff1a\n\n\nbuild $ ninja\n\n\n\n\n\n\n\u4e0b\u8f7d\u8fd0\u884c mesh \u793a\u4f8b\n\n\nCmake \u751f\u6210\u7684\u56fa\u4ef6\u4e0d\u5305\u542b SoftDevice\uff0c\u56e0\u6b64\u9700\u8981\u5148\u4e0b\u8f7d\u5bf9\u5e94\u7684 SoftDevice\u3002SoftDevice \u7684\u7248\u672c\u53ef\u4ee5\u4ece\u524d\u9762\u751f\u6210\u7684 \n.hex\n \u6587\u4ef6\u4e2d\u83b7\u5f97\uff0c\u4f8b\u5982\uff1a\nlight_switch_client_nrf52840_xxAA_s140_6.0.0.hex\n \u5bf9\u5e94\u7684 SoftDevice \u662f \ns140_nrf52_6.0.0_softdevice.hex\n\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -se s140_nrf52_6.0.0_softdevice.hex\n\n\n\n\n\u63a5\u7740\u4fbf\u53ef\u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f\uff1a\n\n\n$ pyocd-flashtool -d debug -t nrf52 -se ./build/examples/light_switch/client/light_switch_client_nrf52840_xxAA_s140_6.0.0.hex\n\n\n\n\n\u5982\u4f55\u521b\u5efa\u65b0\u9879\u76ee\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\uff1a\n\n\n\n\n\u4ece \nexamples\n \u76ee\u5f55\u590d\u5236\u73b0\u6709\u7684\u793a\u4f8b\uff0c\u4f8b\u5982\uff1a\u590d\u5236 \nexamples/beaconing\n\uff0c\u5e76\u6539\u4e3a \nexamples/my_app\n\uff1b\n\n\n\u4fee\u6539 \nexamples/CMakeLists.txt\n \u6587\u4ef6\uff0c\u6dfb\u52a0 \nadd_subdirectory(\nmy_app\n)\n \u547d\u4ee4\uff1b\n\n\n\u4fee\u6539 \nexamples/my_app/CMakeLists.txt\n \u6587\u4ef6\uff0c\u4fee\u6539 target\uff1a\nset(target \nmy_app\n)\n\uff1b\n\n\n\u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff1a\n    \nnrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $ \ncd\n build\nbuild $ cmake -G Ninja -DTOOLCHAIN\n=\ngccarmemb -DPLATFORM\n=\nnrf52840_xxAA -DBOARD\n=\nnrf52840_mdk ..\n\n\n\n\u7f16\u8bd1\u65b0\u7684\u76ee\u6807\u793a\u4f8b\uff1a\n    \nbuild $ ninja my_app\n\n\n\n\n\n\u66f4\u591a\u793a\u4f8b\n\n\n\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK for Mesh \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\n\n\nNordic nRF5 SDK for Mesh\n\n\n\n\n\n\nNordic Semiconductor Infocenter\n\n\n\n\n\n\nmakerdiary/nrf52840-mdk\n\n\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "nRF5 SDK for Mesh"
        }, 
        {
            "location": "/cn/mesh/#nrf5-sdk-for-mesh-nordic-bluetooth-mesh", 
            "text": "", 
            "title": "nRF5 SDK for Mesh Nordic \u5b98\u65b9\u7684 Bluetooth Mesh \u8f6f\u4ef6\u5f00\u53d1\u5305"
        }, 
        {
            "location": "/cn/mesh/#_1", 
            "text": "The nRF5 SDK for Mesh \u662f Nordic \u4e3a\u5728 nRF5 \u7cfb\u5217\u82af\u7247\u4e0a\u8fd0\u884c\u6807\u51c6  Bluetooth Mesh  \u534f\u8bae\u800c\u63a8\u51fa\u7684\u8f6f\u4ef6\u5f00\u53d1\u5305\u3002\u5229\u7528\u8be5\u8f6f\u4ef6\u5f00\u53d1\u5305\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6784\u5efa Bluetooth Mesh \u5e94\u7528\u3002  mesh \u662f\u4f4e\u529f\u8017\u84dd\u7259\u7684\u4e00\u79cd\u5168\u65b0\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\u9009\u62e9\uff0c\u4e8e2017\u5e74\u590f\u5b63\u63a8\u51fa\u3002\u5b83\u4ee3\u8868\u84dd\u7259\u6280\u672f\u7684\u4e00\u9879\u91cd\u8981\u8fdb\u5c55\uff0c\u5c06\u84dd\u7259\u5b9a\u4f4d\u4e3a\u5305\u62ec\u667a\u80fd\u697c\u5b87\u548c\u5de5\u4e1a\u7269\u8054\u7f51\u5728\u5185\u7684\u5404\u5927\u65b0\u9886\u57df\u548c\u65b0\u7528\u4f8b\u7684\u4e3b\u6d41\u4f4e\u529f\u8017\u65e0\u7ebf\u901a\u4fe1\u6280\u672f\u3002  \u5728 mesh \u7f51\u7edc\u4e2d\uff0c\u4e2d\u7ee7\u8282\u70b9\uff08RN\uff09\u4f1a\u5c06\u63a5\u6536\u5230\u7684\u6570\u636e\u5305\u4e0d\u65ad\u5e7f\u64ad\u4e0b\u53bb\uff0c\u76f4\u5230\u76ee\u6807\u8282\u70b9\uff08N\uff09\u6536\u5230\u8be5\u6570\u636e\u5305\u4e3a\u6b62\uff0c\u8fd9\u662f\u4e00\u79cd\u79f0\u4e3a\u2018\u6cdb\u6d2a\uff08flooding\uff09\u2019\u7684\u7f51\u7edc\u7ed3\u6784\u3002   \u4e86\u89e3\u66f4\u591a\u4fe1\u606f, \u53ef\u4ee5\u524d\u5f80  nordicsemi.com \u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/mesh/#_2", 
            "text": "\u4f60\u53ef\u4ee5\u5728 Bluetooth SIG \u4e86\u89e3\u66f4\u591a\u5173\u4e8e Bluetooth Mesh \u7684\u4ecb\u7ecd\uff1a    Bluetooth Mesh \u7b80\u4ecb    Bluetooth Mesh \u534f\u8bae\u89c4\u8303    \u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5feb\u901f\u642d\u5efa\u5f00\u53d1\u73af\u5883\u3001\u7f16\u8bd1\u8fd0\u884c\u7b80\u5355\u7684 mesh \u793a\u4f8b\u3002", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/cn/mesh/#mesh", 
            "text": "\u5728\u5f00\u59cb\u7f16\u8bd1\u4e4b\u524d\uff0c\u9700\u8981\u5b89\u88c5  CMake \u3001 GNU Arm Toolchain \u3001 ninja  \u5de5\u5177\u3002\u8fd9\u91cc\u4ee5 macOS \u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5176\u4ed6\u7cfb\u7edf\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u53ef\u4ee5\u81ea\u884c\u6478\u7d22\u3002", 
            "title": "\u5b89\u88c5 Mesh \u5de5\u5177\u94fe"
        }, 
        {
            "location": "/cn/mesh/#cmake", 
            "text": "CMake  \u662f\u4e2a\u4e00\u4e2a\u5f00\u6e90\u7684\u8de8\u5e73\u53f0\u81ea\u52a8\u5316\u5efa\u6784\u7cfb\u7edf\uff0c\u7528\u6765\u7ba1\u7406\u8f6f\u4ef6\u5efa\u7f6e\u7684\u7a0b\u5e8f\uff0c\u5e76\u4e0d\u76f8\u4f9d\u4e8e\u67d0\u7279\u5b9a\u7f16\u8bd1\u5668\u3002\u5e76\u53ef\u652f\u6301\u591a\u5c42\u76ee\u5f55\u3001\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u591a\u4e2a\u5e93\u3002 \u5b83\u7528\u914d\u7f6e\u6587\u4ef6\u63a7\u5236\u5efa\u6784\u8fc7\u7a0b\u7684\u65b9\u5f0f\u548c Unix \u7684  make  \u76f8\u4f3c\uff0c\u53ea\u662f CMake \u7684\u914d\u7f6e\u6587\u4ef6\u53d6\u540d\u4e3a  CMakeLists.txt  \u3002  \u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u9700\u8981  3.6  \u53ca\u4ee5\u4e0a\u7248\u672c CMake\uff0c\u5728 macOS \u7cfb\u7edf\u53ef\u4f7f\u7528  brew  \u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\uff1a  $ brew install cmake", 
            "title": "CMake"
        }, 
        {
            "location": "/cn/mesh/#gnu-arm-embedded-toolchain", 
            "text": "GNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a  \u4e0b\u8f7d\u5de5\u5177\u94fe  \u4e0b\u8f7d\u3001\u5b89\u88c5  6-2017-q2-update  \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a  # in ~/.bash_profile, add the following script  export   PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH }   \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a  $ arm-none-eabi-gcc --version", 
            "title": "GNU Arm Embedded Toolchain"
        }, 
        {
            "location": "/cn/mesh/#ninja", 
            "text": "Ninja  \u662f\u4e00\u4e2a\u5c0f\u5de7\u800c\u9ad8\u6548\u7684\u7f16\u8bd1\u5de5\u5177\uff0c\u76f8\u6bd4\u4e8e  make \uff0cNinja \u7f16\u8bd1\u901f\u5ea6\u66f4\u5feb\u3001\u66f4\u52a0\u7075\u6d3b\u3002  \u5728 macOS \u7cfb\u7edf\u53ef\u4f7f\u7528  brew  \u547d\u4ee4\u5b89\u88c5  Ninja \uff1a  $ brew install ninja", 
            "title": "Ninja"
        }, 
        {
            "location": "/cn/mesh/#mesh_1", 
            "text": "", 
            "title": "\u7f16\u8bd1 Mesh \u534f\u8bae\u6808\u548c\u793a\u4f8b"
        }, 
        {
            "location": "/cn/mesh/#sdks", 
            "text": "nRF5 SDK for Mesh  \u9700\u8981\u914d\u5408  nRF5 SDK  \u4e00\u8d77\u7f16\u8bd1\uff0c\u53ef\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8fd9\u4e24\u4e2a SDK\uff1a   nRF5 SDK  nRF5 SDK for Mesh   \u5c06\u8fd9\u4e24\u4e2a SDK \u89e3\u538b\u5230\u540c\u4e00\u5de5\u4f5c\u76ee\u5f55\uff1a  .\n\u251c\u2500\u2500 nrf5_SDK_for_Mesh_v2.0.1_src/\n\u2514\u2500\u2500 nRF5_SDK_15.0.0_a53641a/", 
            "title": "\u4e0b\u8f7d SDKs"
        }, 
        {
            "location": "/cn/mesh/#nrf52840-mdk", 
            "text": "\u4e3a\u4e86\u652f\u6301 nRF52840-MDK \u786c\u4ef6\uff0c\u4f60\u9700\u8981\u5728  nRF5_SDK_15.0.0_a53641a/components/boards/  \u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a  custom_board.h  \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5177\u4f53\u914d\u7f6e\u5982\u4e0b\uff08\u53ef\u4ee5\u4f7f\u7528  pca10056.h  \u4f5c\u4e3a\u6a21\u677f\uff09\uff1a  #ifndef CUSTOM_BOARD_H  #define CUSTOM_BOARD_H  #ifdef __cplusplus  extern   C   {  #endif  #include   nrf_gpio.h  // LEDs definitions for nRF52840-MDK  #define LEDS_NUMBER    3  #define LED_1          NRF_GPIO_PIN_MAP(0,22)  #define LED_2          NRF_GPIO_PIN_MAP(0,23)  #define LED_3          NRF_GPIO_PIN_MAP(0,24)  #define LED_START      LED_1  #define LED_STOP       LED_3  #define LEDS_ACTIVE_STATE 0  #define LEDS_LIST { LED_1, LED_2, LED_3 }  #define LEDS_INV_MASK  LEDS_MASK  #define BSP_LED_0      22  #define BSP_LED_1      23  #define BSP_LED_2      24  #define BSP_LED_3      25    // not on the board  #define BUTTONS_NUMBER 1  #define BUTTON_1       NRF_GPIO_PIN_MAP(1,0)  #define BUTTON_PULL    NRF_GPIO_PIN_PULLUP  #define BUTTONS_ACTIVE_STATE 0  #define BUTTONS_LIST { BUTTON_1 }  #define BSP_BUTTON_0   BUTTON_1  #define RX_PIN_NUMBER  19  #define TX_PIN_NUMBER  20  #define CTS_PIN_NUMBER 7   // not used  #define RTS_PIN_NUMBER 5   // not used  #define HWFC           false  #define BSP_QSPI_SCK_PIN   NRF_GPIO_PIN_MAP(1,3)  #define BSP_QSPI_CSN_PIN   NRF_GPIO_PIN_MAP(1,6)  #define BSP_QSPI_IO0_PIN   NRF_GPIO_PIN_MAP(1,5)  #define BSP_QSPI_IO1_PIN   NRF_GPIO_PIN_MAP(1,4)  #define BSP_QSPI_IO2_PIN   NRF_GPIO_PIN_MAP(1,2)  #define BSP_QSPI_IO3_PIN   NRF_GPIO_PIN_MAP(1,1)  #ifdef __cplusplus  }  #endif  #endif  // CUSTOM_BOARD_H   \u7136\u540e\u521b\u5efa\u4e00\u4e2a CMake \u6587\u4ef6  nrf52840_mdk.cmake \uff0c\u8be5\u6587\u4ef6\u4f4d\u4e8e   nrf5_SDK_for_Mesh_v2.0.1_src/CMake/board/ \uff0c\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\uff1a  # nrf52840_mdk.cmake \nset ( nrf52840_mdk_DEFINES\n    -DBOARD_CUSTOM\n    -DCONFIG_GPIO_AS_PINRESET ) \n\nset ( nrf52840_mdk_INCLUDE_DIRS\n     ${ SDK_ROOT } /components/boards )   \u7136\u540e\u4fee\u6539  nrf5_SDK_for_Mesh_v2.0.1_src/CMake/Board.cmake  \u6587\u4ef6\uff0c\u6307\u5b9a nRF52840-MDK \u4e3a  nrf52840_xxAA  \u5e73\u53f0\u9ed8\u8ba4\u7684\u677f\u5b50\uff1a  ...\n\nelseif  ( PLATFORM STREQUAL  nrf52840_xxAA ) \n    set ( BOARD  pca10056  CACHE STRING  Board to build examples for. ) \n    set_property ( CACHE BOARD PROPERTY STRINGS  pca10056   nrf52840_mdk )", 
            "title": "\u6dfb\u52a0 nRF52840-MDK \u652f\u6301"
        }, 
        {
            "location": "/cn/mesh/#cmake_1", 
            "text": "\u8fd9\u91cc\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728  nrf5_SDK_for_Mesh_v2.0.1_src  \u6839\u76ee\u5f55\u521b\u5efa  build  \u6587\u4ef6\u5939\uff0c\u7528\u6765\u5b58\u653e  ninja  \u751f\u6210\u7684\u6587\u4ef6\uff1a  nrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $  cd  build  \u63a5\u7740\u4f7f\u7528  cmake  \u5de5\u5177\u6765\u7f16\u8bd1\uff0c\u4f60\u9700\u8981\u6307\u5b9a  TOOLCHAIN \u3001 PLATFORM \u3001 BOARD  \u53c2\u6570\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u786e\u5b9a\u53ef\u7528\u7684  SOFTDEVICE \uff1a  build $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52840_xxAA -DBOARD = nrf52840_mdk ..  \u751f\u6210\u7f16\u8bd1\u6587\u4ef6\u540e\u4fbf\u53ef\u4f7f\u7528  ninja  \u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\u6240\u6709\u793a\u4f8b\u548c\u5e93\uff1a  build $ ninja", 
            "title": "\u4f7f\u7528 Cmake \u6784\u5efa"
        }, 
        {
            "location": "/cn/mesh/#mesh_2", 
            "text": "Cmake \u751f\u6210\u7684\u56fa\u4ef6\u4e0d\u5305\u542b SoftDevice\uff0c\u56e0\u6b64\u9700\u8981\u5148\u4e0b\u8f7d\u5bf9\u5e94\u7684 SoftDevice\u3002SoftDevice \u7684\u7248\u672c\u53ef\u4ee5\u4ece\u524d\u9762\u751f\u6210\u7684  .hex  \u6587\u4ef6\u4e2d\u83b7\u5f97\uff0c\u4f8b\u5982\uff1a light_switch_client_nrf52840_xxAA_s140_6.0.0.hex  \u5bf9\u5e94\u7684 SoftDevice \u662f  s140_nrf52_6.0.0_softdevice.hex \u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\uff1a  $ pyocd-flashtool -d debug -t nrf52 -se s140_nrf52_6.0.0_softdevice.hex  \u63a5\u7740\u4fbf\u53ef\u4e0b\u8f7d\u5e94\u7528\u7a0b\u5e8f\uff1a  $ pyocd-flashtool -d debug -t nrf52 -se ./build/examples/light_switch/client/light_switch_client_nrf52840_xxAA_s140_6.0.0.hex", 
            "title": "\u4e0b\u8f7d\u8fd0\u884c mesh \u793a\u4f8b"
        }, 
        {
            "location": "/cn/mesh/#_3", 
            "text": "\u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\uff1a   \u4ece  examples  \u76ee\u5f55\u590d\u5236\u73b0\u6709\u7684\u793a\u4f8b\uff0c\u4f8b\u5982\uff1a\u590d\u5236  examples/beaconing \uff0c\u5e76\u6539\u4e3a  examples/my_app \uff1b  \u4fee\u6539  examples/CMakeLists.txt  \u6587\u4ef6\uff0c\u6dfb\u52a0  add_subdirectory( my_app )  \u547d\u4ee4\uff1b  \u4fee\u6539  examples/my_app/CMakeLists.txt  \u6587\u4ef6\uff0c\u4fee\u6539 target\uff1a set(target  my_app ) \uff1b  \u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff1a\n     nrf5_SDK_for_Mesh_v2.0.1_src $ mkdir build\nnrf5_SDK_for_Mesh_v2.0.1_src $  cd  build\nbuild $ cmake -G Ninja -DTOOLCHAIN = gccarmemb -DPLATFORM = nrf52840_xxAA -DBOARD = nrf52840_mdk ..  \u7f16\u8bd1\u65b0\u7684\u76ee\u6807\u793a\u4f8b\uff1a\n     build $ ninja my_app", 
            "title": "\u5982\u4f55\u521b\u5efa\u65b0\u9879\u76ee"
        }, 
        {
            "location": "/cn/mesh/#_4", 
            "text": "\u81f3\u6b64\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u7f16\u8bd1\u8fd0\u884c\u57fa\u4e8e nRF5 SDK for Mesh \u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230  nrf52840-mdk  \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/mesh/#_5", 
            "text": "Nordic nRF5 SDK for Mesh    Nordic Semiconductor Infocenter    makerdiary/nrf52840-mdk", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/mesh/#_6", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/openthread/", 
            "text": "OpenThread \nNest \u53d1\u5e03\u7684 Thread\u00ae \u7684\u5f00\u6e90\u5b9e\u73b0\u65b9\u6848\n\n\n\n\n\u7b80\u4ecb\n\n\nOpenThread\n \u662f \nNest Labs\n \u53d1\u5e03\u7684 \nThread\u00ae\n \u7684\u5f00\u6e90\u5b9e\u73b0\u65b9\u6848\u3002OpenThread \u5df2\u7ecf\u5e7f\u6cdb\u5e94\u7528\u4e8e Nest \u4ea7\u54c1\u4e2d\uff0c\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u5f00\u53d1\u667a\u80fd\u5bb6\u5c45\u4ea7\u54c1\u3002\n\n\nThread\u00ae\n \u662f\u4e00\u79cd\u4e3a\u5bb6\u5ead\u548c\u697c\u5b87\u81ea\u52a8\u5316\u800c\u5efa\u7acb\u7684\u5f00\u653e\u5f0f\u6807\u51c6\uff0c\u4ee5\u5b9e\u73b0\u53ef\u9760\u3001\u5177\u6709\u6210\u672c\u6548\u76ca\u548c\u4f4e\u529f\u8017\u7684\u901a\u4fe1\uff1a\n\n\n\n\n\u5b89\u5168\u7684\u65e0\u7ebf\u7f51\u683c\u7f51\u7edc\u534f\u8bae\n\n\n\u57fa\u4e8e IPv6 \u7684\u5f00\u653e\u534f\u8bae\uff0c\u652f\u6301\u8f7b\u677e\u8fde\u63a5\u5230\u73b0\u6709\u7f51\u7edc\n\n\n\u652f\u6301\u4f7f\u7528\u667a\u80fd\u624b\u673a\u8f7b\u677e\u8c03\u8bd5\n\n\n\u652f\u6301\u5668\u4ef6\u5230\u5668\u4ef6\u3001\u5668\u4ef6\u5230\u79fb\u52a8\u8bbe\u5907\u548c\u5668\u4ef6\u5230\u4e91\u7684\u65e0\u7ebf\u901a\u4fe1\n\n\n\n\n\n\n\u672c\u7ae0\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 nRF52840-MDK \u521b\u5efa\u4e00\u4e2a Thread \u7f51\u7edc\uff0c\u5e76\u5728\u4e0d\u540c\u8282\u70b9\u95f4\u53d1\u9001\u6d88\u606f\u3002\n\n\n\n\n\u5feb\u901f\u5165\u95e8\n\n\n\u5728\u5f00\u53d1 OpenThread \u5e94\u7528\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\u3002\n\n\n\u5b89\u88c5 ARM GNU Toolchain\n\n\nGNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a\n\n\n\u4e0b\u8f7d\u5de5\u5177\u94fe\n\n\n\u4e0b\u8f7d\u3001\u5b89\u88c5 \n6-2017-q2-update\n \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a\n\n\n# in ~/.bash_profile, add the following script\n\n\nexport\n \nPATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update/bin:\n${\nPATH\n}\n\n\n\n\n\n\u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a\n\n\n$ arm-none-eabi-gcc --version\n\n\n\n\n\u5b89\u88c5 pyOCD\n\n\npyOCD\n \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, macOS, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002\n\n\n\u53ef\u4ee5\u901a\u8fc7 \npip\n \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a\n\n\n$ pip install --pre -U pyocd\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u5982\u679c\u5b89\u88c5 pyOCD \u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u53c2\u8003 \u201c\n\u4f7f\u7528 pyOCD \u4e0b\u8f7d\n\u201d \u90e8\u5206\u3002\n\n\n\n\n\u5b89\u88c5 wpantund\n\n\nwpantund\n \u662f\u8fd0\u884c\u5728\u7c7b Unix \u64cd\u4f5c\u7cfb\u7edf\u7528\u6237\u7a7a\u95f4\u7684\u7f51\u7edc\u63a5\u53e3\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4e3a\u4f4e\u529f\u8017\u65e0\u7ebf\u534f\u5904\u7406\u5668\uff08NCP\uff09\u63d0\u4f9b\u672c\u5730 IPv6 \u7f51\u7edc\u63a5\u53e3\uff0c\u7531 Nest Labs \u5f00\u53d1\u548c\u7ef4\u62a4\u3002\n\n\n\u4f60\u53ef\u4ee5\u6309\u7167 \u201c\nwpantund \u5b89\u88c5\u6307\u5357\n\u201d \u5b89\u88c5 \nwpantund\n\u3002\n\n\n\u514b\u9686 OpenThread \u6e90\u7801\n\n\n\u514b\u9686 OpenThread \u6e90\u7801\uff0c\u5e76\u5b89\u88c5\uff1a\n\n\n$ \ncd\n ~\n$ git clone --recursive https://github.com/openthread/openthread.git\n$ \ncd\n openthread\n$ ./bootstrap\n\n\n\n\n\u4fee\u6539\u5e73\u53f0\u914d\u7f6e\u6587\u4ef6 \nopenthread/examples/platforms/nrf52840/platform-config.h\n \u7684\u4e32\u53e3\u914d\u7f6e\u4ee5\u9002\u914d nRF52840-MDK\uff1a\n\n\n/**\n\n\n * @def UART_HWFC\n\n\n *\n\n\n * UART Hardware Flow Control.\n\n\n *\n\n\n * @brief Possible values:\n\n\n *         \\ref NRF_UART_HWFC_ENABLED - HW Flow control enabled.\n\n\n *         \\ref NRF_UART_HWFC_DISABLED - HW Flow control disabled.\n\n\n *\n\n\n */\n\n\n#ifndef UART_HWFC\n\n\n#define UART_HWFC NRF_UART_HWFC_DISABLED\n\n\n#endif\n\n\n\n/**\n\n\n * @def UART_PIN_TX\n\n\n *\n\n\n * UART TX Pin.\n\n\n *\n\n\n */\n\n\n#ifndef UART_PIN_TX\n\n\n#define UART_PIN_TX 20\n\n\n#endif\n\n\n\n/**\n\n\n * @def UART_PIN_RX\n\n\n *\n\n\n * UART RX Pin.\n\n\n *\n\n\n */\n\n\n#ifndef UART_PIN_RX\n\n\n#define UART_PIN_RX 19\n\n\n#endif\n\n\n\n\n\n\u5b8c\u6210\u4ee5\u4e0a\u51c6\u5907\u5de5\u4f5c\uff0c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e0b\u8f7d OpenThread\u3002\n\n\n\u8bbe\u7f6e NCP Joiner\n\n\n\u7f16\u8bd1\u4e0b\u8f7d NCP \u56fa\u4ef6\n\n\nThread \u7f51\u7edc\u4e2d\u7684\u8bbe\u5907\u4f7f\u7528 \nJoiner\n \u89d2\u8272\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u8ba4\u8bc1\u548c\u8bb8\u53ef\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u4e3a nRF52840-MDK \u7f16\u8bd1\u4e0b\u8f7d\u5177\u6709 \nJoiner\n \u529f\u80fd\u7684\u56fa\u4ef6\u3002\n\n\n\n\n\u63d0\u793a\n\n\n\u6bcf\u6b21\u7f16\u8bd1\u4e4b\u524d\u5efa\u8bae\u4f7f\u7528 \nmake clean\n \u6e05\u9664\u524d\u9762\u5df2\u7ecf\u7f16\u8bd1\u8fc7\u7684\u7248\u672c\u3002\n\n\n\n\n$ \ncd\n ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840 \nJOINER\n=\n1\n\n\n\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\n\n\n\u5982\u679c\u9700\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7f16\u8bd1\u914d\u7f6e OpenThread \u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u201c\nBuilding OpenThread\n\u201d\u3002\n\n\n\n\n\u5207\u6362\u5230\u8f93\u51fa\u76ee\u5f55\uff0c\u5c06 OpenThread FTD NCP \u4e8c\u8fdb\u5236\u6587\u4ef6\u8f6c\u6362\u4e3a hex \u6587\u4ef6\uff1a\n\n\n$ \ncd\n ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-ncp-ftd ot-ncp-ftd.hex\n\n\n\n\n\u5c06 nRF52840-MDK \u8fde\u63a5\u5230 PC\uff0c\u4f7f\u7528 \npyocd-flashtool -l\n \u83b7\u53d6\u8be5\u677f\u5b50\u7684 \nboardId\n:\n\n\n$ pyocd-flashtool -l\n\nWARNING:root:Unsupported board found \n1026\n\n\n0\n \n=\n Unknown Board \n[\ncortex_m\n]\n \nboardId\n \n=\n 10260000083ab20300000000000000000000000097969902\n\n\n\n\n\u4f7f\u7528\u8be5 \nboardId\n \u4e0b\u8f7d\u524d\u9762\u7f16\u8bd1\u5b8c\u6210\u7684 OpenThread NCP FTD hex \u6587\u4ef6\uff1a\n\n\n$ pyocd-flashtool -t nrf52 -b 10260000083ab20300000000000000000000000097969902 -ce ot-ncp-ftd.hex\n\n\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u5c06\u8be5\u677f\u5b50\u6807\u8bb0\u4e3a \nNCP\n\uff0c\u4ee5\u907f\u514d\u4e0e\u540e\u9762\u5176\u4ed6\u89d2\u8272\u7684\u8bbe\u5907\u6df7\u6dc6\u3002\n\n\n\n\n\u914d\u7f6e wpantund\n\n\n\u5728 NCP \u7684\u8bbe\u8ba1\u4e2d\uff0c\u4f7f\u7528 \nwpantund\n \u5de5\u5177\u6765\u8fde\u63a5\u548c\u7ba1\u7406 Thread \u8bbe\u5907\u3002 \n\n\n\u5728\u547d\u4ee4\u884c\u7ec8\u7aef\u4e2d\uff0c\u542f\u52a8 \nwpantund\n \u3001\u521b\u5efa \nutun7\n \u63a5\u53e3\u5e76\u4f7f\u80fd log \u4fe1\u606f\u8f93\u51fa\uff1a\n\n\n$ sudo /usr/local/sbin/wpantund -o Config:NCP:SocketPath /dev/cu.usbmodem14112  \n\\\n\n        -o Config:TUN:InterfaceName utun7 \n\\\n\n        -o Daemon:SyslogMask \n -info\n\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u628a\u4e0a\u9762\u76f8\u5173\u7684\u914d\u7f6e\u5199\u5230 \n/etc/wpantund.conf\n \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u91cd\u65b0\u914d\u7f6e wpantund\u3002\n\n\n\n\n\u5982\u679c\u914d\u7f6e\u6210\u529f\uff0c\u5c06\u4f1a\u6709\u4ee5\u4e0b\u7c7b\u4f3c\u4fe1\u606f\u8f93\u51fa\uff1a\n\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Starting wpantund \n0\n.08.00d \n(\nJun  \n9\n \n2018\n \n00\n:31:51\n)\n . . .\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n:  \nSOURCE_VERSION\n \n=\n \n0\n.07.01-217-g86d29d6\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n:  \nBUILD_VERSION\n \n=\n \n0\n.07.01-217-g86d29d6\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Configuration file \n/etc/wpantund.conf\n read.\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Ready. Using DBUS bus \n:1.2\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Running as root without dropping privileges!\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: State change: \nuninitialized\n -\n \noffline\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: NCP is running \nOPENTHREAD/20170716-00584-ge4f5f240-dirty; NRF52840; Jun  8 2018 23:36:19\n\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Driver is running \n0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51)\n\n\n1\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Network is not joinable\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Resetting interface\n(\ns\n)\n. . .\nJun  \n9\n \n01\n:29:49  wpantund\n[\n12257\n]\n \nNotice\n: Finished initializing NCP\n\n\n\n\n\u4fdd\u7559\u8fd9\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u67e5\u770b\u8f93\u51fa\u7684 log \u4fe1\u606f\u4ee5\u4fbf\u5b9a\u4f4d\u95ee\u9898\u3002\n\n\n\u4f7f\u7528\u53e6\u5916\u7684\u5de5\u5177 \nwpanctl\n \u6765\u63a7\u5236\u7ba1\u7406 \nNCP\n \u8bbe\u5907\uff1a\n\n\n$ sudo /usr/local/bin/wpanctl -I utun7\nwpanctl:utun7\n\n\n\n\n\n\u9a8c\u8bc1 NCP \u662f\u5426\u5de5\u4f5c\n\n\n\u4f7f\u7528 \nstatus\n \u547d\u4ee4\u9a8c\u8bc1 NCP \u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a\n\n\n\n\n\u8bbe\u7f6e FTD \u8bbe\u5907\n\n\n\u53e6\u5916\u4e24\u4e2a nRF52840-MDK \u5c06\u88ab\u914d\u7f6e\u4e3a FTD \u8bbe\u5907\uff08Full Thread Devices\uff09\uff0c\u8fd9\u7c7b\u8bbe\u5907\u4e0a\u8fd0\u884c OpenThread CLI \u56fa\u4ef6\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbe\u5907\u7684\u4e32\u53e3\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\u7ba1\u7406\u3002\n\n\n\u8fd9\u4e24\u4e2a\u8bbe\u5907\u4e00\u4e2a\u914d\u7f6e\u4e3a \nCommissioner\n \u89d2\u8272\uff0c\u7528\u4e8e\u5728 Thread \u7f51\u7edc\u4e2d\u8ba4\u8bc1\u548c\u8bb8\u53ef\u5176\u4ed6\u8bbe\u5907\uff1b\u53e6\u5916\u4e00\u4e2a\u914d\u7f6e\u4e3a \nJoiner\n \u89d2\u8272\uff0c\u53ef\u4ee5\u88ab \nCommissioner\n \u5b89\u5168\u5730\u8ba4\u8bc1\u548c\u8bb8\u53ef\u3002\n\n\n\u7f16\u8bd1\u4e0b\u8f7d CLI \u56fa\u4ef6\n\n\n\u4e3a nRF52840-MDK \u7f16\u8bd1 \nCommissioner\n \u548c \nJoiner\n \u89d2\u8272\u7684\u56fa\u4ef6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u540c\u65f6\u4f7f\u80fd\u8fd9\u4e24\u4e2a\u5b8f\uff1a\n\n\n$ \ncd\n ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840 \nCOMMISSIONER\n=\n1\n \nJOINER\n=\n1\n\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u4e3a\u4e86\u907f\u514d\u5197\u4f59\uff0c\u5efa\u8bae\u5355\u4e00\u89d2\u8272\u7684\u8bbe\u5907\u4f7f\u80fd\u7279\u5b9a\u7684\u5b8f\uff0c\u4f8b\u5982\uff1a\u53ea\u4f5c\u4e3a \nJoiner\n \u89d2\u8272\u7684\u8bbe\u5907\uff0c\u53ea\u5f00\u542f \nJOINER=1\n \u7684\u3002\n\n\n\n\n\u5207\u6362\u5230\u8f93\u51fa\u76ee\u5f55\uff0c\u5c06\u4e8c\u8fdb\u5236\u6587\u4ef6\u8f6c\u6362\u4e3a hex \u6587\u4ef6\uff1a\n\n$ \ncd\n ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-cli-ftd ot-cli-ftd.hex\n\n\n\n\u8fde\u63a5 nRF52840-MDK\uff0c\u70e7\u5f55\u56fa\u4ef6\uff1a\n\n\n$ pyocd-flashtool -l\nWARNING:root:Unsupported board found \n1026\n\nWARNING:root:Unsupported board found \n1026\n\n\n0\n \n=\n Unknown Board \n[\ncortex_m\n]\n \nboardId\n \n=\n 10260000083ac27f00000000000000000000000097969902\n\n1\n \n=\n Unknown Board \n[\ncortex_m\n]\n \nboardId\n \n=\n 10260000083ab20300000000000000000000000097969902\n\n$ pyocd-flashtool -t nrf52 -b 10260000083ac27f00000000000000000000000097969902 -ce ot-cli-ftd.hex\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u5c06\u8be5\u677f\u5b50\u6807\u8bb0\u4e3a \nCommissioner\n\uff0c\u4ee5\u907f\u514d\u4e0e\u5176\u4ed6\u89d2\u8272\u7684\u8bbe\u5907\u6df7\u6dc6\u3002\n\n\n\n\n\u9a8c\u8bc1 CLI \u662f\u5426\u5de5\u4f5c\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u4f7f\u7528 \nipaddr\n \u67e5\u770b\u8bbe\u5907 IP\uff1a\n\n\n$ screen /dev/cu.usbmodem142112 \n115200\n\n\n\n\n\n ipaddr\nfd11:2233:4455:0:99ea:1fe9:acd6:d384\nfe80:0:0:0:2003:a240:810f:1598\nDone\n\n\n\n\n\u8bbe\u7f6e FTD Joiner\n\n\n\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u4e3a\u53e6\u5916\u4e00\u4e2a nRF52840-MDK \u70e7\u5f55 \not-cli-ftd.hex\n \u56fa\u4ef6\uff0c\u5c06\u5176\u914d\u7f6e\u4e3a \nFTD Joiner\n \u8bbe\u5907\uff0c\u5e76\u505a\u597d\u6807\u8bb0\u3002\n\n\n\u6253\u5f00\u4e32\u53e3\uff0c\u4f7f\u7528 \nipaddr\n \u67e5\u770b\u8bbe\u5907 IP\uff1a\n\n\n$ screen /dev/cu.usbmodem142412 \n115200\n\n\n\n\n\n ipaddr\nfe80:0:0:0:d079:7d86:6413:4f4e\nfd11:2233:4455:0:e839:eb52:f7ec:74e3\nDone\n\n\n\n\n\u5efa\u7acb Thread \u7f51\u7edc\n\n\n\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5efa\u7acb\u4e00\u4e2a Thread \u7f51\u7edc\uff0c\u5728 \nFTD Commissioner\n \u8bbe\u7f6e\u914d\u7f6e\u7a97\u53e3\uff0c\u5f00\u59cb\u914d\u7f6e\u8be5\u7f51\u7edc\u53c2\u6570\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n networkname makerdiary\nDone\n\n extpanid \n1122334455667788\n\nDone\n\n panid 0x1122\nDone\n\n masterkey \n11223344556677881122334455667788\n\nDone\n\n ifconfig up\nDone\n\n thread start\nDone\n\n\n\n\n\u8fc7\u4e00\u4f1a\uff0c\u67e5\u770b\u8be5\u8bbe\u5907\u72b6\u6001\uff0c\u5b83\u5c06\u6210\u4e3a \nLeader\n \u89d2\u8272\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 \nrloc16\n \u67e5\u770b\u5176 RLOC16 \u5730\u5740\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n state\nleader\nDone\n\n rloc16\n\n3400\n\nDone\n\n\n\n\n\u68c0\u67e5\u8be5\u8bbe\u5907\u7684 IPv6\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00        \n# Leader Anycast Locator (ALOC)\n\nfd11:2233:4455:0:0:ff:fe00:3400        \n# Routing Locator (RLOC)\n\nfd11:2233:4455:0:99ea:1fe9:acd6:d384   \n# Mesh-Local EID (ML-EID)\n\nfe80:0:0:0:2003:a240:810f:1598         \n# Link-Local Address (LLA)\n\nDone\n\n\n\n\n\n\nTip\n\n\n\u4e00\u4e2a Thread \u8bbe\u5907\u53ef\u4ee5\u6709\u591a\u4e2a IPv6 \u5730\u5740\uff0c\u53ef\u4ee5\u901a\u8fc7 \u201c\nIPv6 Addressing\n\u201d \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\u3002\n\n\n\n\n\u8fd9\u65f6\uff0c\u4e00\u4e2a\u540d\u4e3a \nmakerdiary\n \u7684 Thread \u7f51\u7edc\u5df2\u7ecf\u5efa\u7acb\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u5176\u4ed6\u8bbe\u5907\u53d1\u73b0\uff0c\u53ef\u5728 \nNCP Joiner\n \u548c \nFTD Joiner\n \u7684 \nwpanctl\n \u7a97\u53e3\u4f7f\u7528 \nscan\n \u547d\u4ee4\u626b\u9762\u53d1\u73b0\u7f51\u7edc\uff1a\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n scan\n   \n|\n Joinable \n|\n NetworkName        \n|\n PAN ID \n|\n Ch \n|\n XPanID           \n|\n HWAddr           \n|\n RSSI\n---+----------+--------------------+--------+----+------------------+------------------+------\n \n1\n \n|\n       NO \n|\n \nmakerdiary\n       \n|\n 0x1122 \n|\n \n11\n \n|\n \n1122334455667788\n \n|\n 2203A240810F1598 \n|\n  -59\n\n\n\n\n## FTD Joiner ##\n\n----------------\n\n\n scan\n\n|\n J \n|\n Network Name     \n|\n Extended PAN     \n|\n PAN  \n|\n MAC Address      \n|\n Ch \n|\n dBm \n|\n LQI \n|\n\n+---+------------------+------------------+------+------------------+----+-----+-----+\n\n \n|\n \n0\n \n|\n makerdiary       \n|\n \n1122334455667788\n \n|\n \n1122\n \n|\n 2203a240810f1598 \n|\n \n11\n \n|\n -32 \n|\n \n244\n \n|\n\nDone\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9 \nNCP Joiner\n \u52a0\u5165\u5230\u8be5\u7f51\u7edc\u4e2d\uff1a\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n setprop Network:Key \n11223344556677881122334455667788\n\nwpanctl:utun7\n join \n1\n\nJoining \nmakerdiary\n \n1122334455667788\n as node \ntype\n \nend-device\n\nSuccessfully Joined!\n\n\n\n\n\u4f7f\u7528 \nstatus\n \u67e5\u770b\u72b6\u6001\uff0c\u8be5\u8bbe\u5907\u5df2\u7ecf\u6210\u529f\u52a0\u5165\u5e76\u5206\u914d\u4e86\u5bf9\u5e94\u7684 IPv6 \u5730\u5740\uff1a \n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n status\n\nutun7\n \n=\n \n[\n\n    \nNCP:State\n \n=\n \nassociated\n\n    \nDaemon:Enabled\n \n=\n \ntrue\n\n    \nNCP:Version\n \n=\n \nOPENTHREAD/20170716-00650-g631557e8-dirty; NRF52840; Jun  9 2018 15:45:03\n\n    \nDaemon:Version\n \n=\n \n0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51)\n\n    \nConfig:NCP:DriverName\n \n=\n \nspinel\n\n    \nNCP:HardwareAddress\n \n=\n \n[\n9019EC5D617D7AAB\n]\n\n    \nNCP:Channel\n \n=\n \n11\n\n    \nNetwork:NodeType\n \n=\n \nend-device\n\n    \nNetwork:Name\n \n=\n \nmakerdiary\n\n    \nNetwork:XPANID\n \n=\n 0x1122334455667788\n    \nNetwork:PANID\n \n=\n 0x1122\n    \nIPv6:LinkLocalAddress\n \n=\n \nfe80::60bd:ff84:2121:344d\n\n    \nIPv6:MeshLocalAddress\n \n=\n \nfd11:2233:4455::f:b5e:169b:b875\n\n    \nIPv6:MeshLocalPrefix\n \n=\n \nfd11:2233:4455::/64\n\n    \ncom.nestlabs.internal:Network:AllowingJoin\n \n=\n \nfalse\n\n\n]\n\n\n\n\n\n\u83b7\u53d6 \nNCP Joiner\n \u7684 RLOC16 \u5730\u5740\uff1a\n\n\n## NCP Joiner ##\n\n----------------\n\nwpanctl:utun7\n getprop Thread:RLOC16\nThread:RLOC16 \n=\n 0x3403\n\n\n\n\n\u56de\u5230 \nFTD Commissioner\n\uff0c\u53ef\u4ee5\u67e5\u770b \nrouter table\n \u548c \nchild table\n\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n router table\n\n|\n ID \n|\n RLOC16 \n|\n Next Hop \n|\n Path Cost \n|\n LQ In \n|\n LQ Out \n|\n Age \n|\n Extended MAC     \n|\n\n+----+--------+----------+-----------+-------+--------+-----+------------------+\n\n|\n \n13\n \n|\n 0x3400 \n|\n       \n63\n \n|\n         \n0\n \n|\n     \n0\n \n|\n      \n0\n \n|\n   \n0\n \n|\n 2203a240810f1598 \n|\n\n\nDone\n\n child table\n\n|\n ID  \n|\n RLOC16 \n|\n Timeout    \n|\n Age        \n|\n LQ In \n|\n C_VN \n|\nR\n|\nS\n|\nD\n|\nN\n|\n Extended MAC     \n|\n\n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+\n\n|\n   \n3\n \n|\n 0x3403 \n|\n        \n240\n \n|\n         \n66\n \n|\n     \n3\n \n|\n   \n86\n \n|\n1\n|\n1\n|\n1\n|\n1\n|\n 62bdff842121344d \n|\n\n\nDone\n\n\n\n\n\u4f7f\u7528 \nping\n \u547d\u4ee4\u68c0\u67e5\u8fde\u63a5\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n ping fd11:2233:4455::f:b5e:169b:b875\n\n \n8\n bytes from fd11:2233:4455:0:f:b5e:169b:b875: \nicmp_seq\n=\n2\n \nhlim\n=\n64\n \ntime\n=\n35ms\n\n\n\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u5177\u6709\u4e24\u4e2a\u8282\u70b9\u7684 Thread \u7f51\u7edc\uff0c\u5176\u7f51\u7edc\u62d3\u6251\u5982\u4e0b\uff1a\n\n\n\n\n\u8bb8\u53ef FTD Joiner\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8ba9 \nFTD Joiner\n \u52a0\u5165\u5230 \nmakerdiary\n \u7f51\u7edc\u4e2d\u3002\n\n\n\u5148\u5728 \nFTD Joiner\n \u4e2d\u626b\u63cf\u7f51\u7edc\uff1a\n\n\n## FTD Joiner ##\n----------------\n\n\n scan\n| J | Network Name     | Extended PAN     | PAN  | MAC Address      | Ch | dBm | LQI |\n+---+------------------+------------------+------+------------------+----+-----+-----+\n\n | 0 | makerdiary       | 1122334455667788 | 1122 | 2203a240810f1598 | 11 | -32 | 244 |\nDone\n\n\n\n\nJ\n \u5217\u7684\u503c\u4e3a \n0\n\uff0c\u8868\u793a\u8be5\u8bbe\u5907\u672a\u88ab\u8bb8\u53ef\u52a0\u5165\u5230 \nmakerdiary\n \u4e2d\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6f14\u793a\u5982\u4f55\u8bb8\u53ef \nFTD Joiner\n \u52a0\u5165\u5230\u7f51\u7edc\u4e2d\u3002\n\n\n\u5148\u67e5\u770b \nFTD Joiner\n \u7684 \neui64\n\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n eui64\n31ae3e8e7b87cfd6\nDone\n\n\n\n\n\u5728 \nFTD Commissioner\n \u5bf9\u8be5 \neui64\n \u8fdb\u884c\u8bb8\u53ef\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n commissioner start\nDone\n\n commissioner joiner add 31ae3e8e7b87cfd6 J01NME\nDone\n\n\n\n\n\u56de\u5230 \nFTD Joiner\n\uff0c\u518d\u6b21\u626b\u63cf\u7f51\u7edc\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n scan\n\n|\n J \n|\n Network Name     \n|\n Extended PAN     \n|\n PAN  \n|\n MAC Address      \n|\n Ch \n|\n dBm \n|\n LQI \n|\n\n+---+------------------+------------------+------+------------------+----+-----+-----+\n\n \n|\n \n1\n \n|\n makerdiary       \n|\n \n1122334455667788\n \n|\n \n1122\n \n|\n 2203a240810f1598 \n|\n \n11\n \n|\n -32 \n|\n \n244\n \n|\n\nDone\n\n\n\n\n\u53ef\u53d1\u73b0 \nJ\n \u72b6\u6001\u5df2\u53d8\u6210 \n1\n\uff0c\u8868\u793a\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u8ba9\u8be5\u8bbe\u5907\u52a0\u5165\u5230\u7f51\u7edc\u4e2d\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n ifconfig up\nDone\n\n joiner start J01NME\nDone\n\n\n\n\n\u7b49\u5f85\u4e00\u4f1a\uff0c\u4f1a\u53d1\u73b0\u663e\u793a\u662f\u5426\u52a0\u5165\u6210\u529f\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\nJoin success\n\n\n\n\n\u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u542f\u52a8 \nFTD Joiner\n \u4e86\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n thread start\nDone\n\n state\nchild\nDone\n\n rloc16\n\n3404\n\nDone\n\n\n\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u5728 \nFTD Commissioner\n \u4e2d\u68c0\u67e5 \nrouter table\n \u548c \nchild table\n\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n router table\n\n|\n ID \n|\n RLOC16 \n|\n Next Hop \n|\n Path Cost \n|\n LQ In \n|\n LQ Out \n|\n Age \n|\n Extended MAC     \n|\n\n+----+--------+----------+-----------+-------+--------+-----+------------------+\n\n|\n \n13\n \n|\n 0x3400 \n|\n       \n63\n \n|\n         \n0\n \n|\n     \n0\n \n|\n      \n0\n \n|\n   \n0\n \n|\n 2203a240810f1598 \n|\n\n\nDone\n\n child table\n\n|\n ID  \n|\n RLOC16 \n|\n Timeout    \n|\n Age        \n|\n LQ In \n|\n C_VN \n|\nR\n|\nS\n|\nD\n|\nN\n|\n Extended MAC     \n|\n\n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+\n\n|\n   \n3\n \n|\n 0x3403 \n|\n        \n240\n \n|\n        \n231\n \n|\n     \n3\n \n|\n   \n86\n \n|\n1\n|\n1\n|\n1\n|\n1\n|\n 62bdff842121344d \n|\n\n\n|\n   \n4\n \n|\n 0x3404 \n|\n        \n240\n \n|\n         \n49\n \n|\n     \n3\n \n|\n   \n88\n \n|\n1\n|\n1\n|\n1\n|\n1\n|\n 7a2755cf47e45907 \n|\n\n\nDone\n\n\n\n\n\u8fd9\u65f6\uff0c\u6211\u4eec\u5f97\u5230\u7684\u7f51\u7edc\u62d3\u6251\u5982\u4e0b\u56fe\uff1a\n\n\n\n\n\u53d1\u9001 UDP \u6d88\u606f\n\n\n\u6210\u529f\u521b\u5efa Thread \u7f51\u7edc\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u4f7f\u7528 UDP \u534f\u8bae\u5728\u8282\u70b9\u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u6d88\u606f\u3002\n\n\n\u83b7\u53d6 \nFTD Joiner\n \u7684 Mesh-Local EID \u5730\u5740\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00        \n# Leader Anycast Locator (ALOC)\n\nfd11:2233:4455:0:0:ff:fe00:f400        \n# Routing Locator (RLOC)\n\nfe80:0:0:0:7827:55cf:47e4:5907         \n# Link-Local Address (LLA)\n\nfd11:2233:4455:0:e839:eb52:f7ec:74e3   \n# Mesh-Local EID (ML-EID)\n\nDone\n\n\n\n\n\u542f\u52a8 UDP\uff0c\u5e76\u7ed1\u5b9a \n1212\n \u7aef\u53e3\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n udp open\nDone\n\n udp \nbind\n :: \n1212\n\n\n\n\n\n\u56de\u5230 \nFTD Commissioner\n\uff0c\u542f\u52a8 UDP\uff0c\u7136\u540e\u8fde\u63a5 \nFTD Jonier\n\uff1a\n\n\n## FTD Commissioner ##\n----------------------\n\n\n udp open\nDone\n\n udp connect fd11:2233:4455:0:e839:eb52:f7ec:74e3 1212\nDone\n\n\n\n\n\u8fde\u63a5\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u53d1\u9001 UDP \u6d88\u606f\uff1a\n\n\n## FTD Commissioner ##\n\n----------------------\n\n\n udp send hello-openthread\nDone\n\n\n\n\n\u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u5728 \nFTD Joiner\n \u6536\u5230 UDP \u6d88\u606f\uff1a\n\n\n## FTD Joiner ##\n\n----------------\n\n\n \n16\n bytes from fd11:2233:4455:0:0:ff:fe00:3400 \n49153\n hello-openthread\n\n\n\n\n\u66f4\u591a\u793a\u4f8b\n\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u4f7f\u7528 nRF52840-MDK \u5efa\u7acb Thread \u7f51\u7edc\uff0c\u5e76\u6210\u529f\u5728\u8282\u70b9\u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u6d88\u606f\u3002\n\n\n\u540e\u7eed\u66f4\u591a\u5e94\u7528\u793a\u4f8b\u4f1a\u66f4\u65b0\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\nBuild a Thread network with nRF52840 boards and OpenThread\n - \u6db5\u76d6\u672c\u6587\u63d0\u5230\u7684\u6240\u6709 Thread \u7f51\u7edc\u6784\u5efa\u6b65\u9aa4\n\n\nopenthread.io\n\n\ngithub.com/openthread\n\n\nThread Primer\n \u2014 \u6db5\u76d6\u672c\u6587\u63d0\u5230\u7684\u6240\u6709 Thread \u76f8\u5173\u7684\u6982\u5ff5\n\n\nOpenThread CLI reference\n\n\nOpenThread UDP CLI reference\n\n\nwpanctl properties reference\n\n\nOpenThread UDP API reference\n\n\nGNU Screen quick reference\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "OpenThread"
        }, 
        {
            "location": "/cn/openthread/#openthread-nest-thread", 
            "text": "", 
            "title": "OpenThread Nest \u53d1\u5e03\u7684 Thread\u00ae \u7684\u5f00\u6e90\u5b9e\u73b0\u65b9\u6848"
        }, 
        {
            "location": "/cn/openthread/#_1", 
            "text": "OpenThread  \u662f  Nest Labs  \u53d1\u5e03\u7684  Thread\u00ae  \u7684\u5f00\u6e90\u5b9e\u73b0\u65b9\u6848\u3002OpenThread \u5df2\u7ecf\u5e7f\u6cdb\u5e94\u7528\u4e8e Nest \u4ea7\u54c1\u4e2d\uff0c\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u5f00\u53d1\u667a\u80fd\u5bb6\u5c45\u4ea7\u54c1\u3002  Thread\u00ae  \u662f\u4e00\u79cd\u4e3a\u5bb6\u5ead\u548c\u697c\u5b87\u81ea\u52a8\u5316\u800c\u5efa\u7acb\u7684\u5f00\u653e\u5f0f\u6807\u51c6\uff0c\u4ee5\u5b9e\u73b0\u53ef\u9760\u3001\u5177\u6709\u6210\u672c\u6548\u76ca\u548c\u4f4e\u529f\u8017\u7684\u901a\u4fe1\uff1a   \u5b89\u5168\u7684\u65e0\u7ebf\u7f51\u683c\u7f51\u7edc\u534f\u8bae  \u57fa\u4e8e IPv6 \u7684\u5f00\u653e\u534f\u8bae\uff0c\u652f\u6301\u8f7b\u677e\u8fde\u63a5\u5230\u73b0\u6709\u7f51\u7edc  \u652f\u6301\u4f7f\u7528\u667a\u80fd\u624b\u673a\u8f7b\u677e\u8c03\u8bd5  \u652f\u6301\u5668\u4ef6\u5230\u5668\u4ef6\u3001\u5668\u4ef6\u5230\u79fb\u52a8\u8bbe\u5907\u548c\u5668\u4ef6\u5230\u4e91\u7684\u65e0\u7ebf\u901a\u4fe1    \u672c\u7ae0\u8282\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 nRF52840-MDK \u521b\u5efa\u4e00\u4e2a Thread \u7f51\u7edc\uff0c\u5e76\u5728\u4e0d\u540c\u8282\u70b9\u95f4\u53d1\u9001\u6d88\u606f\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/openthread/#_2", 
            "text": "\u5728\u5f00\u53d1 OpenThread \u5e94\u7528\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u5f00\u53d1\u5de5\u5177\u3002", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/cn/openthread/#arm-gnu-toolchain", 
            "text": "GNU Arm Embedded Toolchain \u662f Arm \u516c\u53f8\u63d0\u4f9b\u7684 GNU \u5f00\u6e90\u5de5\u5177\u94fe\uff0c\u96c6\u6210 GCC \u4ea4\u53c9\u7f16\u8bd1\u5668\u3001\u6807\u51c6\u5e93\u4ee5\u53ca\u5176\u4ed6\u5b9e\u7528\u5de5\u5177\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u591f\u8f7b\u677e\u5f00\u53d1\u57fa\u4e8e Arm Cortex-M \u548c Cortex-R \u7684\u8f6f\u4ef6\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002  \u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u94fe\u63a5\u4e0b\u8f7d\u8be5\u5de5\u5177\u94fe\uff1a  \u4e0b\u8f7d\u5de5\u5177\u94fe  \u4e0b\u8f7d\u3001\u5b89\u88c5  6-2017-q2-update  \u7248\u672c\uff0c\u5e76\u5c06\u5de5\u5177\u94fe\u7684\u76ee\u5f55\u6dfb\u52a0\u5230\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\uff1a  # in ~/.bash_profile, add the following script  export   PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update/bin: ${ PATH }   \u53ef\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u9a8c\u8bc1\u662f\u5426\u5b89\u88c5\u6210\u529f\uff1a  $ arm-none-eabi-gcc --version", 
            "title": "\u5b89\u88c5 ARM GNU Toolchain"
        }, 
        {
            "location": "/cn/openthread/#pyocd", 
            "text": "pyOCD  \u662f\u4e00\u4e2a\u5f00\u6e90\u3001\u8de8\u5e73\u53f0\u7684 python \u5e93\uff0c\u652f\u6301 Linux, macOS, Windows \u7cfb\u7edf\uff0c\u53ef\u5bf9 ARM Cortex-M \u7cfb\u5217 MCU \u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\uff0c\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u5176\u63d0\u4f9b\u7684 API \u5b9e\u73b0\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002  \u53ef\u4ee5\u901a\u8fc7  pip  \u5b89\u88c5\u6700\u65b0\u7a33\u5b9a\u7248\uff1a  $ pip install --pre -U pyocd   \u63d0\u793a  \u5982\u679c\u5b89\u88c5 pyOCD \u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u53c2\u8003 \u201c \u4f7f\u7528 pyOCD \u4e0b\u8f7d \u201d \u90e8\u5206\u3002", 
            "title": "\u5b89\u88c5 pyOCD"
        }, 
        {
            "location": "/cn/openthread/#wpantund", 
            "text": "wpantund  \u662f\u8fd0\u884c\u5728\u7c7b Unix \u64cd\u4f5c\u7cfb\u7edf\u7528\u6237\u7a7a\u95f4\u7684\u7f51\u7edc\u63a5\u53e3\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4e3a\u4f4e\u529f\u8017\u65e0\u7ebf\u534f\u5904\u7406\u5668\uff08NCP\uff09\u63d0\u4f9b\u672c\u5730 IPv6 \u7f51\u7edc\u63a5\u53e3\uff0c\u7531 Nest Labs \u5f00\u53d1\u548c\u7ef4\u62a4\u3002  \u4f60\u53ef\u4ee5\u6309\u7167 \u201c wpantund \u5b89\u88c5\u6307\u5357 \u201d \u5b89\u88c5  wpantund \u3002", 
            "title": "\u5b89\u88c5 wpantund"
        }, 
        {
            "location": "/cn/openthread/#openthread", 
            "text": "\u514b\u9686 OpenThread \u6e90\u7801\uff0c\u5e76\u5b89\u88c5\uff1a  $  cd  ~\n$ git clone --recursive https://github.com/openthread/openthread.git\n$  cd  openthread\n$ ./bootstrap  \u4fee\u6539\u5e73\u53f0\u914d\u7f6e\u6587\u4ef6  openthread/examples/platforms/nrf52840/platform-config.h  \u7684\u4e32\u53e3\u914d\u7f6e\u4ee5\u9002\u914d nRF52840-MDK\uff1a  /**   * @def UART_HWFC   *   * UART Hardware Flow Control.   *   * @brief Possible values:   *         \\ref NRF_UART_HWFC_ENABLED - HW Flow control enabled.   *         \\ref NRF_UART_HWFC_DISABLED - HW Flow control disabled.   *   */  #ifndef UART_HWFC  #define UART_HWFC NRF_UART_HWFC_DISABLED  #endif  /**   * @def UART_PIN_TX   *   * UART TX Pin.   *   */  #ifndef UART_PIN_TX  #define UART_PIN_TX 20  #endif  /**   * @def UART_PIN_RX   *   * UART RX Pin.   *   */  #ifndef UART_PIN_RX  #define UART_PIN_RX 19  #endif   \u5b8c\u6210\u4ee5\u4e0a\u51c6\u5907\u5de5\u4f5c\uff0c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e0b\u8f7d OpenThread\u3002", 
            "title": "\u514b\u9686 OpenThread \u6e90\u7801"
        }, 
        {
            "location": "/cn/openthread/#ncp-joiner", 
            "text": "", 
            "title": "\u8bbe\u7f6e NCP Joiner"
        }, 
        {
            "location": "/cn/openthread/#ncp", 
            "text": "Thread \u7f51\u7edc\u4e2d\u7684\u8bbe\u5907\u4f7f\u7528  Joiner  \u89d2\u8272\u53ef\u4ee5\u88ab\u5b89\u5168\u5730\u8ba4\u8bc1\u548c\u8bb8\u53ef\uff0c\u8fd9\u91cc\u6211\u4eec\u5c06\u4e3a nRF52840-MDK \u7f16\u8bd1\u4e0b\u8f7d\u5177\u6709  Joiner  \u529f\u80fd\u7684\u56fa\u4ef6\u3002   \u63d0\u793a  \u6bcf\u6b21\u7f16\u8bd1\u4e4b\u524d\u5efa\u8bae\u4f7f\u7528  make clean  \u6e05\u9664\u524d\u9762\u5df2\u7ecf\u7f16\u8bd1\u8fc7\u7684\u7248\u672c\u3002   $  cd  ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840  JOINER = 1    \u4e86\u89e3\u66f4\u591a  \u5982\u679c\u9700\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u7f16\u8bd1\u914d\u7f6e OpenThread \u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u201c Building OpenThread \u201d\u3002   \u5207\u6362\u5230\u8f93\u51fa\u76ee\u5f55\uff0c\u5c06 OpenThread FTD NCP \u4e8c\u8fdb\u5236\u6587\u4ef6\u8f6c\u6362\u4e3a hex \u6587\u4ef6\uff1a  $  cd  ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-ncp-ftd ot-ncp-ftd.hex  \u5c06 nRF52840-MDK \u8fde\u63a5\u5230 PC\uff0c\u4f7f\u7528  pyocd-flashtool -l  \u83b7\u53d6\u8be5\u677f\u5b50\u7684  boardId :  $ pyocd-flashtool -l\n\nWARNING:root:Unsupported board found  1026  0   =  Unknown Board  [ cortex_m ]   boardId   =  10260000083ab20300000000000000000000000097969902  \u4f7f\u7528\u8be5  boardId  \u4e0b\u8f7d\u524d\u9762\u7f16\u8bd1\u5b8c\u6210\u7684 OpenThread NCP FTD hex \u6587\u4ef6\uff1a  $ pyocd-flashtool -t nrf52 -b 10260000083ab20300000000000000000000000097969902 -ce ot-ncp-ftd.hex    \u63d0\u793a  \u5c06\u8be5\u677f\u5b50\u6807\u8bb0\u4e3a  NCP \uff0c\u4ee5\u907f\u514d\u4e0e\u540e\u9762\u5176\u4ed6\u89d2\u8272\u7684\u8bbe\u5907\u6df7\u6dc6\u3002", 
            "title": "\u7f16\u8bd1\u4e0b\u8f7d NCP \u56fa\u4ef6"
        }, 
        {
            "location": "/cn/openthread/#wpantund_1", 
            "text": "\u5728 NCP \u7684\u8bbe\u8ba1\u4e2d\uff0c\u4f7f\u7528  wpantund  \u5de5\u5177\u6765\u8fde\u63a5\u548c\u7ba1\u7406 Thread \u8bbe\u5907\u3002   \u5728\u547d\u4ee4\u884c\u7ec8\u7aef\u4e2d\uff0c\u542f\u52a8  wpantund  \u3001\u521b\u5efa  utun7  \u63a5\u53e3\u5e76\u4f7f\u80fd log \u4fe1\u606f\u8f93\u51fa\uff1a  $ sudo /usr/local/sbin/wpantund -o Config:NCP:SocketPath /dev/cu.usbmodem14112   \\ \n        -o Config:TUN:InterfaceName utun7  \\ \n        -o Daemon:SyslogMask   -info    \u63d0\u793a  \u4f60\u4e5f\u53ef\u4ee5\u628a\u4e0a\u9762\u76f8\u5173\u7684\u914d\u7f6e\u5199\u5230  /etc/wpantund.conf  \u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u91cd\u65b0\u914d\u7f6e wpantund\u3002   \u5982\u679c\u914d\u7f6e\u6210\u529f\uff0c\u5c06\u4f1a\u6709\u4ee5\u4e0b\u7c7b\u4f3c\u4fe1\u606f\u8f93\u51fa\uff1a  Jun   9   01 :29:49  wpantund [ 12257 ]   Notice : Starting wpantund  0 .08.00d  ( Jun   9   2018   00 :31:51 )  . . .\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice :   SOURCE_VERSION   =   0 .07.01-217-g86d29d6\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice :   BUILD_VERSION   =   0 .07.01-217-g86d29d6\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Configuration file  /etc/wpantund.conf  read.\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Ready. Using DBUS bus  :1.2 \nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Running as root without dropping privileges!\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : State change:  uninitialized  -   offline \nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : NCP is running  OPENTHREAD/20170716-00584-ge4f5f240-dirty; NRF52840; Jun  8 2018 23:36:19 \nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Driver is running  0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51)  1 :29:49  wpantund [ 12257 ]   Notice : Network is not joinable\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Resetting interface ( s ) . . .\nJun   9   01 :29:49  wpantund [ 12257 ]   Notice : Finished initializing NCP  \u4fdd\u7559\u8fd9\u4e2a\u7ec8\u7aef\u7a97\u53e3\uff0c\u67e5\u770b\u8f93\u51fa\u7684 log \u4fe1\u606f\u4ee5\u4fbf\u5b9a\u4f4d\u95ee\u9898\u3002  \u4f7f\u7528\u53e6\u5916\u7684\u5de5\u5177  wpanctl  \u6765\u63a7\u5236\u7ba1\u7406  NCP  \u8bbe\u5907\uff1a  $ sudo /usr/local/bin/wpanctl -I utun7\nwpanctl:utun7", 
            "title": "\u914d\u7f6e wpantund"
        }, 
        {
            "location": "/cn/openthread/#ncp_1", 
            "text": "\u4f7f\u7528  status  \u547d\u4ee4\u9a8c\u8bc1 NCP \u662f\u5426\u6b63\u5e38\u5de5\u4f5c\uff1a", 
            "title": "\u9a8c\u8bc1 NCP \u662f\u5426\u5de5\u4f5c"
        }, 
        {
            "location": "/cn/openthread/#ftd", 
            "text": "\u53e6\u5916\u4e24\u4e2a nRF52840-MDK \u5c06\u88ab\u914d\u7f6e\u4e3a FTD \u8bbe\u5907\uff08Full Thread Devices\uff09\uff0c\u8fd9\u7c7b\u8bbe\u5907\u4e0a\u8fd0\u884c OpenThread CLI \u56fa\u4ef6\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8bbe\u5907\u7684\u4e32\u53e3\u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\u7ba1\u7406\u3002  \u8fd9\u4e24\u4e2a\u8bbe\u5907\u4e00\u4e2a\u914d\u7f6e\u4e3a  Commissioner  \u89d2\u8272\uff0c\u7528\u4e8e\u5728 Thread \u7f51\u7edc\u4e2d\u8ba4\u8bc1\u548c\u8bb8\u53ef\u5176\u4ed6\u8bbe\u5907\uff1b\u53e6\u5916\u4e00\u4e2a\u914d\u7f6e\u4e3a  Joiner  \u89d2\u8272\uff0c\u53ef\u4ee5\u88ab  Commissioner  \u5b89\u5168\u5730\u8ba4\u8bc1\u548c\u8bb8\u53ef\u3002", 
            "title": "\u8bbe\u7f6e FTD \u8bbe\u5907"
        }, 
        {
            "location": "/cn/openthread/#cli", 
            "text": "\u4e3a nRF52840-MDK \u7f16\u8bd1  Commissioner  \u548c  Joiner  \u89d2\u8272\u7684\u56fa\u4ef6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u540c\u65f6\u4f7f\u80fd\u8fd9\u4e24\u4e2a\u5b8f\uff1a  $  cd  ~/openthread\n$ make -f examples/Makefile-nrf52840 clean\n$ make -f examples/Makefile-nrf52840  COMMISSIONER = 1   JOINER = 1    \u63d0\u793a  \u4e3a\u4e86\u907f\u514d\u5197\u4f59\uff0c\u5efa\u8bae\u5355\u4e00\u89d2\u8272\u7684\u8bbe\u5907\u4f7f\u80fd\u7279\u5b9a\u7684\u5b8f\uff0c\u4f8b\u5982\uff1a\u53ea\u4f5c\u4e3a  Joiner  \u89d2\u8272\u7684\u8bbe\u5907\uff0c\u53ea\u5f00\u542f  JOINER=1  \u7684\u3002   \u5207\u6362\u5230\u8f93\u51fa\u76ee\u5f55\uff0c\u5c06\u4e8c\u8fdb\u5236\u6587\u4ef6\u8f6c\u6362\u4e3a hex \u6587\u4ef6\uff1a $  cd  ~/openthread/output/nrf52840/bin\n$ arm-none-eabi-objcopy -O ihex ot-cli-ftd ot-cli-ftd.hex  \u8fde\u63a5 nRF52840-MDK\uff0c\u70e7\u5f55\u56fa\u4ef6\uff1a  $ pyocd-flashtool -l\nWARNING:root:Unsupported board found  1026 \nWARNING:root:Unsupported board found  1026  0   =  Unknown Board  [ cortex_m ]   boardId   =  10260000083ac27f00000000000000000000000097969902 1   =  Unknown Board  [ cortex_m ]   boardId   =  10260000083ab20300000000000000000000000097969902\n\n$ pyocd-flashtool -t nrf52 -b 10260000083ac27f00000000000000000000000097969902 -ce ot-cli-ftd.hex   \u63d0\u793a  \u5c06\u8be5\u677f\u5b50\u6807\u8bb0\u4e3a  Commissioner \uff0c\u4ee5\u907f\u514d\u4e0e\u5176\u4ed6\u89d2\u8272\u7684\u8bbe\u5907\u6df7\u6dc6\u3002", 
            "title": "\u7f16\u8bd1\u4e0b\u8f7d CLI \u56fa\u4ef6"
        }, 
        {
            "location": "/cn/openthread/#cli_1", 
            "text": "\u6253\u5f00\u4e32\u53e3\uff0c\u4f7f\u7528  ipaddr  \u67e5\u770b\u8bbe\u5907 IP\uff1a  $ screen /dev/cu.usbmodem142112  115200    ipaddr\nfd11:2233:4455:0:99ea:1fe9:acd6:d384\nfe80:0:0:0:2003:a240:810f:1598\nDone", 
            "title": "\u9a8c\u8bc1 CLI \u662f\u5426\u5de5\u4f5c"
        }, 
        {
            "location": "/cn/openthread/#ftd-joiner", 
            "text": "\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\uff0c\u4e3a\u53e6\u5916\u4e00\u4e2a nRF52840-MDK \u70e7\u5f55  ot-cli-ftd.hex  \u56fa\u4ef6\uff0c\u5c06\u5176\u914d\u7f6e\u4e3a  FTD Joiner  \u8bbe\u5907\uff0c\u5e76\u505a\u597d\u6807\u8bb0\u3002  \u6253\u5f00\u4e32\u53e3\uff0c\u4f7f\u7528  ipaddr  \u67e5\u770b\u8bbe\u5907 IP\uff1a  $ screen /dev/cu.usbmodem142412  115200    ipaddr\nfe80:0:0:0:d079:7d86:6413:4f4e\nfd11:2233:4455:0:e839:eb52:f7ec:74e3\nDone", 
            "title": "\u8bbe\u7f6e FTD Joiner"
        }, 
        {
            "location": "/cn/openthread/#thread", 
            "text": "\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u5efa\u7acb\u4e00\u4e2a Thread \u7f51\u7edc\uff0c\u5728  FTD Commissioner  \u8bbe\u7f6e\u914d\u7f6e\u7a97\u53e3\uff0c\u5f00\u59cb\u914d\u7f6e\u8be5\u7f51\u7edc\u53c2\u6570\uff1a  ## FTD Commissioner ## \n----------------------  networkname makerdiary\nDone  extpanid  1122334455667788 \nDone  panid 0x1122\nDone  masterkey  11223344556677881122334455667788 \nDone  ifconfig up\nDone  thread start\nDone  \u8fc7\u4e00\u4f1a\uff0c\u67e5\u770b\u8be5\u8bbe\u5907\u72b6\u6001\uff0c\u5b83\u5c06\u6210\u4e3a  Leader  \u89d2\u8272\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528  rloc16  \u67e5\u770b\u5176 RLOC16 \u5730\u5740\uff1a  ## FTD Commissioner ## \n----------------------  state\nleader\nDone  rloc16 3400 \nDone  \u68c0\u67e5\u8be5\u8bbe\u5907\u7684 IPv6\uff1a  ## FTD Commissioner ## \n----------------------  ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00         # Leader Anycast Locator (ALOC) \nfd11:2233:4455:0:0:ff:fe00:3400         # Routing Locator (RLOC) \nfd11:2233:4455:0:99ea:1fe9:acd6:d384    # Mesh-Local EID (ML-EID) \nfe80:0:0:0:2003:a240:810f:1598          # Link-Local Address (LLA) \nDone   Tip  \u4e00\u4e2a Thread \u8bbe\u5907\u53ef\u4ee5\u6709\u591a\u4e2a IPv6 \u5730\u5740\uff0c\u53ef\u4ee5\u901a\u8fc7 \u201c IPv6 Addressing \u201d \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\u3002   \u8fd9\u65f6\uff0c\u4e00\u4e2a\u540d\u4e3a  makerdiary  \u7684 Thread \u7f51\u7edc\u5df2\u7ecf\u5efa\u7acb\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u5176\u4ed6\u8bbe\u5907\u53d1\u73b0\uff0c\u53ef\u5728  NCP Joiner  \u548c  FTD Joiner  \u7684  wpanctl  \u7a97\u53e3\u4f7f\u7528  scan  \u547d\u4ee4\u626b\u9762\u53d1\u73b0\u7f51\u7edc\uff1a  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  scan\n    |  Joinable  |  NetworkName         |  PAN ID  |  Ch  |  XPanID            |  HWAddr            |  RSSI\n---+----------+--------------------+--------+----+------------------+------------------+------\n  1   |        NO  |   makerdiary         |  0x1122  |   11   |   1122334455667788   |  2203A240810F1598  |   -59  ## FTD Joiner ## \n----------------  scan |  J  |  Network Name      |  Extended PAN      |  PAN   |  MAC Address       |  Ch  |  dBm  |  LQI  | \n+---+------------------+------------------+------+------------------+----+-----+-----+   |   0   |  makerdiary        |   1122334455667788   |   1122   |  2203a240810f1598  |   11   |  -32  |   244   | \nDone  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9  NCP Joiner  \u52a0\u5165\u5230\u8be5\u7f51\u7edc\u4e2d\uff1a  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  setprop Network:Key  11223344556677881122334455667788 \nwpanctl:utun7  join  1 \nJoining  makerdiary   1122334455667788  as node  type   end-device \nSuccessfully Joined!  \u4f7f\u7528  status  \u67e5\u770b\u72b6\u6001\uff0c\u8be5\u8bbe\u5907\u5df2\u7ecf\u6210\u529f\u52a0\u5165\u5e76\u5206\u914d\u4e86\u5bf9\u5e94\u7684 IPv6 \u5730\u5740\uff1a   ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  status utun7   =   [ \n     NCP:State   =   associated \n     Daemon:Enabled   =   true \n     NCP:Version   =   OPENTHREAD/20170716-00650-g631557e8-dirty; NRF52840; Jun  9 2018 15:45:03 \n     Daemon:Version   =   0.08.00d (0.07.01-217-g86d29d6; Jun  9 2018 00:31:51) \n     Config:NCP:DriverName   =   spinel \n     NCP:HardwareAddress   =   [ 9019EC5D617D7AAB ] \n     NCP:Channel   =   11 \n     Network:NodeType   =   end-device \n     Network:Name   =   makerdiary \n     Network:XPANID   =  0x1122334455667788\n     Network:PANID   =  0x1122\n     IPv6:LinkLocalAddress   =   fe80::60bd:ff84:2121:344d \n     IPv6:MeshLocalAddress   =   fd11:2233:4455::f:b5e:169b:b875 \n     IPv6:MeshLocalPrefix   =   fd11:2233:4455::/64 \n     com.nestlabs.internal:Network:AllowingJoin   =   false  ]   \u83b7\u53d6  NCP Joiner  \u7684 RLOC16 \u5730\u5740\uff1a  ## NCP Joiner ## \n----------------\n\nwpanctl:utun7  getprop Thread:RLOC16\nThread:RLOC16  =  0x3403  \u56de\u5230  FTD Commissioner \uff0c\u53ef\u4ee5\u67e5\u770b  router table  \u548c  child table \uff1a  ## FTD Commissioner ## \n----------------------  router table |  ID  |  RLOC16  |  Next Hop  |  Path Cost  |  LQ In  |  LQ Out  |  Age  |  Extended MAC      | \n+----+--------+----------+-----------+-------+--------+-----+------------------+ |   13   |  0x3400  |         63   |           0   |       0   |        0   |     0   |  2203a240810f1598  | \n\nDone  child table |  ID   |  RLOC16  |  Timeout     |  Age         |  LQ In  |  C_VN  | R | S | D | N |  Extended MAC      | \n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+ |     3   |  0x3403  |          240   |           66   |       3   |     86   | 1 | 1 | 1 | 1 |  62bdff842121344d  | \n\nDone  \u4f7f\u7528  ping  \u547d\u4ee4\u68c0\u67e5\u8fde\u63a5\uff1a  ## FTD Commissioner ## \n----------------------  ping fd11:2233:4455::f:b5e:169b:b875   8  bytes from fd11:2233:4455:0:f:b5e:169b:b875:  icmp_seq = 2   hlim = 64   time = 35ms  \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u5177\u6709\u4e24\u4e2a\u8282\u70b9\u7684 Thread \u7f51\u7edc\uff0c\u5176\u7f51\u7edc\u62d3\u6251\u5982\u4e0b\uff1a", 
            "title": "\u5efa\u7acb Thread \u7f51\u7edc"
        }, 
        {
            "location": "/cn/openthread/#ftd-joiner_1", 
            "text": "\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8ba9  FTD Joiner  \u52a0\u5165\u5230  makerdiary  \u7f51\u7edc\u4e2d\u3002  \u5148\u5728  FTD Joiner  \u4e2d\u626b\u63cf\u7f51\u7edc\uff1a  ## FTD Joiner ##\n----------------  scan\n| J | Network Name     | Extended PAN     | PAN  | MAC Address      | Ch | dBm | LQI |\n+---+------------------+------------------+------+------------------+----+-----+-----+  | 0 | makerdiary       | 1122334455667788 | 1122 | 2203a240810f1598 | 11 | -32 | 244 |\nDone  J  \u5217\u7684\u503c\u4e3a  0 \uff0c\u8868\u793a\u8be5\u8bbe\u5907\u672a\u88ab\u8bb8\u53ef\u52a0\u5165\u5230  makerdiary  \u4e2d\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6f14\u793a\u5982\u4f55\u8bb8\u53ef  FTD Joiner  \u52a0\u5165\u5230\u7f51\u7edc\u4e2d\u3002  \u5148\u67e5\u770b  FTD Joiner  \u7684  eui64 \uff1a  ## FTD Joiner ## \n----------------  eui64\n31ae3e8e7b87cfd6\nDone  \u5728  FTD Commissioner  \u5bf9\u8be5  eui64  \u8fdb\u884c\u8bb8\u53ef\uff1a  ## FTD Commissioner ## \n----------------------  commissioner start\nDone  commissioner joiner add 31ae3e8e7b87cfd6 J01NME\nDone  \u56de\u5230  FTD Joiner \uff0c\u518d\u6b21\u626b\u63cf\u7f51\u7edc\uff1a  ## FTD Joiner ## \n----------------  scan |  J  |  Network Name      |  Extended PAN      |  PAN   |  MAC Address       |  Ch  |  dBm  |  LQI  | \n+---+------------------+------------------+------+------------------+----+-----+-----+   |   1   |  makerdiary        |   1122334455667788   |   1122   |  2203a240810f1598  |   11   |  -32  |   244   | \nDone  \u53ef\u53d1\u73b0  J  \u72b6\u6001\u5df2\u53d8\u6210  1 \uff0c\u8868\u793a\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u8ba9\u8be5\u8bbe\u5907\u52a0\u5165\u5230\u7f51\u7edc\u4e2d\uff1a  ## FTD Joiner ## \n----------------  ifconfig up\nDone  joiner start J01NME\nDone  \u7b49\u5f85\u4e00\u4f1a\uff0c\u4f1a\u53d1\u73b0\u663e\u793a\u662f\u5426\u52a0\u5165\u6210\u529f\uff1a  ## FTD Joiner ## \n---------------- Join success  \u8fd9\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u542f\u52a8  FTD Joiner  \u4e86\uff1a  ## FTD Joiner ## \n----------------  thread start\nDone  state\nchild\nDone  rloc16 3404 \nDone  \u6b64\u65f6\uff0c\u6211\u4eec\u5728  FTD Commissioner  \u4e2d\u68c0\u67e5  router table  \u548c  child table \uff1a  ## FTD Commissioner ## \n----------------------  router table |  ID  |  RLOC16  |  Next Hop  |  Path Cost  |  LQ In  |  LQ Out  |  Age  |  Extended MAC      | \n+----+--------+----------+-----------+-------+--------+-----+------------------+ |   13   |  0x3400  |         63   |           0   |       0   |        0   |     0   |  2203a240810f1598  | \n\nDone  child table |  ID   |  RLOC16  |  Timeout     |  Age         |  LQ In  |  C_VN  | R | S | D | N |  Extended MAC      | \n+-----+--------+------------+------------+-------+------+-+-+-+-+------------------+ |     3   |  0x3403  |          240   |          231   |       3   |     86   | 1 | 1 | 1 | 1 |  62bdff842121344d  |  |     4   |  0x3404  |          240   |           49   |       3   |     88   | 1 | 1 | 1 | 1 |  7a2755cf47e45907  | \n\nDone  \u8fd9\u65f6\uff0c\u6211\u4eec\u5f97\u5230\u7684\u7f51\u7edc\u62d3\u6251\u5982\u4e0b\u56fe\uff1a", 
            "title": "\u8bb8\u53ef FTD Joiner"
        }, 
        {
            "location": "/cn/openthread/#udp", 
            "text": "\u6210\u529f\u521b\u5efa Thread \u7f51\u7edc\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u4f7f\u7528 UDP \u534f\u8bae\u5728\u8282\u70b9\u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u6d88\u606f\u3002  \u83b7\u53d6  FTD Joiner  \u7684 Mesh-Local EID \u5730\u5740\uff1a  ## FTD Joiner ## \n----------------  ipaddr\nfd11:2233:4455:0:0:ff:fe00:fc00         # Leader Anycast Locator (ALOC) \nfd11:2233:4455:0:0:ff:fe00:f400         # Routing Locator (RLOC) \nfe80:0:0:0:7827:55cf:47e4:5907          # Link-Local Address (LLA) \nfd11:2233:4455:0:e839:eb52:f7ec:74e3    # Mesh-Local EID (ML-EID) \nDone  \u542f\u52a8 UDP\uff0c\u5e76\u7ed1\u5b9a  1212  \u7aef\u53e3\uff1a  ## FTD Joiner ## \n----------------  udp open\nDone  udp  bind  ::  1212   \u56de\u5230  FTD Commissioner \uff0c\u542f\u52a8 UDP\uff0c\u7136\u540e\u8fde\u63a5  FTD Jonier \uff1a  ## FTD Commissioner ##\n----------------------  udp open\nDone  udp connect fd11:2233:4455:0:e839:eb52:f7ec:74e3 1212\nDone  \u8fde\u63a5\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u53d1\u9001 UDP \u6d88\u606f\uff1a  ## FTD Commissioner ## \n----------------------  udp send hello-openthread\nDone  \u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u5728  FTD Joiner  \u6536\u5230 UDP \u6d88\u606f\uff1a  ## FTD Joiner ## \n----------------   16  bytes from fd11:2233:4455:0:0:ff:fe00:3400  49153  hello-openthread", 
            "title": "\u53d1\u9001 UDP \u6d88\u606f"
        }, 
        {
            "location": "/cn/openthread/#_3", 
            "text": "\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u6210\u529f\u4f7f\u7528 nRF52840-MDK \u5efa\u7acb Thread \u7f51\u7edc\uff0c\u5e76\u6210\u529f\u5728\u8282\u70b9\u8bbe\u5907\u4e4b\u95f4\u4f20\u8f93\u6d88\u606f\u3002  \u540e\u7eed\u66f4\u591a\u5e94\u7528\u793a\u4f8b\u4f1a\u66f4\u65b0\u5230  nrf52840-mdk  \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/openthread/#_4", 
            "text": "Build a Thread network with nRF52840 boards and OpenThread  - \u6db5\u76d6\u672c\u6587\u63d0\u5230\u7684\u6240\u6709 Thread \u7f51\u7edc\u6784\u5efa\u6b65\u9aa4  openthread.io  github.com/openthread  Thread Primer  \u2014 \u6db5\u76d6\u672c\u6587\u63d0\u5230\u7684\u6240\u6709 Thread \u76f8\u5173\u7684\u6982\u5ff5  OpenThread CLI reference  OpenThread UDP CLI reference  wpanctl properties reference  OpenThread UDP API reference  GNU Screen quick reference", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/openthread/#_5", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/mbedos/", 
            "text": "Arm Mbed OS \nArm \u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5c0f\u578b\u8bbe\u5907\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\n\n\n\n\n\u7b80\u4ecb\n\n\nArm Mbed OS\n \u662f Arm \u4e13\u95e8\u4e3a\u7269\u8054\u7f51\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\u5f00\u6e90\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411 ARM Cortex-M \u7cfb\u5217\u5fae\u63a7\u5236\u5668\uff0c\u975e\u5e38\u9002\u5408\u6d89\u53ca\u667a\u80fd\u57ce\u5e02\u3001\u667a\u80fd\u5bb6\u5ead\u548c\u7a7f\u6234\u5f0f\u8bbe\u5907\u7b49\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\n\n\u76f8\u6bd4\u4e8e\u5176\u4ed6\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0cArm Mbed OS \u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a\n\n\n\n\n\u5b89\u5168\u6027\uff1a\u63d0\u4f9b mbed TLS \u548c mbed uVisor \u5b89\u5168\u673a\u5236\n\n\n\u8fde\u63a5\u6027\uff1a\u652f\u6301\u591a\u79cd\u534f\u8bae\u6808\uff0c\u5305\u62ec Bluetooth LE, Wi-Fi, 6LoWPAN, Thread, Lora\u7b49\u7b49\n\n\n\u5b8c\u6574\u7684\u5de5\u5177\u94fe\u652f\u6301\uff1a\u63d0\u4f9b\u5728\u7ebf IDE, mbed CLI \u4ee5\u53ca \u7b2c\u4e09\u65b9 IDE\n\n\n\u826f\u597d\u7684\u793e\u533a\u751f\u6001\n\n\n\n\n\n\nInfo\n\n\nArm Mbed OS \u5df2\u7ecf\u83b7\u5f97 Thread \u7ec4\u4ef6\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u4f7f\u7528 Thread \u521b\u5efa\u4f4e\u529f\u8017\u3001\u57fa\u4e8e 6LoWPAN \u7684 mesh \u7f51\u7edc\u3002\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee \nMbed OS \u5f00\u53d1\u8005\u7f51\u7ad9\n.\n\n\n\u4f7f\u7528 Arm Mbed CLI\n\n\nArm \u4e3a Mbed OS \u63d0\u4f9b\u4e86\u79bb\u7ebf\u5f00\u53d1\u5de5\u5177 Mbed CLI\uff0c\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002\n\n\n\u5b89\u88c5 Mbed CLI\n\n\n\u5728 Windows \u4e0a\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \nMbed CLI Windows .exe \u5b89\u88c5\u5305\n\u3002\n\n\n\u5728 Linux \u548c macOS\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528 \npip\n \u8fdb\u884c\u5b89\u88c5\uff1a\n\n\n$ pip install mbed-cli\n\n\n\n\n\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 \nmbed help\n \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\u3002\n\n\n\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\n\n\n\u63a5\u7740\uff0c\u9700\u8981\u6dfb\u52a0\u5de5\u5177\u94fe\u8def\u5f84\u914d\u7f6e\uff1a\n\n\n$ mbed config -G GCC_ARM_PATH \npath to GNU Arm bin\n\n\n[\nmbed\n]\n \npath to GNU Arm bin\n now \nset\n as global GCC_ARM_PATH\n\n$ mbed config --list\n\n[\nmbed\n]\n Global config:\n\nGCC_ARM_PATH\n=\npath to GNU Arm bin\n\n\n\n\n\n\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b\n\n\n\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5 \nmbed-os-example-blinky\n \u4e3a\u4f8b\uff1a\n\n\n\u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a\n\n\n$ \ncd\n ./nrf52840-mdk/examples/mbedos5/mbed-os-example-blinky/\n\n\n\n\n\u6dfb\u52a0 Mbed OS \u5e93\uff1a\n\n\nmbed-os-example-blinky$ mbed config root .\nmbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git\n\n\n\n\n\u4f7f\u7528 \nmbed compile\n \u8fdb\u884c\u7f16\u8bd1\uff1a\n\n\nmbed-os-example-blinky$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash\n\n\n\n\n\u589e\u52a0 \n--flash\n \u53c2\u6570\uff0c\u5c06\u4f1a\u5728\u7f16\u8bd1\u5b8c\u6210\u540e\u81ea\u52a8\u5c06\u56fa\u4ef6\u4e0b\u8f7d\u5230 nRF52840-MDK \u786c\u4ef6\u4e0a\u3002\n\n\n\u5982\u679c \nmbed detect\n \u65e0\u6cd5\u68c0\u6d4b\u5230\u677f\u5b50\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6dfb\u52a0\uff1a\n\n\n$ mbedls --mock\n=\n1026\n:nRF52840-MDK\n\n\n\n\n\n\n\u63d0\u793a\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7684\u5185\u5bb9 \u201c\n\u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f\n\u201d \u4e0b\u8f7d\u56fa\u4ef6\u3002\n\n\n\n\n\u89c2\u5bdf\u8fd0\u884c\u7ed3\u679c\uff1a\n\n\n\n\n\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\n\n\nMbed OS \u5bf9\u4f4e\u529f\u8017\u84dd\u7259\u652f\u6301\u975e\u5e38\u53cb\u597d\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e9b\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a\n\n\n./nrf52840-mdk/examples/mbedos5/mbed-os-example-ble\n\u251c\u2500\u2500 BLE_BatteryLevel\n\u251c\u2500\u2500 BLE_Beacon\n\u251c\u2500\u2500 BLE_Button\n\u251c\u2500\u2500 BLE_EddystoneObserver\n\u251c\u2500\u2500 BLE_EddystoneService\n\u251c\u2500\u2500 BLE_GAPButton\n\u251c\u2500\u2500 BLE_HeartRate\n\u251c\u2500\u2500 BLE_LED\n\u251c\u2500\u2500 BLE_LEDBlinker\n\u251c\u2500\u2500 BLE_Thermometer\n\u2514\u2500\u2500 README.md\n\n\n\n\n\u53ef\u4ee5\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff0c\u4f8b\u5982\uff0c\nBLE_BatteryLevel\n:\n\n\n$ \ncd\n BLE_BatteryLevel\n\n\n\n\n\u6dfb\u52a0 Mbed OS \u5e93\uff1a\n\n\nBLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git\n\n\n\n\n\u7f16\u8bd1\u4e0b\u8f7d\uff1a\n\n\nBLE_BatteryLevel$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash\n\n\n\n\n\u6253\u5f00 \nnRF Connect\n app\uff0c\u627e\u5230\u540d\u4e3a \nBATTERY\n \u7684\u8bbe\u5907\uff0c\u8fde\u63a5\u8bbe\u5907\uff0c\u53ef\u53d1\u73b0 UUID \u4e3a \n0x180F\n \u7684\u7535\u6c60\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b UUID \u4e3a \n0x2A19\n \u7684 \nBattery level\n \u5c5e\u6027\u3002\n\n\n\n\n\u5176\u4ed6\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002\n\n\n\u66f4\u591a\u793a\u4f8b\n\n\n\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\nArm Mbed OS developer site\n\n\nMbed OS Documentation\n\n\nARMmbed/mbed-os repository\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "Arm Mbed OS"
        }, 
        {
            "location": "/cn/mbedos/#arm-mbed-os-arm", 
            "text": "", 
            "title": "Arm Mbed OS Arm \u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5c0f\u578b\u8bbe\u5907\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf"
        }, 
        {
            "location": "/cn/mbedos/#_1", 
            "text": "Arm Mbed OS  \u662f Arm \u4e13\u95e8\u4e3a\u7269\u8054\u7f51\u8bbe\u5907\u800c\u8bbe\u8ba1\u7684\u5f00\u6e90\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e3b\u8981\u9762\u5411 ARM Cortex-M \u7cfb\u5217\u5fae\u63a7\u5236\u5668\uff0c\u975e\u5e38\u9002\u5408\u6d89\u53ca\u667a\u80fd\u57ce\u5e02\u3001\u667a\u80fd\u5bb6\u5ead\u548c\u7a7f\u6234\u5f0f\u8bbe\u5907\u7b49\u9886\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u3002  \u76f8\u6bd4\u4e8e\u5176\u4ed6\u5d4c\u5165\u5f0f\u64cd\u4f5c\u7cfb\u7edf\uff0cArm Mbed OS \u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff1a   \u5b89\u5168\u6027\uff1a\u63d0\u4f9b mbed TLS \u548c mbed uVisor \u5b89\u5168\u673a\u5236  \u8fde\u63a5\u6027\uff1a\u652f\u6301\u591a\u79cd\u534f\u8bae\u6808\uff0c\u5305\u62ec Bluetooth LE, Wi-Fi, 6LoWPAN, Thread, Lora\u7b49\u7b49  \u5b8c\u6574\u7684\u5de5\u5177\u94fe\u652f\u6301\uff1a\u63d0\u4f9b\u5728\u7ebf IDE, mbed CLI \u4ee5\u53ca \u7b2c\u4e09\u65b9 IDE  \u826f\u597d\u7684\u793e\u533a\u751f\u6001    Info  Arm Mbed OS \u5df2\u7ecf\u83b7\u5f97 Thread \u7ec4\u4ef6\u8ba4\u8bc1\uff0c\u53ef\u4ee5\u4f7f\u7528 Thread \u521b\u5efa\u4f4e\u529f\u8017\u3001\u57fa\u4e8e 6LoWPAN \u7684 mesh \u7f51\u7edc\u3002   \u4e86\u89e3\u66f4\u591a\u5185\u5bb9\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee  Mbed OS \u5f00\u53d1\u8005\u7f51\u7ad9 .", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/mbedos/#arm-mbed-cli", 
            "text": "Arm \u4e3a Mbed OS \u63d0\u4f9b\u4e86\u79bb\u7ebf\u5f00\u53d1\u5de5\u5177 Mbed CLI\uff0c\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002", 
            "title": "\u4f7f\u7528 Arm Mbed CLI"
        }, 
        {
            "location": "/cn/mbedos/#mbed-cli", 
            "text": "\u5728 Windows \u4e0a\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528  Mbed CLI Windows .exe \u5b89\u88c5\u5305 \u3002  \u5728 Linux \u548c macOS\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528  pip  \u8fdb\u884c\u5b89\u88c5\uff1a  $ pip install mbed-cli  \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528  mbed help  \u9a8c\u8bc1\u662f\u5426\u6b63\u786e\u5b89\u88c5\u3002", 
            "title": "\u5b89\u88c5 Mbed CLI"
        }, 
        {
            "location": "/cn/mbedos/#_2", 
            "text": "\u63a5\u7740\uff0c\u9700\u8981\u6dfb\u52a0\u5de5\u5177\u94fe\u8def\u5f84\u914d\u7f6e\uff1a  $ mbed config -G GCC_ARM_PATH  path to GNU Arm bin  [ mbed ]   path to GNU Arm bin  now  set  as global GCC_ARM_PATH\n\n$ mbed config --list [ mbed ]  Global config: GCC_ARM_PATH = path to GNU Arm bin", 
            "title": "\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883"
        }, 
        {
            "location": "/cn/mbedos/#_3", 
            "text": "\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u8fd9\u91cc\u4ee5  mbed-os-example-blinky  \u4e3a\u4f8b\uff1a  \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\uff0c\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff1a  $  cd  ./nrf52840-mdk/examples/mbedos5/mbed-os-example-blinky/  \u6dfb\u52a0 Mbed OS \u5e93\uff1a  mbed-os-example-blinky$ mbed config root .\nmbed-os-example-blinky$ mbed add https://github.com/makerdiary/mbed-os.git  \u4f7f\u7528  mbed compile  \u8fdb\u884c\u7f16\u8bd1\uff1a  mbed-os-example-blinky$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash  \u589e\u52a0  --flash  \u53c2\u6570\uff0c\u5c06\u4f1a\u5728\u7f16\u8bd1\u5b8c\u6210\u540e\u81ea\u52a8\u5c06\u56fa\u4ef6\u4e0b\u8f7d\u5230 nRF52840-MDK \u786c\u4ef6\u4e0a\u3002  \u5982\u679c  mbed detect  \u65e0\u6cd5\u68c0\u6d4b\u5230\u677f\u5b50\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6dfb\u52a0\uff1a  $ mbedls --mock = 1026 :nRF52840-MDK   \u63d0\u793a  \u4f60\u4e5f\u53ef\u4ee5\u53c2\u8003\u524d\u9762\u7684\u5185\u5bb9 \u201c \u5982\u4f55\u4e0b\u8f7d\u56fa\u4ef6\uff1f \u201d \u4e0b\u8f7d\u56fa\u4ef6\u3002   \u89c2\u5bdf\u8fd0\u884c\u7ed3\u679c\uff1a", 
            "title": "\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/mbedos/#_4", 
            "text": "Mbed OS \u5bf9\u4f4e\u529f\u8017\u84dd\u7259\u652f\u6301\u975e\u5e38\u53cb\u597d\uff0c\u8fd9\u91cc\u63d0\u4f9b\u4e00\u4e9b\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\uff1a  ./nrf52840-mdk/examples/mbedos5/mbed-os-example-ble\n\u251c\u2500\u2500 BLE_BatteryLevel\n\u251c\u2500\u2500 BLE_Beacon\n\u251c\u2500\u2500 BLE_Button\n\u251c\u2500\u2500 BLE_EddystoneObserver\n\u251c\u2500\u2500 BLE_EddystoneService\n\u251c\u2500\u2500 BLE_GAPButton\n\u251c\u2500\u2500 BLE_HeartRate\n\u251c\u2500\u2500 BLE_LED\n\u251c\u2500\u2500 BLE_LEDBlinker\n\u251c\u2500\u2500 BLE_Thermometer\n\u2514\u2500\u2500 README.md  \u53ef\u4ee5\u5207\u6362\u5230\u793a\u4f8b\u76ee\u5f55\uff0c\u4f8b\u5982\uff0c BLE_BatteryLevel :  $  cd  BLE_BatteryLevel  \u6dfb\u52a0 Mbed OS \u5e93\uff1a  BLE_BatteryLevel$ mbed add https://github.com/makerdiary/mbed-os.git  \u7f16\u8bd1\u4e0b\u8f7d\uff1a  BLE_BatteryLevel$ mbed compile --target NRF52840_MDK --toolchain GCC_ARM --flash  \u6253\u5f00  nRF Connect  app\uff0c\u627e\u5230\u540d\u4e3a  BATTERY  \u7684\u8bbe\u5907\uff0c\u8fde\u63a5\u8bbe\u5907\uff0c\u53ef\u53d1\u73b0 UUID \u4e3a  0x180F  \u7684\u7535\u6c60\u670d\u52a1\uff0c\u8be5\u670d\u52a1\u5305\u542b UUID \u4e3a  0x2A19  \u7684  Battery level  \u5c5e\u6027\u3002   \u5176\u4ed6\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002", 
            "title": "\u4f4e\u529f\u8017\u84dd\u7259\u793a\u4f8b"
        }, 
        {
            "location": "/cn/mbedos/#_5", 
            "text": "\u6211\u4eec\u8fd8\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u793a\u4f8b\u5230  nrf52840-mdk  \u4ed3\u5e93\u4e2d\uff0c\u656c\u8bf7\u5173\u6ce8\uff01", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/mbedos/#_6", 
            "text": "Arm Mbed OS developer site  Mbed OS Documentation  ARMmbed/mbed-os repository", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/mbedos/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/zephyr/", 
            "text": "Zephyr \nLinux \u57fa\u91d1\u4f1a\u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5e94\u7528\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\n\n\n\n\n\u7b80\u4ecb\n\n\nZephyr OS \u662f\u4e13\u95e8\u4e3a\u8d44\u6e90\u53d7\u9650\u8bbe\u5907\u6784\u5efa\u3001\u9488\u5bf9\u4f4e\u529f\u8017\u3001\u5c0f\u578b\u5185\u5b58\u5fae\u5904\u7406\u5668\u8bbe\u5907\u800c\u8fdb\u884c\u4f18\u5316\u7684\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5c0f\u578b\u3001\u53ef\u6269\u5c55\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\uff0c\u652f\u6301\u591a\u79cd\u786c\u4ef6\u67b6\u6784\u53ca\u591a\u79cd\u5f00\u53d1\u677f\uff08\u5305\u62ec ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, \u4ee5\u53ca RISC-V\uff09\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u5c0f\u81f3 8kB \u5185\u5b58\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002\n\n\nZephyr \u5185\u6838\u76f8\u6bd4\u5176\u4ed6\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5177\u6709\u8bb8\u591a\u4f18\u52bf\uff1a\n\n\n\n\n\u5355\u4e00\u5730\u5740\u7a7a\u95f4\n\uff1a\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u548c\u5185\u6838\u4ee3\u7801\u90fd\u5728\u5355\u4e2a\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u4e2d\u6267\u884c\u3002\n\n\n\u9ad8\u5ea6\u53ef\u914d\u7f6e\n\uff1a\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u53ea\u5305\u542b\u6240\u9700\u7684\u529f\u80fd\uff0c\u5e76\u6307\u5b9a\u5b83\u4eec\u7684\u6570\u91cf\u548c\u5927\u5c0f\u3002\n\n\n\u7f16\u8bd1\u65f6\u8d44\u6e90\u5b9a\u4e49\n\uff1a\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u5b9a\u4e49\u7cfb\u7edf\u8d44\u6e90\uff0c\u4ece\u800c\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002\n\n\n\u6700\u5c0f\u7684\u9519\u8bef\u68c0\u67e5\n\uff1a\u63d0\u4f9b\u6700\u5c11\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u68c0\u67e5\uff0c\u4ee5\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u9009\u7684\u9519\u8bef\u68c0\u67e5\u57fa\u7840\u7ed3\u6784\u6765\u5e2e\u52a9\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002\n\n\n\u5e7f\u6cdb\u7684\u670d\u52a1\u5957\u4ef6\n\uff1a\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u591a\u79cd\u670d\u52a1\uff0c\u5982\u591a\u7ebf\u7a0b\u670d\u52a1\u3001\u4e2d\u65ad\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u4f20\u9012\u670d\u52a1\u3001\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u3002\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u8bbf\u95ee \nZephyr Project\n \u5b98\u7f51\u3002\n\n\n\u5feb\u901f\u5165\u95e8\n\n\n\u514b\u9686 Zephyr \u6e90\u7801\n\n\nZephyr OS \u6e90\u7801\u5df2\u7ecf\u6258\u7ba1\u5728 GitHub \u4e0a\uff0c\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4f7f\u7528\uff1a\n\n\n$ git clone https://github.com/zephyrproject-rtos/zephyr.git\n\n\n\n\n\u642d\u5efa\u5f00\u53d1\u73af\u5883\n\n\nZephyr \u9879\u76ee\u4f7f\u7528 \nCMake\n \u5de5\u5177\u7ba1\u7406\u548c\u7f16\u8bd1\u9879\u76ee\u3002 CMake \u53ef\u4ee5\u7528\u6765\u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528 \nmake\n \u6216 \nninja\n \u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u505a\u6cd5\u3002\u4e0b\u9762\u4f1a\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ecb\u7ecd\uff1a\n\n\n\n\nWindows\n\n\nmacOS\n\n\nLinux\n\n\n\n\nWindows\n\n\n\u5728 Windows \u4e0a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 \nChocolatey\n \u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff1a\n\n\n\n\n\n\n\u6309\u7167\n\u5b98\u65b9\u6307\u5f15\n\u5b89\u88c5 Chocolatey\uff1b\n\n\n\n\n\n\n\u4ee5\u7ba1\u7406\u5458\u8fd0\u884c\u547d\u4ee4\u884c\u5de5\u5177(\ncmd.exe\n)\uff1b\n\n\n\n\n\n\n\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u5b89\u88c5\u8f6f\u4ef6\u65f6\u53ef\u4ee5\u65e0\u987b\u786e\u8ba4\uff1a\n\n\n$ choco feature \nenable\n -n allowGlobalConfirmation\n\n\n\n\n\n\n\n\n\u5b89\u88c5 Cmake\uff1a\n\n\n$ choco install cmake --installargs \nADD_CMAKE_TO_PATH=System\n\n\n\n\n\n\n\n\n\n\u5b89\u88c5\u5176\u4ed6\u5fc5\u8981\u5de5\u5177\uff1a\n\n\n$ choco install git python ninja dtc-msys2 gperf\n\n\n\n\n\n\n\n\n\u5173\u95ed cmd.exe\uff0c\u4ee5\u666e\u901a\u7528\u6237\u91cd\u65b0\u6253\u5f00\uff0c\u5e76\u5b89\u88c5 Python \u6a21\u5757\uff1a\n\n\n$ \ncd\n ./zephyr\n$ pip install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt\n\n\n\n\n\n\n\n\n\u4e0b\u8f7d\u5e76\u5b89\u88c5 \nGNU Arm Embedded Toolchain\n\uff0c\u53ef\u4ee5\u6309\u7167\u5230 \nc:\\gccarmemb\n\u3002\n\n\n\n\n\n\n\u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a\n\n\n$ \nset\n \nZEPHYR_TOOLCHAIN_VARIANT\n=\ngccarmemb\n$ \nset\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\nc:\n\\g\nccarmemb\n\n\n\n\n\n\n\n\nmacOS\n\n\n\u5728 macOS\uff0c\u4f7f\u7528 \nHomebrew\n \u5305\u7ba1\u7406\u5668\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u5de5\u5177\uff0c\u6309\u7167\u5b98\u65b9\u6700\u65b0\u6307\u5f15\u5373\u53ef\u5b8c\u6210\u5b89\u88c5\u3002\n\n\nHomebrew \u6210\u529f\u5b89\u88c5\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a\n\n\n$ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf\n$ curl -O \nhttps://bootstrap.pypa.io/get-pip.py\n\n$ ./get-pip.py\n$ rm get-pip.py\n$ \ncd\n ~/zephyr   \n# or to the folder where you cloned the zephyr repo\n\n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt\n\n\n\n\n\u7136\u540e\uff0c\u4e0b\u8f7d\u5e76\u5b89\u88c5 \nGNU Arm Embedded Toolchain\n\uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a\n\n\n# \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile \n\n\nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\n\n\n\nLinux\n\n\n\u5bf9\u4e8e Linux \u7cfb\u7edf\uff0c\u8fd9\u91cc Ubuntu 16.04 \u4e3a\u4f8b\uff0c\u5148\u66f4\u65b0\u7cfb\u7edf\uff1a\n\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n\n\n\n\n\u7136\u540e\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a\n\n\n$ sudo apt-get install --no-install-recommends git cmake ninja-build gperf \n\\\n\n  ccache doxygen dfu-util device-tree-compiler \n\\\n\n  python3-ply python3-pip python3-setuptools xz-utils file make gcc-multilib \n\\\n\n  autoconf automake libtool\n\n\n\n\n\u5b89\u88c5 Zephyr \u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff1a\n\n\n$ \ncd\n ~/zephyr  \n# or to your directory where zephyr is cloned\n\n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt\n\n\n\n\n\u4e0b\u8f7d\u5e76\u5b89\u88c5 \nGNU Arm Embedded Toolchain\n\uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a\n\n\n# \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile \n\n\nexport\n \nGCCARMEMB_TOOLCHAIN_PATH\n=\npath to install directory\n/gcc-arm-none-eabi-6-2017-q2-update\n\n\nexport\n \nZEPHYR_GCC_VARIANT\n=\ngccarmemb\n\n\n\n\n\u6dfb\u52a0 nRF52840-MDK \u652f\u6301\n\n\n\u4e3a\u4e86\u8ba9 Zephyr OS \u652f\u6301 nRF52840-MDK \u677f\u5b50\uff0c\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6\uff0c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n.zephyr/boards/arm/nrf52840_mdk\n\u251c\u2500\u2500 Kconfig\n\u251c\u2500\u2500 Kconfig.board\n\u251c\u2500\u2500 Kconfig.defconfig\n\u251c\u2500\u2500 board.cmake\n\u251c\u2500\u2500 board.h\n\u251c\u2500\u2500 nrf52840_mdk.dts\n\u251c\u2500\u2500 nrf52840_mdk.yaml\n\u2514\u2500\u2500 nrf52840_mdk_defconfig\n\n\n\n\n\u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece \nmakerdiary/zephyr\n \u62c9\u53d6\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\uff1a\n\n\n$ \ncd\n \nzephyr git clone location\n\n$ git remote add makerdiary https://github.com/makerdiary/zephyr.git\n$ git pull makerdiary master\n\n\n\n\n\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b\n\n\n\u5b8c\u6210\u4e0a\u8ff0\u51c6\u5907\u5de5\u4f5c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4ee5 \nhello_world\n \u4e3a\u4f8b\uff1a\n\n\n\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a\n\n\n$ \nunset\n ZEPHYR_SDK_INSTALL_DIR\n$ \ncd\n \nzephyr git clone location\n\n$ \nsource\n zephyr-env.sh\n\n\n\n\n\u5728 \nhello_world\n \u76ee\u5f55\u521b\u5efa \nbuild\n \u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5e76\u5b8c\u6210\u4e0b\u8f7d\uff1a\n\n\n$ \ncd\n nrf52840-mdk/examples/zephyr/hello_world/\n$ mkdir build \n \ncd\n build\n\nbuild$ cmake -GNinja -DBOARD\n=\nnrf52840_mdk ..\nbuild$ ninja\nbuild$ ninja flash\n\n\n\n\n\n\n\u6253\u5f00\u4e32\u53e3\u5de5\u5177\uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\u8f93\u51fa\uff1a\n\n\n***** Booting Zephyr OS \n1\n.12.0-rc3 *****\nHello World! arm\n\n\n\n\n\u5b8c\u6210\u4ee5\u4e0a\u793a\u4f8b\u540e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5 \nnrf52840-mdk/examples/zephyr/\n \u76ee\u5f55\u4e0b\u7684\u5176\u4ed6\u4f8b\u5b50\u3002\n\n\n\u66f4\u591a\u793a\u4f8b\n\n\n\u968f\u7740 Zephyr \u529f\u80fd\u4e0d\u65ad\u4e30\u5bcc\uff0c\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5e94\u7528\u793a\u4f8b\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\uff0c\u656c\u8bf7\u5173\u6ce8\uff01\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\nZephyr Project site\n\n\nZephyr Project Documentation\n\n\nzephyrproject-rtos/zephyr repository\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "Zephyr"
        }, 
        {
            "location": "/cn/zephyr/#zephyr-linux", 
            "text": "", 
            "title": "Zephyr Linux \u57fa\u91d1\u4f1a\u5f00\u6e90\u3001\u9762\u5411\u7269\u8054\u7f51\u5e94\u7528\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf"
        }, 
        {
            "location": "/cn/zephyr/#_1", 
            "text": "Zephyr OS \u662f\u4e13\u95e8\u4e3a\u8d44\u6e90\u53d7\u9650\u8bbe\u5907\u6784\u5efa\u3001\u9488\u5bf9\u4f4e\u529f\u8017\u3001\u5c0f\u578b\u5185\u5b58\u5fae\u5904\u7406\u5668\u8bbe\u5907\u800c\u8fdb\u884c\u4f18\u5316\u7684\u7269\u8054\u7f51\u5d4c\u5165\u5f0f\u5c0f\u578b\u3001\u53ef\u6269\u5c55\u7684\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\uff08RTOS\uff09\uff0c\u652f\u6301\u591a\u79cd\u786c\u4ef6\u67b6\u6784\u53ca\u591a\u79cd\u5f00\u53d1\u677f\uff08\u5305\u62ec ARM Cortex-M, Intel x86, ARC, NIOS II, Tensilica Xtensa, \u4ee5\u53ca RISC-V\uff09\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u5c0f\u81f3 8kB \u5185\u5b58\u7684\u7cfb\u7edf\u4e0a\u8fd0\u884c\u3002  Zephyr \u5185\u6838\u76f8\u6bd4\u5176\u4ed6\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u5177\u6709\u8bb8\u591a\u4f18\u52bf\uff1a   \u5355\u4e00\u5730\u5740\u7a7a\u95f4 \uff1a\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u548c\u5185\u6838\u4ee3\u7801\u90fd\u5728\u5355\u4e2a\u5171\u4eab\u5730\u5740\u7a7a\u95f4\u4e2d\u6267\u884c\u3002  \u9ad8\u5ea6\u53ef\u914d\u7f6e \uff1a\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u53ea\u5305\u542b\u6240\u9700\u7684\u529f\u80fd\uff0c\u5e76\u6307\u5b9a\u5b83\u4eec\u7684\u6570\u91cf\u548c\u5927\u5c0f\u3002  \u7f16\u8bd1\u65f6\u8d44\u6e90\u5b9a\u4e49 \uff1a\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u5b9a\u4e49\u7cfb\u7edf\u8d44\u6e90\uff0c\u4ece\u800c\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002  \u6700\u5c0f\u7684\u9519\u8bef\u68c0\u67e5 \uff1a\u63d0\u4f9b\u6700\u5c11\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u68c0\u67e5\uff0c\u4ee5\u51cf\u5c11\u4ee3\u7801\u5927\u5c0f\u5e76\u63d0\u9ad8\u6027\u80fd\u3002\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u9009\u7684\u9519\u8bef\u68c0\u67e5\u57fa\u7840\u7ed3\u6784\u6765\u5e2e\u52a9\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u8c03\u8bd5\u3002  \u5e7f\u6cdb\u7684\u670d\u52a1\u5957\u4ef6 \uff1a\u4e3a\u8f6f\u4ef6\u5f00\u53d1\u63d0\u4f9b\u591a\u79cd\u670d\u52a1\uff0c\u5982\u591a\u7ebf\u7a0b\u670d\u52a1\u3001\u4e2d\u65ad\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u670d\u52a1\u3001\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u4f20\u9012\u670d\u52a1\u3001\u7535\u6e90\u7ba1\u7406\u670d\u52a1\u3002   \u4e86\u89e3\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u8bbf\u95ee  Zephyr Project  \u5b98\u7f51\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/zephyr/#_2", 
            "text": "", 
            "title": "\u5feb\u901f\u5165\u95e8"
        }, 
        {
            "location": "/cn/zephyr/#zephyr", 
            "text": "Zephyr OS \u6e90\u7801\u5df2\u7ecf\u6258\u7ba1\u5728 GitHub \u4e0a\uff0c\u53ef\u4ee5\u76f4\u63a5\u514b\u9686\u4f7f\u7528\uff1a  $ git clone https://github.com/zephyrproject-rtos/zephyr.git", 
            "title": "\u514b\u9686 Zephyr \u6e90\u7801"
        }, 
        {
            "location": "/cn/zephyr/#_3", 
            "text": "Zephyr \u9879\u76ee\u4f7f\u7528  CMake  \u5de5\u5177\u7ba1\u7406\u548c\u7f16\u8bd1\u9879\u76ee\u3002 CMake \u53ef\u4ee5\u7528\u6765\u751f\u6210\u7f16\u8bd1\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528  make  \u6216  ninja  \u8fdb\u884c\u7f16\u8bd1\uff0c\u8fd9\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u505a\u6cd5\u3002\u4e0b\u9762\u4f1a\u9488\u5bf9\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ecb\u7ecd\uff1a   Windows  macOS  Linux", 
            "title": "\u642d\u5efa\u5f00\u53d1\u73af\u5883"
        }, 
        {
            "location": "/cn/zephyr/#windows", 
            "text": "\u5728 Windows \u4e0a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528  Chocolatey  \u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\u6784\u5efa\u5de5\u5177\uff1a    \u6309\u7167 \u5b98\u65b9\u6307\u5f15 \u5b89\u88c5 Chocolatey\uff1b    \u4ee5\u7ba1\u7406\u5458\u8fd0\u884c\u547d\u4ee4\u884c\u5de5\u5177( cmd.exe )\uff1b    \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u5b89\u88c5\u8f6f\u4ef6\u65f6\u53ef\u4ee5\u65e0\u987b\u786e\u8ba4\uff1a  $ choco feature  enable  -n allowGlobalConfirmation    \u5b89\u88c5 Cmake\uff1a  $ choco install cmake --installargs  ADD_CMAKE_TO_PATH=System     \u5b89\u88c5\u5176\u4ed6\u5fc5\u8981\u5de5\u5177\uff1a  $ choco install git python ninja dtc-msys2 gperf    \u5173\u95ed cmd.exe\uff0c\u4ee5\u666e\u901a\u7528\u6237\u91cd\u65b0\u6253\u5f00\uff0c\u5e76\u5b89\u88c5 Python \u6a21\u5757\uff1a  $  cd  ./zephyr\n$ pip install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt    \u4e0b\u8f7d\u5e76\u5b89\u88c5  GNU Arm Embedded Toolchain \uff0c\u53ef\u4ee5\u6309\u7167\u5230  c:\\gccarmemb \u3002    \u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a  $  set   ZEPHYR_TOOLCHAIN_VARIANT = gccarmemb\n$  set   GCCARMEMB_TOOLCHAIN_PATH = c: \\g ccarmemb", 
            "title": "Windows"
        }, 
        {
            "location": "/cn/zephyr/#macos", 
            "text": "\u5728 macOS\uff0c\u4f7f\u7528  Homebrew  \u5305\u7ba1\u7406\u5668\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u5de5\u5177\uff0c\u6309\u7167\u5b98\u65b9\u6700\u65b0\u6307\u5f15\u5373\u53ef\u5b8c\u6210\u5b89\u88c5\u3002  Homebrew \u6210\u529f\u5b89\u88c5\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a  $ brew install cmake ninja dfu-util doxygen qemu dtc python3 gperf\n$ curl -O  https://bootstrap.pypa.io/get-pip.py \n$ ./get-pip.py\n$ rm get-pip.py\n$  cd  ~/zephyr    # or to the folder where you cloned the zephyr repo \n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt  \u7136\u540e\uff0c\u4e0b\u8f7d\u5e76\u5b89\u88c5  GNU Arm Embedded Toolchain \uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a  # \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile   export   GCCARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update  export   ZEPHYR_GCC_VARIANT = gccarmemb", 
            "title": "macOS"
        }, 
        {
            "location": "/cn/zephyr/#linux", 
            "text": "\u5bf9\u4e8e Linux \u7cfb\u7edf\uff0c\u8fd9\u91cc Ubuntu 16.04 \u4e3a\u4f8b\uff0c\u5148\u66f4\u65b0\u7cfb\u7edf\uff1a  $ sudo apt-get update\n$ sudo apt-get upgrade  \u7136\u540e\u5b89\u88c5\u6240\u9700\u7684\u5de5\u5177\uff1a  $ sudo apt-get install --no-install-recommends git cmake ninja-build gperf  \\ \n  ccache doxygen dfu-util device-tree-compiler  \\ \n  python3-ply python3-pip python3-setuptools xz-utils file make gcc-multilib  \\ \n  autoconf automake libtool  \u5b89\u88c5 Zephyr \u9700\u8981\u7684\u8f6f\u4ef6\u5305\uff1a  $  cd  ~/zephyr   # or to your directory where zephyr is cloned \n$ pip3 install --user -r scripts/requirements.txt\n$ pip2 install --user -r scripts/py2-requirements.txt  \u4e0b\u8f7d\u5e76\u5b89\u88c5  GNU Arm Embedded Toolchain \uff0c\u786e\u4fdd\u5c06\u5176\u6dfb\u52a0\u5230\u7cfb\u7edf\u53d8\u91cf\u4e2d\uff1a  # \u5c06\u4ee5\u4e0b\u811a\u672c\u6dfb\u52a0\u5230 ~/.bash_profile   export   GCCARMEMB_TOOLCHAIN_PATH = path to install directory /gcc-arm-none-eabi-6-2017-q2-update  export   ZEPHYR_GCC_VARIANT = gccarmemb", 
            "title": "Linux"
        }, 
        {
            "location": "/cn/zephyr/#nrf52840-mdk", 
            "text": "\u4e3a\u4e86\u8ba9 Zephyr OS \u652f\u6301 nRF52840-MDK \u677f\u5b50\uff0c\u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6\uff0c\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a  .zephyr/boards/arm/nrf52840_mdk\n\u251c\u2500\u2500 Kconfig\n\u251c\u2500\u2500 Kconfig.board\n\u251c\u2500\u2500 Kconfig.defconfig\n\u251c\u2500\u2500 board.cmake\n\u251c\u2500\u2500 board.h\n\u251c\u2500\u2500 nrf52840_mdk.dts\n\u251c\u2500\u2500 nrf52840_mdk.yaml\n\u2514\u2500\u2500 nrf52840_mdk_defconfig  \u4f60\u53ef\u4ee5\u76f4\u63a5\u4ece  makerdiary/zephyr  \u62c9\u53d6\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\uff1a  $  cd   zephyr git clone location \n$ git remote add makerdiary https://github.com/makerdiary/zephyr.git\n$ git pull makerdiary master", 
            "title": "\u6dfb\u52a0 nRF52840-MDK \u652f\u6301"
        }, 
        {
            "location": "/cn/zephyr/#_4", 
            "text": "\u5b8c\u6210\u4e0a\u8ff0\u51c6\u5907\u5de5\u4f5c\u4fbf\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u8fd9\u91cc\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4ee5  hello_world  \u4e3a\u4f8b\uff1a  \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u8bbe\u7f6e Zephyr \u73af\u5883\u53d8\u91cf\uff1a  $  unset  ZEPHYR_SDK_INSTALL_DIR\n$  cd   zephyr git clone location \n$  source  zephyr-env.sh  \u5728  hello_world  \u76ee\u5f55\u521b\u5efa  build  \u76ee\u5f55\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u7f16\u8bd1\u5e76\u5b8c\u6210\u4e0b\u8f7d\uff1a  $  cd  nrf52840-mdk/examples/zephyr/hello_world/\n$ mkdir build    cd  build\n\nbuild$ cmake -GNinja -DBOARD = nrf52840_mdk ..\nbuild$ ninja\nbuild$ ninja flash   \u6253\u5f00\u4e32\u53e3\u5de5\u5177\uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4fe1\u606f\u8f93\u51fa\uff1a  ***** Booting Zephyr OS  1 .12.0-rc3 *****\nHello World! arm  \u5b8c\u6210\u4ee5\u4e0a\u793a\u4f8b\u540e\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c1d\u8bd5  nrf52840-mdk/examples/zephyr/  \u76ee\u5f55\u4e0b\u7684\u5176\u4ed6\u4f8b\u5b50\u3002", 
            "title": "\u7f16\u8bd1\u8fd0\u884c\u7b2c\u4e00\u4e2a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/zephyr/#_5", 
            "text": "\u968f\u7740 Zephyr \u529f\u80fd\u4e0d\u65ad\u4e30\u5bcc\uff0c\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5e94\u7528\u793a\u4f8b\u5230  nrf52840-mdk  \u4ed3\u5e93\uff0c\u656c\u8bf7\u5173\u6ce8\uff01", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/zephyr/#_6", 
            "text": "Zephyr Project site  Zephyr Project Documentation  zephyrproject-rtos/zephyr repository", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/zephyr/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/mynewt/", 
            "text": "Mynewt \nApache \u5f00\u6e90\u3001\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf\n\n\n\n\n\u7b80\u4ecb\n\n\nMynewt \u662f\u4e00\u6b3e\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u3002Apache Mynewt \u4f7f\u7528 Newt \u6784\u5efa\u548c\u5305\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u4ec5\u9009\u62e9\u6240\u9700\u7684\u7ec4\u4ef6\u6765\u6784\u5efa\u64cd\u4f5c\u7cfb\u7edf\u3002\u5176\u76ee\u6807\u662f\u4f7f\u529f\u8017\u548c\u6210\u672c\u6210\u4e3a\u9a71\u52a8\u56e0\u7d20\u7684\u5fae\u63a7\u5236\u5668\u73af\u5883\u7684\u5e94\u7528\u5f00\u53d1\u53d8\u5f97\u5bb9\u6613\u3002\n\n\nMynewt \u63d0\u4f9b\u5f00\u6e90\u84dd\u7259 5.0 \u534f\u8bae\u6808\u548c\u5d4c\u5165\u5f0f\u4e2d\u95f4\u4ef6\u3001\u95ea\u5b58\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u5806\u6808\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001FATFS\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001\u7edf\u8ba1\u548c\u8bb0\u5f55\u57fa\u7840\u8bbe\u65bd\u7b49\u7684\u652f\u6301\u3002\n\n\n\u5b89\u88c5 Newt\n\n\n\u4e3a\u4e86\u662f\u5f00\u53d1\u8005\u80fd\u591f\u66f4\u597d\u5730\u4f7f\u7528 Mynewt \u63d0\u4f9b\u7684\u7ec4\u4ef6\u6765\u5f00\u53d1\u5e94\u7528\uff0cMynewt \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a \nnewt\n \u7684\u6784\u5efa\u5de5\u5177\u548c\u5305\u7ba1\u7406\u5668\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002\n\n\n\u4e0b\u9762\u5c06\u4ecb\u7ecd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u5982\u4f55\u5b89\u88c5 \nnewt\n\uff1a\n\n\n\n\nWindows\n\n\nmacOS\n\n\nLinux\n\n\n\n\nWindows\n\n\n\u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982 \nMSYS2\n\u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a\n\n\n\n\n\n\n\u524d\u5f80 \nMSYS2\n \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b\n\n\n\n\n\n\n\u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a\n\n\n$ pacman -Syu\n\n\n\n\n\n\n\n\n\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a\n\n\n$ pacman -Su\n\n\n\n\n\n\n\n\n\u5b89\u88c5 \ngit\n \u548c \ntar\n \u5de5\u5177:\n\n\n$ pacman -S git tar\n\n\n\n\n\n\n\n\n\u4e0b\u8f7d\u5e76\u89e3\u538b newt \u6e90\u7801\uff1a\n\n\n$ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz\n$ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz\n\n\n\n\n\n\n\n\n\u8fd0\u884c \nbuild.sh\n \u6765\u7f16\u8bd1 \nnewt\n \u5de5\u5177\uff1a\n\n\n$ \ncd\n mynewt-newt-mynewt_1_3_0_tag   \n$ ./build.sh\n$ rm /tmp/mynewt_1_3_0_tag.tar.gz\n\n\n\n\n\n\n\n\n\u7f16\u8bd1\u6210\u529f\u540e\u5c06\u751f\u6210 \nnewt/newt.exe\n \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c06\u5176\u79fb\u52a8\u5230\u7cfb\u7edf\u76ee\u5f55\uff1a\n\n\n$ mv newt/newt.exe /usr/bin\n\n\n\n\n\n\n\n\nmacOS\n\n\n\u5728 macOS \u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \nHomebrew\n \u6765\u5b89\u88c5 newt\u3002\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5\uff0c\u9700\u8981\u5148\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\n$ brew tap runtimeco/homebrew-mynewt\n$ brew update\n\n\n\n\n\u7136\u540e\u5b89\u88c5\u6700\u65b0\u7248 \nnewt\n \u5de5\u5177\uff1a\n\n\n$ brew update\n$ brew install mynewt-newt\n\n\n\n\nLinux\n\n\n\u5728 Linux \u7cfb\u7edf\uff08\u6bd4\u5982 Ubuntu\uff09\uff0c\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b89\u88c5 newt\uff1a\n\n\n$ sudo apt-get update\n$ sudo apt-get install newt\n\n\n\n\n\n\nNote\n\n\n\u5982\u679c\u9047\u5230\u9519\u8bef (\u6bd4\u5982\u4e22\u5931 \nsys/mman.h\n \u6587\u4ef6), \u9700\u8981\u5148\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u4e86 32\u4f4d \nglibc\n:\n\n$ sudo apt-get install gcc-multilib\n\n\n\n\n\n\u8fd0\u884c Blinky \u793a\u4f8b\n\n\n\u5b89\u88c5\u597d newt \u4e4b\u540e\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 \nblinky\n \u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u9a8c\u8bc1\uff1a\n\n\n\u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\u5e76\u5207\u6362\u5230 \nblinky\n \u793a\u4f8b\u76ee\u5f55\uff1a\n\n\n$ \ncd\n ./nrf52840-mdk/examples/mynewt/blinky\n\n\n\n\n\u4f7f\u7528 \nnewt install\n \u547d\u4ee4\u5b89\u88c5\u793a\u4f8b\u4f9d\u8d56\u9879\uff1a\n\n\nblinky$ newt install\napache-mynewt-core successfully installed version \n0\n.0.0-none\nmynewt_nrf52840_mdk successfully installed version \n0\n.0.0-none\n\n\n\n\n\u8be5\u793a\u4f8b\u5df2\u7ecf\u63d0\u4f9b\u4e86\u51e0\u4e2a\u53ef\u7528\u7684 target\uff0c\u5176\u4e2d \nnrf52_blinky\n \u4e3a\u5e94\u7528\u7a0b\u5e8f\u3001\nnrf52_boot\n \u4e3a Bootloader\uff0c\u53ef\u4ee5\u4f7f\u7528 \nnewt target show\n \u547d\u4ee4\u67e5\u770b\uff1a\n\n\nblinky$ newt target show\ntargets/my_blinky_sim\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@apache-mynewt-core/hw/bsp/native\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_blinky\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_boot\n    \napp\n=\n@apache-mynewt-core/apps/boot\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\noptimized\n\n\n\n\n\u8fd0\u884c \nnewt build nrf52_boot\n \u547d\u4ee4\u7f16\u8bd1 Bootloader\uff1a\n\n\nblinky$ newt build nrf52_boot\nBuilding target targets/nrf52_boot\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c\nCompiling repos/apache-mynewt-core/apps/boot/src/boot.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/loader.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c\n...\nArchiving nrf52_boot-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf\nTarget successfully built: targets/nrf52_boot\n\n\n\n\n\u8fd0\u884c \nnewt build nrf52_blinky\n \u547d\u4ee4\u7f16\u8bd1 blinky \u5e94\u7528\uff1a\n\n\nblinky$ newt build nrf52_blinky\nBuilding target targets/nrf52_blinky\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52840.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/sbrk.c\nCompiling apps/blinky/src/main.c\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/hal_bsp.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c\nCompiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_common.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c\n...\nArchiving nrf52_blinky-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf\nTarget successfully built: targets/nrf52_blinky\n\n\n\n\n\u7f16\u8bd1\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 \nnewt create-image nrf52_blinky 1.0.0\n \u547d\u4ee4\u521b\u5efa\u955c\u50cf\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u7248\u672c\u53f7\uff0c\u8fd9\u91cc\u4ee5 \n1.0.0\n \u4f5c\u4e3a\u793a\u4f8b\uff1a\n\n\nblinky$ newt create-image nrf52_blinky \n1\n.0.0\nApp image succesfully generated: /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img\n\n\n\n\n\u4e00\u5207\u8fdb\u884c\u6b63\u5e38\uff0c\u8fd0\u884c \nnewt load nrf52_boot\n \u547d\u4ee4\u4e0b\u8f7d Bootloader\uff1a\n\n\n\n\n\u63d0\u793a\n\n\nnRF52840-MDK \u786c\u4ef6\u652f\u6301 OpenOCD \u8c03\u8bd5\u5668\uff0cMynewt \u4f7f\u7528 OpenOCD \u6765\u4e0b\u8f7d\u56fa\u4ef6\u548c\u8c03\u8bd5\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u94fe\u63a5\u6307\u5f15\u5b8c\u6210\u5b89\u88c5\uff1a\nOpenOCD \u5b89\u88c5\u6307\u5f15\n\u3002\n\n\n\n\nblinky$ newt load nrf52_boot\nLoading bootloader\n\n\n\n\n\u8fd0\u884c \nnewt load nrf52_blinky\n \u547d\u4ee4\u4e0b\u8f7d blinky \u5e94\u7528\uff1a\n\n\nblinky$ newt load nrf52_blinky\nLoading app image into slot \n1\n\n\n\n\n\n\u89c2\u5bdf\u7a0b\u5e8f\u662f\u5426\u8fd0\u884c\u6b63\u5e38\uff1a\n\n\n\n\n\u521b\u5efa\u65b0\u5de5\u7a0b\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u81ea\u5df1\u7684\u65b0\u5de5\u7a0b\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5373\u53ef\u5feb\u901f\u5b8c\u6210\u3002\n\n\n\u5728\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\uff08\u8fd9\u91cc\u5047\u8bbe\u4e3a \ndev\n\uff09\u8fd0\u884c \nnewt new myproj\n \u521b\u5efa\u540d\u4e3a \nmyproj\n \u7684\u65b0\u5de5\u7a0b\uff1a\n\n\n$cd\n ~/dev\n$ newt new myproj\nDownloading project skeleton from apache/mynewt-blinky...\nInstalling skeleton in myproj...\nProject myproj successfully created.\n\n\n\n\n\u5b8c\u6210\u540e newt \u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u9879\u76ee\u6a21\u677f\uff0c\u5927\u81f4\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a\n\n\n.\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 NOTICE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 apps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 blinky\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pkg.yml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 main.c\n\u251c\u2500\u2500 project.yml\n\u2514\u2500\u2500 targets\n    \u251c\u2500\u2500 my_blinky_sim\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pkg.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 target.yml\n    \u2514\u2500\u2500 unittest\n        \u251c\u2500\u2500 pkg.yml\n        \u2514\u2500\u2500 target.yml\n\n\n6\n directories, \n10\n files\n\n\n\n\n\u6211\u4eec\u5df2\u7ecf\u4e3a nRF52840-MDK \u63d0\u4f9b Mynewt \u677f\u7ea7\u652f\u6301\u5305 \nmynewt_nrf52840_mdk\n\uff0c\u53ef\u4ee5\u5728 \nproject.yml\n \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a\n\n\n\n\n\u6ce8\u610f\n\n\n\u4f60\u9700\u8981\u5c06 \nvers\n \u53d8\u91cf\u8bbe\u7f6e\u4e3a \n0-dev\n \u4ee5\u4fbf\u4f7f\u7528 \nmaster\n \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\u3002\n\n\n\n\nproject.name: \nmyproj\n\n\nproject.repositories:\n    - apache-mynewt-core\n    - mynewt_nrf52840_mdk\n\n\n# Use github\ns distribution mechanism for core ASF libraries.\n\n\n# This provides mirroring automatically for us.\n\n\n#\n\nrepository.apache-mynewt-core:\n    type: github\n    vers: \n0\n-dev\n    user: apache\n    repo: mynewt-core\n\n\n# a special repo to hold hardware specific stuff for nRF52840-MDK\n\nrepository.mynewt_nrf52840_mdk:\n    type: github\n    vers: \n0\n-dev\n    user: makerdiary\n    repo: mynewt_nrf52840_mdk\n\n\n\n\n\u8fd0\u884c \nnewt install\n \u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u9879\uff1a\n\n\nmyproj$ newt install\napache-mynewt-core successfully installed version \n0\n.0.0-none\nmynewt_nrf52840_mdk successfully installed version \n0\n.0.0-none\n\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u4e3a\u9879\u76ee\u521b\u5efa\u4e24\u4e2a target\uff0c\u4e00\u4e2a\u662f Bootloader\uff0c\u4e00\u4e2a\u662f\u5e94\u7528\u7a0b\u5e8f\uff1a\n\n\nmyproj$ newt target create nrf52_boot\nmyproj$ newt target \nset\n nrf52_boot \napp\n=\n@apache-mynewt-core/apps/boot\nmyproj$ newt target \nset\n nrf52_boot \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target \nset\n nrf52_boot \nbuild_profile\n=\noptimized\n\n\n\n\nmyproj$ newt target create nrf52_blinky\nmyproj$ newt target \nset\n nrf52_blinky \napp\n=\napps/blinky\nmyproj$ newt target \nset\n nrf52_blinky \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target \nset\n nrf52_blinky \nbuild_profile\n=\ndebug\n\n\n\n\n\u8fd0\u884c \nnewt target show\n \u67e5\u770b\u76ee\u6807\u8bbe\u7f6e\uff1a\n\n\nmyproj$ newt target show\ntargets/my_blinky_sim\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@apache-mynewt-core/hw/bsp/native\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_blinky\n    \napp\n=\napps/blinky\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\ndebug\ntargets/nrf52_boot\n    \napp\n=\n@apache-mynewt-core/apps/boot\n    \nbsp\n=\n@mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n    \nbuild_profile\n=\noptimized\n\n\n\n\n\u8fd9\u65f6\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u76ee\u6807\u4ee3\u7801\uff1a\n\n\nmyproj$ newt build nrf52_boot\nmyproj$ newt build nrf52_blinky\n\n\n\n\n\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u955c\u50cf\uff1a\n\n\nmyproj$ newt create-image nrf52_blinky \n1\n.0.0\n\n\n\n\n\u6700\u540e\uff0c\u4f7f\u7528 \nnewt load\n \u52a0\u8f7d\u56fa\u4ef6\uff1a\n\n\nmyproj$ newt load nrf52_boot\nLoading bootloader\n\nmyproj$ newt load nrf52_blinky\nLoading app image into slot \n1\n\n\n\n\n\n\u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff0c\u4f60\u5df2\u6210\u529f\u5b8c\u6210\u65b0\u5de5\u7a0b\u521b\u5efa\u3002\n\n\n\u66f4\u591a\u793a\u4f8b\n\n\n\u968f\u7740 Mynewt \u529f\u80fd\u4e0d\u65ad\u4e30\u5bcc\uff0c\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5e94\u7528\u793a\u4f8b\u5230 \nnrf52840-mdk\n \u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u5728 \nnrf52840-mdk/examples/mynewt/\n \u76ee\u5f55\u627e\u5230\u8fd9\u4e9b\u793a\u4f8b\u4ee3\u7801\u3002\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\nApache Mynewt Official site\n\n\nApache Mynewt Documentation\n\n\nApache/mynewt-core repository\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "Mynewt"
        }, 
        {
            "location": "/cn/mynewt/#mynewt-apache", 
            "text": "", 
            "title": "Mynewt Apache \u5f00\u6e90\u3001\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5b9e\u65f6\u64cd\u4f5c\u7cfb\u7edf"
        }, 
        {
            "location": "/cn/mynewt/#_1", 
            "text": "Mynewt \u662f\u4e00\u6b3e\u9002\u7528\u4e8e\u5fae\u578b\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u7ec4\u4ef6\u5316\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u3002Apache Mynewt \u4f7f\u7528 Newt \u6784\u5efa\u548c\u5305\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u4ec5\u9009\u62e9\u6240\u9700\u7684\u7ec4\u4ef6\u6765\u6784\u5efa\u64cd\u4f5c\u7cfb\u7edf\u3002\u5176\u76ee\u6807\u662f\u4f7f\u529f\u8017\u548c\u6210\u672c\u6210\u4e3a\u9a71\u52a8\u56e0\u7d20\u7684\u5fae\u63a7\u5236\u5668\u73af\u5883\u7684\u5e94\u7528\u5f00\u53d1\u53d8\u5f97\u5bb9\u6613\u3002  Mynewt \u63d0\u4f9b\u5f00\u6e90\u84dd\u7259 5.0 \u534f\u8bae\u6808\u548c\u5d4c\u5165\u5f0f\u4e2d\u95f4\u4ef6\u3001\u95ea\u5b58\u6587\u4ef6\u7cfb\u7edf\u3001\u7f51\u7edc\u5806\u6808\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001FATFS\u3001\u5f15\u5bfc\u7a0b\u5e8f\u3001\u7edf\u8ba1\u548c\u8bb0\u5f55\u57fa\u7840\u8bbe\u65bd\u7b49\u7684\u652f\u6301\u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/mynewt/#newt", 
            "text": "\u4e3a\u4e86\u662f\u5f00\u53d1\u8005\u80fd\u591f\u66f4\u597d\u5730\u4f7f\u7528 Mynewt \u63d0\u4f9b\u7684\u7ec4\u4ef6\u6765\u5f00\u53d1\u5e94\u7528\uff0cMynewt \u5f15\u5165\u4e86\u4e00\u4e2a\u540d\u4e3a  newt  \u7684\u6784\u5efa\u5de5\u5177\u548c\u5305\u7ba1\u7406\u5668\u3002\u8be5\u5de5\u5177\u652f\u6301\u8de8\u5e73\u53f0\uff0c\u53ef\u4ee5\u8fd0\u884c\u5728 Windows\uff0cLinux \u548c macOS \u5e73\u53f0\u4e0a\u3002  \u4e0b\u9762\u5c06\u4ecb\u7ecd\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u5982\u4f55\u5b89\u88c5  newt \uff1a   Windows  macOS  Linux", 
            "title": "\u5b89\u88c5 Newt"
        }, 
        {
            "location": "/cn/mynewt/#windows", 
            "text": "\u5728 Windows \u5e73\u53f0\uff0c\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u662f\u5b89\u88c5\u4e00\u4e2a Unix \u5f00\u53d1\u73af\u5883\uff0c\u4f8b\u5982  MSYS2 \u3002\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u914d\u7f6e\uff1a    \u524d\u5f80  MSYS2  \u5b98\u7f51\u4e0b\u8f7d\u8f6f\u4ef6\u5e76\u5b89\u88c5\uff0864 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"x86_64\"\uff0c32 \u4f4d\u7cfb\u7edf\u9009\u62e9 \"i686\"\uff09\uff1b    \u6253\u5f00 MSYS2\uff0c\u66f4\u65b0\u7cfb\u7edf\u8f6f\u4ef6\u5305\uff1a  $ pacman -Syu    \u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5173\u95ed MSYS2\uff0c\u91cd\u65b0\u8fd0\u884c\u4ee5\u5b8c\u6210\u66f4\u65b0\uff1a  $ pacman -Su    \u5b89\u88c5  git  \u548c  tar  \u5de5\u5177:  $ pacman -S git tar    \u4e0b\u8f7d\u5e76\u89e3\u538b newt \u6e90\u7801\uff1a  $ wget -P /tmp https://github.com/apache/mynewt-newt/archive/mynewt_1_3_0_tag.tar.gz\n$ tar -xzf /tmp/mynewt_1_3_0_tag.tar.gz    \u8fd0\u884c  build.sh  \u6765\u7f16\u8bd1  newt  \u5de5\u5177\uff1a  $  cd  mynewt-newt-mynewt_1_3_0_tag   \n$ ./build.sh\n$ rm /tmp/mynewt_1_3_0_tag.tar.gz    \u7f16\u8bd1\u6210\u529f\u540e\u5c06\u751f\u6210  newt/newt.exe  \u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5c06\u5176\u79fb\u52a8\u5230\u7cfb\u7edf\u76ee\u5f55\uff1a  $ mv newt/newt.exe /usr/bin", 
            "title": "Windows"
        }, 
        {
            "location": "/cn/mynewt/#macos", 
            "text": "\u5728 macOS \u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528  Homebrew  \u6765\u5b89\u88c5 newt\u3002\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u5b89\u88c5\uff0c\u9700\u8981\u5148\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a  $ brew tap runtimeco/homebrew-mynewt\n$ brew update  \u7136\u540e\u5b89\u88c5\u6700\u65b0\u7248  newt  \u5de5\u5177\uff1a  $ brew update\n$ brew install mynewt-newt", 
            "title": "macOS"
        }, 
        {
            "location": "/cn/mynewt/#linux", 
            "text": "\u5728 Linux \u7cfb\u7edf\uff08\u6bd4\u5982 Ubuntu\uff09\uff0c\u76f4\u63a5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b89\u88c5 newt\uff1a  $ sudo apt-get update\n$ sudo apt-get install newt   Note  \u5982\u679c\u9047\u5230\u9519\u8bef (\u6bd4\u5982\u4e22\u5931  sys/mman.h  \u6587\u4ef6), \u9700\u8981\u5148\u786e\u8ba4\u5df2\u7ecf\u5b89\u88c5\u4e86 32\u4f4d  glibc : $ sudo apt-get install gcc-multilib", 
            "title": "Linux"
        }, 
        {
            "location": "/cn/mynewt/#blinky", 
            "text": "\u5b89\u88c5\u597d newt \u4e4b\u540e\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u7f16\u8bd1\u7b2c\u4e00\u4e2a\u793a\u4f8b\u4e86\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86  blinky  \u793a\u4f8b\uff0c\u4f60\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u9a8c\u8bc1\uff1a  \u6253\u5f00\u547d\u4ee4\u884c\u7ec8\u7aef\u5e76\u5207\u6362\u5230  blinky  \u793a\u4f8b\u76ee\u5f55\uff1a  $  cd  ./nrf52840-mdk/examples/mynewt/blinky  \u4f7f\u7528  newt install  \u547d\u4ee4\u5b89\u88c5\u793a\u4f8b\u4f9d\u8d56\u9879\uff1a  blinky$ newt install\napache-mynewt-core successfully installed version  0 .0.0-none\nmynewt_nrf52840_mdk successfully installed version  0 .0.0-none  \u8be5\u793a\u4f8b\u5df2\u7ecf\u63d0\u4f9b\u4e86\u51e0\u4e2a\u53ef\u7528\u7684 target\uff0c\u5176\u4e2d  nrf52_blinky  \u4e3a\u5e94\u7528\u7a0b\u5e8f\u3001 nrf52_boot  \u4e3a Bootloader\uff0c\u53ef\u4ee5\u4f7f\u7528  newt target show  \u547d\u4ee4\u67e5\u770b\uff1a  blinky$ newt target show\ntargets/my_blinky_sim\n     app = apps/blinky\n     bsp = @apache-mynewt-core/hw/bsp/native\n     build_profile = debug\ntargets/nrf52_blinky\n     app = apps/blinky\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = debug\ntargets/nrf52_boot\n     app = @apache-mynewt-core/apps/boot\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = optimized  \u8fd0\u884c  newt build nrf52_boot  \u547d\u4ee4\u7f16\u8bd1 Bootloader\uff1a  blinky$ newt build nrf52_boot\nBuilding target targets/nrf52_boot\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec256.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_ec.c\nCompiling repos/apache-mynewt-core/apps/boot/src/boot.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/bootutil_misc.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_rsa.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/image_validate.c\nCompiling repos/apache-mynewt-core/boot/bootutil/src/loader.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aes.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/aesni.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/arc4.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1parse.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/asn1write.c\nCompiling repos/apache-mynewt-core/crypto/mbedtls/src/base64.c\n...\nArchiving nrf52_boot-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_boot/app/apps/boot/boot.elf\nTarget successfully built: targets/nrf52_boot  \u8fd0\u884c  newt build nrf52_blinky  \u547d\u4ee4\u7f16\u8bd1 blinky \u5e94\u7528\uff1a  blinky$ newt build nrf52_blinky\nBuilding target targets/nrf52_blinky\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52840.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/sbrk.c\nCompiling apps/blinky/src/main.c\nAssembling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/arch/cortex_m4/gcc_startup_nrf52_split.s\nCompiling repos/mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk/src/hal_bsp.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/src/uart.c\nCompiling repos/apache-mynewt-core/hw/cmsis-core/src/cmsis_nvic.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_common.c\nCompiling repos/apache-mynewt-core/hw/drivers/uart/uart_hal/src/uart_hal.c\nCompiling repos/apache-mynewt-core/hw/hal/src/hal_flash.c\n...\nArchiving nrf52_blinky-sysinit-app.a\nArchiving sys_flash_map.a\nArchiving sys_mfg.a\nArchiving sys_sysinit.a\nArchiving util_mem.a\nLinking /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.elf\nTarget successfully built: targets/nrf52_blinky  \u7f16\u8bd1\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528  newt create-image nrf52_blinky 1.0.0  \u547d\u4ee4\u521b\u5efa\u955c\u50cf\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\u7248\u672c\u53f7\uff0c\u8fd9\u91cc\u4ee5  1.0.0  \u4f5c\u4e3a\u793a\u4f8b\uff1a  blinky$ newt create-image nrf52_blinky  1 .0.0\nApp image succesfully generated: /makerdiary/nrf52840-mdk/examples/mynewt/blinky/bin/targets/nrf52_blinky/app/apps/blinky/blinky.img  \u4e00\u5207\u8fdb\u884c\u6b63\u5e38\uff0c\u8fd0\u884c  newt load nrf52_boot  \u547d\u4ee4\u4e0b\u8f7d Bootloader\uff1a   \u63d0\u793a  nRF52840-MDK \u786c\u4ef6\u652f\u6301 OpenOCD \u8c03\u8bd5\u5668\uff0cMynewt \u4f7f\u7528 OpenOCD \u6765\u4e0b\u8f7d\u56fa\u4ef6\u548c\u8c03\u8bd5\uff0c\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u94fe\u63a5\u6307\u5f15\u5b8c\u6210\u5b89\u88c5\uff1a OpenOCD \u5b89\u88c5\u6307\u5f15 \u3002   blinky$ newt load nrf52_boot\nLoading bootloader  \u8fd0\u884c  newt load nrf52_blinky  \u547d\u4ee4\u4e0b\u8f7d blinky \u5e94\u7528\uff1a  blinky$ newt load nrf52_blinky\nLoading app image into slot  1   \u89c2\u5bdf\u7a0b\u5e8f\u662f\u5426\u8fd0\u884c\u6b63\u5e38\uff1a", 
            "title": "\u8fd0\u884c Blinky \u793a\u4f8b"
        }, 
        {
            "location": "/cn/mynewt/#_2", 
            "text": "\u4f60\u4e5f\u53ef\u4ee5\u4ece\u5934\u521b\u5efa\u81ea\u5df1\u7684\u65b0\u5de5\u7a0b\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5373\u53ef\u5feb\u901f\u5b8c\u6210\u3002  \u5728\u4f60\u7684\u5de5\u4f5c\u76ee\u5f55\uff08\u8fd9\u91cc\u5047\u8bbe\u4e3a  dev \uff09\u8fd0\u884c  newt new myproj  \u521b\u5efa\u540d\u4e3a  myproj  \u7684\u65b0\u5de5\u7a0b\uff1a  $cd  ~/dev\n$ newt new myproj\nDownloading project skeleton from apache/mynewt-blinky...\nInstalling skeleton in myproj...\nProject myproj successfully created.  \u5b8c\u6210\u540e newt \u4f1a\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u9879\u76ee\u6a21\u677f\uff0c\u5927\u81f4\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a  .\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 NOTICE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 apps\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 blinky\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pkg.yml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 main.c\n\u251c\u2500\u2500 project.yml\n\u2514\u2500\u2500 targets\n    \u251c\u2500\u2500 my_blinky_sim\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pkg.yml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 target.yml\n    \u2514\u2500\u2500 unittest\n        \u251c\u2500\u2500 pkg.yml\n        \u2514\u2500\u2500 target.yml 6  directories,  10  files  \u6211\u4eec\u5df2\u7ecf\u4e3a nRF52840-MDK \u63d0\u4f9b Mynewt \u677f\u7ea7\u652f\u6301\u5305  mynewt_nrf52840_mdk \uff0c\u53ef\u4ee5\u5728  project.yml  \u9879\u76ee\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u914d\u7f6e\uff1a   \u6ce8\u610f  \u4f60\u9700\u8981\u5c06  vers  \u53d8\u91cf\u8bbe\u7f6e\u4e3a  0-dev  \u4ee5\u4fbf\u4f7f\u7528  master  \u5206\u652f\u7684\u6700\u65b0\u4ee3\u7801\u3002   project.name:  myproj \n\nproject.repositories:\n    - apache-mynewt-core\n    - mynewt_nrf52840_mdk # Use github s distribution mechanism for core ASF libraries.  # This provides mirroring automatically for us.  # \nrepository.apache-mynewt-core:\n    type: github\n    vers:  0 -dev\n    user: apache\n    repo: mynewt-core # a special repo to hold hardware specific stuff for nRF52840-MDK \nrepository.mynewt_nrf52840_mdk:\n    type: github\n    vers:  0 -dev\n    user: makerdiary\n    repo: mynewt_nrf52840_mdk  \u8fd0\u884c  newt install  \u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u9879\uff1a  myproj$ newt install\napache-mynewt-core successfully installed version  0 .0.0-none\nmynewt_nrf52840_mdk successfully installed version  0 .0.0-none  \u63a5\u4e0b\u6765\uff0c\u4f60\u9700\u8981\u4e3a\u9879\u76ee\u521b\u5efa\u4e24\u4e2a target\uff0c\u4e00\u4e2a\u662f Bootloader\uff0c\u4e00\u4e2a\u662f\u5e94\u7528\u7a0b\u5e8f\uff1a  myproj$ newt target create nrf52_boot\nmyproj$ newt target  set  nrf52_boot  app = @apache-mynewt-core/apps/boot\nmyproj$ newt target  set  nrf52_boot  bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target  set  nrf52_boot  build_profile = optimized  myproj$ newt target create nrf52_blinky\nmyproj$ newt target  set  nrf52_blinky  app = apps/blinky\nmyproj$ newt target  set  nrf52_blinky  bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\nmyproj$ newt target  set  nrf52_blinky  build_profile = debug  \u8fd0\u884c  newt target show  \u67e5\u770b\u76ee\u6807\u8bbe\u7f6e\uff1a  myproj$ newt target show\ntargets/my_blinky_sim\n     app = apps/blinky\n     bsp = @apache-mynewt-core/hw/bsp/native\n     build_profile = debug\ntargets/nrf52_blinky\n     app = apps/blinky\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = debug\ntargets/nrf52_boot\n     app = @apache-mynewt-core/apps/boot\n     bsp = @mynewt_nrf52840_mdk/hw/bsp/nrf52840_mdk\n     build_profile = optimized  \u8fd9\u65f6\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u76ee\u6807\u4ee3\u7801\uff1a  myproj$ newt build nrf52_boot\nmyproj$ newt build nrf52_blinky  \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u521b\u5efa\u955c\u50cf\uff1a  myproj$ newt create-image nrf52_blinky  1 .0.0  \u6700\u540e\uff0c\u4f7f\u7528  newt load  \u52a0\u8f7d\u56fa\u4ef6\uff1a  myproj$ newt load nrf52_boot\nLoading bootloader\n\nmyproj$ newt load nrf52_blinky\nLoading app image into slot  1   \u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\uff0c\u4f60\u5df2\u6210\u529f\u5b8c\u6210\u65b0\u5de5\u7a0b\u521b\u5efa\u3002", 
            "title": "\u521b\u5efa\u65b0\u5de5\u7a0b"
        }, 
        {
            "location": "/cn/mynewt/#_3", 
            "text": "\u968f\u7740 Mynewt \u529f\u80fd\u4e0d\u65ad\u4e30\u5bcc\uff0c\u6211\u4eec\u4f1a\u4e0d\u65ad\u589e\u52a0\u4e00\u4e9b\u65b0\u7684\u5e94\u7528\u793a\u4f8b\u5230  nrf52840-mdk  \u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u5728  nrf52840-mdk/examples/mynewt/  \u76ee\u5f55\u627e\u5230\u8fd9\u4e9b\u793a\u4f8b\u4ee3\u7801\u3002", 
            "title": "\u66f4\u591a\u793a\u4f8b"
        }, 
        {
            "location": "/cn/mynewt/#_4", 
            "text": "Apache Mynewt Official site  Apache Mynewt Documentation  Apache/mynewt-core repository", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/mynewt/#_5", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/daplink/", 
            "text": "Arm Mbed DAPLink \nArm Mbed \u5f00\u6e90\u7684 Cortex \u82af\u7247\u8c03\u8bd5\u5de5\u5177\n\n\n\n\n\u7b80\u4ecb\n\n\nDAPLink \u662f Arm Mbed \u5f00\u6e90\u7684\u3001\u9488\u5bf9 Cortex-M \u82af\u7247\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u5176\u76ee\u7684\u662f\u901a\u8fc7 Cortex \u8c03\u8bd5\u5668\u6765\u5b9e\u73b0\u4ee3\u7801\u4e0b\u8f7d\u5230\u76ee\u6807\u8bbe\u5907\u3002\n\n\nDAPLink \u6709\u4e09\u4e2a\u4e3b\u8981\u7279\u6027\uff1a\n\n\n\n\nHID \u63a5\u53e3\u5b9e\u73b0\uff0c\u57fa\u4e8e CMSIS-DAP \u8c03\u8bd5\u534f\u8bae\uff0cHID \u63a5\u53e3\u5141\u8bb8\u5e38\u7528\u7684\u5de5\u5177\u94fe\u6765\u5bf9\u8bbe\u5907\u8fdb\u884c\u7f16\u7a0b\u53ca\u8c03\u8bd5\uff0c\u76ee\u524d\u652f\u6301\u7684\u5de5\u5177\u94fe\u5305\u62ec MDK\u3001IAR \u53ca pyOCD\uff1b\n\n\n\u62d6\u653e\u7f16\u7a0b\u652f\u6301\uff0c\u901a\u8fc7\u5c06 \u56fa\u4ef6\u62d6\u653e\u5230 USB \u78c1\u76d8\u5185\u5373\u5b9e\u73b0\u7f16\u7a0b\n\n\n\u5b9e\u73b0 USB \u4e32\u53e3\u901a\u4fe1\u529f\u80fd\u3002\n\n\n\n\n\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bbf\u95ee \nArm Mbed DAPLink \u5b98\u7f51\n\u3002\n\n\n\u529f\u80fd\u6846\u56fe\n\n\n\u4ee5\u4e0b\u662f DAPLink \u7684\u529f\u80fd\u6846\u56fe\uff0c\u4f7f\u7528 Cortex-M0 \u5185\u6838\u7684 LPC11U35 \u5b9e\u73b0\uff1a\n\n\n\n\n\u5982\u4f55\u66f4\u65b0 DAPLink \u56fa\u4ef6\uff1f\n\n\nDAPLink \u4f1a\u4e0d\u65ad\u4f18\u5316\u4ee5\u53ca\u589e\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u56fa\u4ef6\u6765\u83b7\u5f97\u8fd9\u4e9b\u65b0\u529f\u80fd\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u53ef\u5b8c\u6210\u66f4\u65b0\uff1a\n\n\n\n\n\u6309\u4e0b RESET \u6309\u952e\uff0c\u8fde\u63a5\u5230 PC\uff0cDAPLink \u5c06\u8fdb\u5165 Bootloader \u6a21\u5f0f\uff0c\u7cfb\u7edf\u51fa\u73b0\u540d\u4e3a \nCRP DISABLD\n \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\uff1b\n\n\n\u5220\u9664 \nCRP DISABLD\n \u53ef\u79fb\u52a8\u78c1\u76d8\u4e2d\u7684 \nfirmware.bin\n \u6587\u4ef6\uff1b\n\n\n\u4e0b\u8f7d\n\u6700\u65b0\u7684 DAPLink \u56fa\u4ef6\n\n\n\n\n\u5c06\u56fa\u4ef6\u76f4\u63a5\u62f7\u8d1d\u5230 \nCRP DISABLD\n \u53ef\u79fb\u52a8\u78c1\u76d8\uff1a\n\n\n\n\nWindows - \u76f4\u63a5\u5c06 \n.bin\n \u62d6\u653e\u5230\u8be5\u78c1\u76d8\u5373\u53ef\uff1b\n\n\nmacOS - \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b8c\u6210\u66f4\u65b0\uff1a\n    \n$ sudo mount -u -w -o sync /Volumes/CRP DISABLD\n$ cp -X \npath to interface firmware file\n /Volumes/CRP DISABLD/\n\n\n\nLinux - \u8fd0\u884c\u4ee5\u4e0b\u547d\u540d\u5b8c\u6210\u66f4\u65b0\uff1a\n    \n$ cp \npath to interface firmware file\n \nCRP DISABLD\n \n sync\n\n\n\n\n\n\n\n\n\n\u62f7\u8d1d\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u62d4\u63d2\u677f\u5b50\uff0c\u5373\u53ef\u5b8c\u6210\u66f4\u65b0\uff0c\u65b0\u7248\u672c\u53f7\u4ece \nDAPLink\n \u78c1\u76d8\u4e2d\u63cf\u8ff0\u6587\u4ef6\u4e2d\u83b7\u5f97\u3002\n\n\n\n\n\n\n\u5982\u4f55\u7f16\u8bd1 DAPLink?\n\n\n\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u7f16\u8bd1 DAPLink\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5c06\u505a\u7b80\u5355\u4ecb\u7ecd\uff1a\n\n\n\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\n\n\n\u63d0\u524d\u5b89\u88c5\u597d\u4ee5\u4e0b\u9700\u8981\u7528\u5230\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a\n\n\n\n\nPython 2, 2.7.9+\n\n\nGit\n\n\nKeil MDK-ARM\n\n\n\n\n\u4e0b\u8f7d\u6e90\u7801\n\n\n\u4ece Arm Mbed \u5b98\u65b9\u4ed3\u5e93\u514b\u9686 DAPLink \u6e90\u7801\uff1a\n\n\n$ git clone https://github.com/ARMmbed/DAPLink\n$ \ncd\n DAPLink\n$ pip install virtualenv\n$ virtualenv venv\n\n\n\n\n\u521b\u5efa\u7f16\u8bd1\u73af\u5883\n\n\n\u4f7f\u7528 Python \u865a\u62df\u73af\u5883\uff0c\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\uff0c\u5e76\u751f\u6210 Keil \u5de5\u7a0b\uff1a\n\n\n$ ./venv/Scripts/activate\n$ pip install -r requirements.txt\n$ progen generate -t uvision\n$ ./venv/Scripts/deactivate\n\n\n\n\n\u7f16\u8bd1 DAPLink\n\n\n\u5728 \nprojectfiles/uvision/\nyour-project\n \u76ee\u5f55\u6253\u5f00 Keil \u5de5\u7a0b\uff0c\u76f4\u63a5\u70b9\u51fb\n\u7f16\u8bd1\n\u6309\u94ae\u5373\u53ef\u3002\n\n\n\n\n\u53c2\u8003\u8d44\u6e90\n\n\n\n\nArm Mbed DAPLink \u4ed3\u5e93\n\n\n\n\n\u95ee\u9898\u53cd\u9988\n\n\n\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7 \nGitHub Issue\n \u5bfb\u6c42\u89e3\u51b3\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "DAPLink"
        }, 
        {
            "location": "/cn/daplink/#arm-mbed-daplink-arm-mbed-cortex", 
            "text": "", 
            "title": "Arm Mbed DAPLink Arm Mbed \u5f00\u6e90\u7684 Cortex \u82af\u7247\u8c03\u8bd5\u5de5\u5177"
        }, 
        {
            "location": "/cn/daplink/#_1", 
            "text": "DAPLink \u662f Arm Mbed \u5f00\u6e90\u7684\u3001\u9488\u5bf9 Cortex-M \u82af\u7247\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u5176\u76ee\u7684\u662f\u901a\u8fc7 Cortex \u8c03\u8bd5\u5668\u6765\u5b9e\u73b0\u4ee3\u7801\u4e0b\u8f7d\u5230\u76ee\u6807\u8bbe\u5907\u3002  DAPLink \u6709\u4e09\u4e2a\u4e3b\u8981\u7279\u6027\uff1a   HID \u63a5\u53e3\u5b9e\u73b0\uff0c\u57fa\u4e8e CMSIS-DAP \u8c03\u8bd5\u534f\u8bae\uff0cHID \u63a5\u53e3\u5141\u8bb8\u5e38\u7528\u7684\u5de5\u5177\u94fe\u6765\u5bf9\u8bbe\u5907\u8fdb\u884c\u7f16\u7a0b\u53ca\u8c03\u8bd5\uff0c\u76ee\u524d\u652f\u6301\u7684\u5de5\u5177\u94fe\u5305\u62ec MDK\u3001IAR \u53ca pyOCD\uff1b  \u62d6\u653e\u7f16\u7a0b\u652f\u6301\uff0c\u901a\u8fc7\u5c06 \u56fa\u4ef6\u62d6\u653e\u5230 USB \u78c1\u76d8\u5185\u5373\u5b9e\u73b0\u7f16\u7a0b  \u5b9e\u73b0 USB \u4e32\u53e3\u901a\u4fe1\u529f\u80fd\u3002   \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u8bbf\u95ee  Arm Mbed DAPLink \u5b98\u7f51 \u3002", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/cn/daplink/#_2", 
            "text": "\u4ee5\u4e0b\u662f DAPLink \u7684\u529f\u80fd\u6846\u56fe\uff0c\u4f7f\u7528 Cortex-M0 \u5185\u6838\u7684 LPC11U35 \u5b9e\u73b0\uff1a", 
            "title": "\u529f\u80fd\u6846\u56fe"
        }, 
        {
            "location": "/cn/daplink/#daplink", 
            "text": "DAPLink \u4f1a\u4e0d\u65ad\u4f18\u5316\u4ee5\u53ca\u589e\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u56fa\u4ef6\u6765\u83b7\u5f97\u8fd9\u4e9b\u65b0\u529f\u80fd\uff0c\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u53ef\u5b8c\u6210\u66f4\u65b0\uff1a   \u6309\u4e0b RESET \u6309\u952e\uff0c\u8fde\u63a5\u5230 PC\uff0cDAPLink \u5c06\u8fdb\u5165 Bootloader \u6a21\u5f0f\uff0c\u7cfb\u7edf\u51fa\u73b0\u540d\u4e3a  CRP DISABLD  \u7684\u53ef\u79fb\u52a8\u78c1\u76d8\uff1b  \u5220\u9664  CRP DISABLD  \u53ef\u79fb\u52a8\u78c1\u76d8\u4e2d\u7684  firmware.bin  \u6587\u4ef6\uff1b  \u4e0b\u8f7d \u6700\u65b0\u7684 DAPLink \u56fa\u4ef6   \u5c06\u56fa\u4ef6\u76f4\u63a5\u62f7\u8d1d\u5230  CRP DISABLD  \u53ef\u79fb\u52a8\u78c1\u76d8\uff1a   Windows - \u76f4\u63a5\u5c06  .bin  \u62d6\u653e\u5230\u8be5\u78c1\u76d8\u5373\u53ef\uff1b  macOS - \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5b8c\u6210\u66f4\u65b0\uff1a\n     $ sudo mount -u -w -o sync /Volumes/CRP DISABLD\n$ cp -X  path to interface firmware file  /Volumes/CRP DISABLD/  Linux - \u8fd0\u884c\u4ee5\u4e0b\u547d\u540d\u5b8c\u6210\u66f4\u65b0\uff1a\n     $ cp  path to interface firmware file   CRP DISABLD    sync     \u62f7\u8d1d\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u62d4\u63d2\u677f\u5b50\uff0c\u5373\u53ef\u5b8c\u6210\u66f4\u65b0\uff0c\u65b0\u7248\u672c\u53f7\u4ece  DAPLink  \u78c1\u76d8\u4e2d\u63cf\u8ff0\u6587\u4ef6\u4e2d\u83b7\u5f97\u3002", 
            "title": "\u5982\u4f55\u66f4\u65b0 DAPLink \u56fa\u4ef6\uff1f"
        }, 
        {
            "location": "/cn/daplink/#daplink_1", 
            "text": "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1\u7f16\u8bd1 DAPLink\uff0c\u4ee5\u4e0b\u5185\u5bb9\u5c06\u505a\u7b80\u5355\u4ecb\u7ecd\uff1a", 
            "title": "\u5982\u4f55\u7f16\u8bd1 DAPLink?"
        }, 
        {
            "location": "/cn/daplink/#_3", 
            "text": "\u63d0\u524d\u5b89\u88c5\u597d\u4ee5\u4e0b\u9700\u8981\u7528\u5230\u7684\u7b2c\u4e09\u65b9\u5de5\u5177\uff1a   Python 2, 2.7.9+  Git  Keil MDK-ARM", 
            "title": "\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177"
        }, 
        {
            "location": "/cn/daplink/#_4", 
            "text": "\u4ece Arm Mbed \u5b98\u65b9\u4ed3\u5e93\u514b\u9686 DAPLink \u6e90\u7801\uff1a  $ git clone https://github.com/ARMmbed/DAPLink\n$  cd  DAPLink\n$ pip install virtualenv\n$ virtualenv venv", 
            "title": "\u4e0b\u8f7d\u6e90\u7801"
        }, 
        {
            "location": "/cn/daplink/#_5", 
            "text": "\u4f7f\u7528 Python \u865a\u62df\u73af\u5883\uff0c\u5b89\u88c5\u4f9d\u8d56\u5de5\u5177\uff0c\u5e76\u751f\u6210 Keil \u5de5\u7a0b\uff1a  $ ./venv/Scripts/activate\n$ pip install -r requirements.txt\n$ progen generate -t uvision\n$ ./venv/Scripts/deactivate", 
            "title": "\u521b\u5efa\u7f16\u8bd1\u73af\u5883"
        }, 
        {
            "location": "/cn/daplink/#daplink_2", 
            "text": "\u5728  projectfiles/uvision/ your-project  \u76ee\u5f55\u6253\u5f00 Keil \u5de5\u7a0b\uff0c\u76f4\u63a5\u70b9\u51fb \u7f16\u8bd1 \u6309\u94ae\u5373\u53ef\u3002", 
            "title": "\u7f16\u8bd1 DAPLink"
        }, 
        {
            "location": "/cn/daplink/#_6", 
            "text": "Arm Mbed DAPLink \u4ed3\u5e93", 
            "title": "\u53c2\u8003\u8d44\u6e90"
        }, 
        {
            "location": "/cn/daplink/#_7", 
            "text": "\u5982\u679c\u5728\u5f00\u53d1\u8fc7\u7a0b\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7  GitHub Issue  \u5bfb\u6c42\u89e3\u51b3\u3002   \u521b\u5efa Issue", 
            "title": "\u95ee\u9898\u53cd\u9988"
        }, 
        {
            "location": "/cn/how-to-buy/", 
            "text": "\u5982\u4f55\u8d2d\u4e70 nRF52840-MDK\uff1f\n\n\n\u8d2d\u4e70\u6e20\u9053\n\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8d2d\u4e70\u6e20\u9053\u83b7\u5f97 nRF52840-MDK \u76f8\u5173\u786c\u4ef6\uff1a\n\n\n \u5fae\u4fe1-\u9020\u7269\u5c0f\u5e97 \n \n\n\n \u6dd8\u5b9d-\u9020\u7269\u5c0f\u5e97\n\n\n\u6279\u91cf\n\u5b9a\u5236\u5316\n\n\n\u5982\u679c\u4f60\u6709\u6279\u91cf\u6216\u8005\u5b9a\u5236\u5316\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8054\u7cfb\u6211\u4eec\uff01\n\n\n Email Us", 
            "title": "\u5982\u4f55\u8d2d\u4e70"
        }, 
        {
            "location": "/cn/how-to-buy/#nrf52840-mdk", 
            "text": "", 
            "title": "\u5982\u4f55\u8d2d\u4e70 nRF52840-MDK\uff1f"
        }, 
        {
            "location": "/cn/how-to-buy/#_1", 
            "text": "\u4f60\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u8d2d\u4e70\u6e20\u9053\u83b7\u5f97 nRF52840-MDK \u76f8\u5173\u786c\u4ef6\uff1a   \u5fae\u4fe1-\u9020\u7269\u5c0f\u5e97      \u6dd8\u5b9d-\u9020\u7269\u5c0f\u5e97", 
            "title": "\u8d2d\u4e70\u6e20\u9053"
        }, 
        {
            "location": "/cn/how-to-buy/#_2", 
            "text": "\u5982\u679c\u4f60\u6709\u6279\u91cf\u6216\u8005\u5b9a\u5236\u5316\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u8054\u7cfb\u6211\u4eec\uff01   Email Us", 
            "title": "\u6279\u91cf&amp;\u5b9a\u5236\u5316"
        }, 
        {
            "location": "/cn/CONTRIBUTING/", 
            "text": "\u5982\u679c\u4f60\u5bf9 nRF52840-MDK \u9879\u76ee\u611f\u5174\u8da3\uff0c\u6b22\u8fce\u52a0\u5165\u6211\u4eec\uff0c\u4e00\u8d77\u505a\u51fa\u6709\u8da3\u7684\u4e1c\u897f\u3002\n\n\n\u4efb\u4f55\u7591\u95ee\n\n\n\u5982\u679c\u6709\u4efb\u4f55\u9700\u8981\u5feb\u901f\u89e3\u7b54\u7684\u7591\u95ee\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5bf9\u5e94\u9875\u9762\u4e0b\u65b9\u7684\u8bc4\u8bba\u7a97\u53e3\u53cd\u9988\u3002\n\n\n\u63d0\u4ea4 Bug\n\n\n\u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e9b Bug\uff0c\u53ef\u4ee5\u901a\u8fc7 \nissue tracker\n \u63d0\u4ea4\u7ed9\u6211\u4eec\uff0c\u4e00\u8d77\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\u3002\n\n\n\u589e\u52a0\u65b0\u529f\u80fd\n\n\n\u5982\u679c\u4f60\u89c9\u5f97\u53ef\u4ee5\u589e\u52a0\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u529f\u80fd\u3001\u65b0\u6848\u4f8b\uff0c\u53ef\u4ee5\u5728 GitHub \u521b\u5efa Issue\uff0c\u5411\u66f4\u591a\u4eba\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3002\n\n\n \u521b\u5efa Issue", 
            "title": "\u53cd\u9988&\u8d21\u732e"
        }, 
        {
            "location": "/cn/CONTRIBUTING/#_1", 
            "text": "\u5982\u679c\u6709\u4efb\u4f55\u9700\u8981\u5feb\u901f\u89e3\u7b54\u7684\u7591\u95ee\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5bf9\u5e94\u9875\u9762\u4e0b\u65b9\u7684\u8bc4\u8bba\u7a97\u53e3\u53cd\u9988\u3002", 
            "title": "\u4efb\u4f55\u7591\u95ee"
        }, 
        {
            "location": "/cn/CONTRIBUTING/#bug", 
            "text": "\u5982\u679c\u4f60\u53d1\u73b0\u67d0\u4e9b Bug\uff0c\u53ef\u4ee5\u901a\u8fc7  issue tracker  \u63d0\u4ea4\u7ed9\u6211\u4eec\uff0c\u4e00\u8d77\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\u3002", 
            "title": "\u63d0\u4ea4 Bug"
        }, 
        {
            "location": "/cn/CONTRIBUTING/#_2", 
            "text": "\u5982\u679c\u4f60\u89c9\u5f97\u53ef\u4ee5\u589e\u52a0\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u529f\u80fd\u3001\u65b0\u6848\u4f8b\uff0c\u53ef\u4ee5\u5728 GitHub \u521b\u5efa Issue\uff0c\u5411\u66f4\u591a\u4eba\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\u3002   \u521b\u5efa Issue", 
            "title": "\u589e\u52a0\u65b0\u529f\u80fd"
        }, 
        {
            "location": "/cn/LICENSE/", 
            "text": "MIT License\n\n\nCopyright \n 2018 \nmakerdiary.com\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}